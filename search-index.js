var searchIndex = {};
searchIndex['handlebars_iron'] = {"items":[[0,"","handlebars_iron","# Handlebars for Iron",null,null],[3,"Template","","",null,null],[3,"HandlebarsEngine","","",null,null],[12,"sources","","",0,null],[12,"registry","","",0,null],[3,"SourceError","","",null,null],[12,"cause","","",1,null],[3,"DirectorySource","","",null,null],[12,"prefix","","",2,null],[12,"suffix","","",2,null],[3,"MemorySource","","",null,null],[11,"clone","","",3,{"inputs":[{"name":"template"}],"output":{"name":"template"}}],[11,"new","","render some template from pre-registered templates",3,{"inputs":[{"name":"template"},{"name":"str"},{"name":"t"}],"output":{"name":"template"}}],[11,"with","","render some template with temporary template string",3,{"inputs":[{"name":"template"},{"name":"str"},{"name":"t"}],"output":{"name":"template"}}],[11,"modify","","",3,{"inputs":[{"name":"template"},{"name":"response"}],"output":null}],[11,"eval","","",0,{"inputs":[{"name":"handlebarsengine"},{"name":"response"}],"output":{"name":"result"}}],[11,"new","","",0,{"inputs":[{"name":"handlebarsengine"}],"output":{"name":"handlebarsengine"}}],[11,"from","","",0,{"inputs":[{"name":"handlebarsengine"},{"name":"handlebars"}],"output":{"name":"handlebarsengine"}}],[11,"add","","",0,{"inputs":[{"name":"handlebarsengine"},{"name":"box"}],"output":null}],[11,"reload","","",0,{"inputs":[{"name":"handlebarsengine"}],"output":{"name":"result"}}],[11,"after","","",0,{"inputs":[{"name":"handlebarsengine"},{"name":"request"},{"name":"response"}],"output":{"name":"ironresult"}}],[11,"catch","","",0,{"inputs":[{"name":"handlebarsengine"},{"name":"request"},{"name":"ironerror"}],"output":{"name":"ironresult"}}],[11,"fmt","","",1,{"inputs":[{"name":"sourceerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"sourceerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"sourceerror"}],"output":{"name":"str"}}],[11,"cause","","",1,{"inputs":[{"name":"sourceerror"}],"output":{"name":"option"}}],[11,"from","","",1,{"inputs":[{"name":"sourceerror"},{"name":"templateerror"}],"output":{"name":"sourceerror"}}],[11,"from","","",1,{"inputs":[{"name":"sourceerror"},{"name":"templatefileerror"}],"output":{"name":"sourceerror"}}],[11,"new","","",2,{"inputs":[{"name":"directorysource"},{"name":"str"},{"name":"str"}],"output":{"name":"directorysource"}}],[11,"load","","",2,{"inputs":[{"name":"directorysource"},{"name":"handlebars"}],"output":{"name":"result"}}],[11,"load","","",4,{"inputs":[{"name":"memorysource"},{"name":"handlebars"}],"output":{"name":"result"}}],[8,"Source","","",null,null],[10,"load","","",5,{"inputs":[{"name":"source"},{"name":"handlebars"}],"output":{"name":"result"}}]],"paths":[[3,"HandlebarsEngine"],[3,"SourceError"],[3,"DirectorySource"],[3,"Template"],[3,"MemorySource"],[8,"Source"]]};
searchIndex['iron'] = {"items":[[0,"","iron","The main crate for Iron.",null,null],[11,"close","hyper::server","Warning: This function doesn't work. The server remains listening after you called\nit. See https://github.com/hyperium/hyper/issues/338 for more details.",0,{"inputs":[{"name":"listening"}],"output":{"name":"result"}}],[11,"new","hyper::buffer","",1,{"inputs":[{"name":"bufreader"},{"name":"r"}],"output":{"name":"bufreader"}}],[11,"with_capacity","","",1,{"inputs":[{"name":"bufreader"},{"name":"r"},{"name":"usize"}],"output":{"name":"bufreader"}}],[11,"get_ref","","",1,{"inputs":[{"name":"bufreader"}],"output":{"name":"r"}}],[11,"get_mut","","",1,{"inputs":[{"name":"bufreader"}],"output":{"name":"r"}}],[11,"get_buf","","",1,null],[11,"into_inner","","",1,{"inputs":[{"name":"bufreader"}],"output":{"name":"r"}}],[11,"read_into_buf","","",1,{"inputs":[{"name":"bufreader"}],"output":{"name":"result"}}],[11,"read","","",1,null],[11,"fill_buf","","",1,{"inputs":[{"name":"bufreader"}],"output":{"name":"result"}}],[11,"consume","","",1,null],[11,"fmt","hyper::client::pool","",2,{"inputs":[{"name":"config"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",2,{"inputs":[{"name":"config"}],"output":{"name":"config"}}],[11,"fmt","","",3,{"inputs":[{"name":"poolimpl"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",4,null],[11,"fmt","","",4,{"inputs":[{"name":"scheme"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"scheme"},{"name":"scheme"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"scheme"},{"name":"scheme"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"scheme"}],"output":{"name":"scheme"}}],[11,"from","","",4,{"inputs":[{"name":"scheme"},{"name":"str"}],"output":{"name":"scheme"}}],[11,"new","","Creates a `Pool` with a `DefaultConnector`.",5,{"inputs":[{"name":"pool"},{"name":"config"}],"output":{"name":"pool"}}],[11,"with_connector","","Creates a `Pool` with a specified `NetworkConnector`.",5,{"inputs":[{"name":"pool"},{"name":"config"},{"name":"c"}],"output":{"name":"pool"}}],[11,"clear_idle","","Clear all idle connections from the Pool, closing them.",5,null],[11,"connect","","",5,{"inputs":[{"name":"pool"},{"name":"str"},{"name":"u16"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"pooledstreaminner"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"read","","",7,null],[11,"write","","",7,null],[11,"flush","","",7,{"inputs":[{"name":"pooledstream"}],"output":{"name":"result"}}],[11,"peer_addr","","",7,{"inputs":[{"name":"pooledstream"}],"output":{"name":"result"}}],[11,"set_read_timeout","","",7,{"inputs":[{"name":"pooledstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_write_timeout","","",7,{"inputs":[{"name":"pooledstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"close","","",7,{"inputs":[{"name":"pooledstream"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"set_previous_response_expected_no_content","","",7,null],[11,"previous_response_expected_no_content","","",7,{"inputs":[{"name":"pooledstream"}],"output":{"name":"bool"}}],[11,"drop","","",7,null],[11,"headers","hyper::client::request","Read the Request headers.",8,{"inputs":[{"name":"request"}],"output":{"name":"headers"}}],[11,"method","","Read the Request method.",8,{"inputs":[{"name":"request"}],"output":{"name":"method"}}],[11,"set_write_timeout","","Set the write timeout.",8,{"inputs":[{"name":"request"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_read_timeout","","Set the read timeout.",8,{"inputs":[{"name":"request"},{"name":"option"}],"output":{"name":"result"}}],[11,"with_message","","Create a new `Request<Fresh>` that will use the given `HttpMessage` for its communication\nwith the server. This implies that the given `HttpMessage` instance has already been\nproperly initialized by the caller (e.g. a TCP connection's already established).",8,{"inputs":[{"name":"request"},{"name":"method"},{"name":"url"},{"name":"box"}],"output":{"name":"result"}}],[11,"new","","Create a new client request.",8,{"inputs":[{"name":"request"},{"name":"method"},{"name":"url"}],"output":{"name":"result"}}],[11,"with_connector","","Create a new client request with a specific underlying NetworkStream.",8,{"inputs":[{"name":"request"},{"name":"method"},{"name":"url"},{"name":"c"}],"output":{"name":"result"}}],[11,"start","","Consume a Fresh Request, writing the headers and method,\nreturning a Streaming Request.",8,{"inputs":[{"name":"request"}],"output":{"name":"result"}}],[11,"headers_mut","","Get a mutable reference to the Request headers.",8,{"inputs":[{"name":"request"}],"output":{"name":"headers"}}],[11,"send","","Completes writing the request, and returns a response to read from.",8,{"inputs":[{"name":"request"}],"output":{"name":"result"}}],[11,"write","","",8,null],[11,"flush","","",8,{"inputs":[{"name":"request"}],"output":{"name":"result"}}],[11,"fmt","hyper::client::response","",9,{"inputs":[{"name":"response"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new response from a server.",9,{"inputs":[{"name":"response"},{"name":"url"},{"name":"box"}],"output":{"name":"result"}}],[11,"with_message","","Creates a new response received from the server on the given `HttpMessage`.",9,{"inputs":[{"name":"response"},{"name":"url"},{"name":"box"}],"output":{"name":"result"}}],[11,"status_raw","","Get the raw status code and reason.",9,{"inputs":[{"name":"response"}],"output":{"name":"rawstatus"}}],[11,"read","","",9,null],[11,"drop","","",9,null],[11,"fmt","hyper::client","",10,{"inputs":[{"name":"client"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new Client.",10,{"inputs":[{"name":"client"}],"output":{"name":"client"}}],[11,"with_pool_config","","Create a new Client with a configured Pool Config.",10,{"inputs":[{"name":"client"},{"name":"config"}],"output":{"name":"client"}}],[11,"with_connector","","Create a new client with a specific connector.",10,{"inputs":[{"name":"client"},{"name":"c"}],"output":{"name":"client"}}],[11,"with_protocol","","Create a new client with a specific `Protocol`.",10,{"inputs":[{"name":"client"},{"name":"p"}],"output":{"name":"client"}}],[11,"set_redirect_policy","","Set the RedirectPolicy.",10,null],[11,"set_read_timeout","","Set the read timeout value for all requests.",10,null],[11,"set_write_timeout","","Set the write timeout value for all requests.",10,null],[11,"get","","Build a Get request.",10,{"inputs":[{"name":"client"},{"name":"u"}],"output":{"name":"requestbuilder"}}],[11,"head","","Build a Head request.",10,{"inputs":[{"name":"client"},{"name":"u"}],"output":{"name":"requestbuilder"}}],[11,"patch","","Build a Patch request.",10,{"inputs":[{"name":"client"},{"name":"u"}],"output":{"name":"requestbuilder"}}],[11,"post","","Build a Post request.",10,{"inputs":[{"name":"client"},{"name":"u"}],"output":{"name":"requestbuilder"}}],[11,"put","","Build a Put request.",10,{"inputs":[{"name":"client"},{"name":"u"}],"output":{"name":"requestbuilder"}}],[11,"delete","","Build a Delete request.",10,{"inputs":[{"name":"client"},{"name":"u"}],"output":{"name":"requestbuilder"}}],[11,"request","","Build a new request using this Client.",10,{"inputs":[{"name":"client"},{"name":"method"},{"name":"u"}],"output":{"name":"requestbuilder"}}],[11,"default","","",10,{"inputs":[{"name":"client"}],"output":{"name":"client"}}],[11,"body","","Set a request body to be sent.",11,{"inputs":[{"name":"requestbuilder"},{"name":"b"}],"output":{"name":"requestbuilder"}}],[11,"headers","","Add additional headers to the request.",11,{"inputs":[{"name":"requestbuilder"},{"name":"headers"}],"output":{"name":"requestbuilder"}}],[11,"header","","Add an individual new header to the request.",11,{"inputs":[{"name":"requestbuilder"},{"name":"h"}],"output":{"name":"requestbuilder"}}],[11,"send","","Execute this request and receive a Response back.",11,{"inputs":[{"name":"requestbuilder"}],"output":{"name":"result"}}],[11,"read","","",12,null],[11,"from","","",12,{"inputs":[{"name":"body"},{"name":"r"}],"output":{"name":"body"}}],[11,"into_url","url","",13,{"inputs":[{"name":"url"}],"output":{"name":"result"}}],[11,"fmt","hyper::client","",14,{"inputs":[{"name":"redirectpolicy"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"redirectpolicy"}],"output":{"name":"redirectpolicy"}}],[11,"default","","",14,{"inputs":[{"name":"redirectpolicy"}],"output":{"name":"redirectpolicy"}}],[11,"fmt","hyper::error","",15,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",16,{"inputs":[{"name":"void"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",15,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",15,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"from","","",15,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"error"}}],[11,"from","","",15,{"inputs":[{"name":"error"},{"name":"parseerror"}],"output":{"name":"error"}}],[11,"from","","",15,{"inputs":[{"name":"error"},{"name":"utf8error"}],"output":{"name":"error"}}],[11,"from","","",15,{"inputs":[{"name":"error"},{"name":"fromutf8error"}],"output":{"name":"error"}}],[11,"from","","",15,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"error"}}],[11,"from","","",15,{"inputs":[{"name":"error"},{"name":"httperror"}],"output":{"name":"error"}}],[11,"fmt","hyper::method","",17,{"inputs":[{"name":"method"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",17,null],[11,"eq","","",17,{"inputs":[{"name":"method"},{"name":"method"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"method"},{"name":"method"}],"output":{"name":"bool"}}],[11,"clone","","",17,{"inputs":[{"name":"method"}],"output":{"name":"method"}}],[11,"as_ref","","",17,{"inputs":[{"name":"method"}],"output":{"name":"str"}}],[11,"safe","","Whether a method is considered \"safe\", meaning the request is\nessentially read-only.",17,{"inputs":[{"name":"method"}],"output":{"name":"bool"}}],[11,"idempotent","","Whether a method is considered \"idempotent\", meaning the request has\nthe same result is executed multiple times.",17,{"inputs":[{"name":"method"}],"output":{"name":"bool"}}],[11,"from_str","","",17,{"inputs":[{"name":"method"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"method"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","hyper::header::common::accept","",18,{"inputs":[{"name":"accept"},{"name":"accept"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"accept"},{"name":"accept"}],"output":{"name":"bool"}}],[11,"fmt","","",18,{"inputs":[{"name":"accept"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"accept"}],"output":{"name":"accept"}}],[11,"new","collections::vec","Constructs a new, empty `Vec<T>`.",19,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"with_capacity","","Constructs a new, empty `Vec<T>` with the specified capacity.",19,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"from_raw_parts","","Creates a `Vec<T>` directly from the raw components of another vector.",19,null],[11,"capacity","","Returns the number of elements the vector can hold without\nreallocating.",19,{"inputs":[{"name":"vec"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the given `Vec<T>`. The collection may reserve more space to avoid\nfrequent reallocations.",19,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to\nbe inserted in the given `Vec<T>`. Does nothing if the capacity is already\nsufficient.",19,null],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",19,null],[11,"into_boxed_slice","","Converts the vector into Box<[T]>.",19,{"inputs":[{"name":"vec"}],"output":{"name":"box"}}],[11,"truncate","","Shorten a vector to be `len` elements long, dropping excess elements.",19,null],[11,"as_slice","","Extracts a slice containing the entire vector.",19,null],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",19,null],[11,"set_len","","Sets the length of a vector.",19,null],[11,"swap_remove","","Removes an element from anywhere in the vector and return it, replacing\nit with the last element.",19,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"insert","","Inserts an element at position `index` within the vector, shifting all\nelements after position `i` one position to the right.",19,null],[11,"remove","","Removes and returns the element at position `index` within the vector,\nshifting all elements after position `index` one position to the left.",19,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"retain","","Retains only the elements specified by the predicate.",19,null],[11,"push","","Appends an element to the back of a collection.",19,null],[11,"pop","","Removes the last element from a vector and returns it, or `None` if it\nis empty.",19,{"inputs":[{"name":"vec"}],"output":{"name":"option"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",19,null],[11,"drain","","Create a draining iterator that removes the specified range in the vector\nand yields the removed items from start to end. The element range is\nremoved even if the iterator is not consumed until the end.",19,{"inputs":[{"name":"vec"},{"name":"r"}],"output":{"name":"drain"}}],[11,"clear","","Clears the vector, removing all values.",19,null],[11,"len","","Returns the number of elements in the vector.",19,{"inputs":[{"name":"vec"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the vector contains no elements.",19,{"inputs":[{"name":"vec"}],"output":{"name":"bool"}}],[11,"split_off","","Splits the collection into two at the given index.",19,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"resize","","Resizes the `Vec` in-place so that `len()` is equal to `new_len`.",19,null],[11,"push_all","","",19,null],[11,"extend_from_slice","","Appends all elements in a slice to the `Vec`.",19,null],[11,"dedup","","Removes consecutive repeated elements in the vector.",19,null],[11,"clone","collections::binary_heap","",20,{"inputs":[{"name":"binaryheap"}],"output":{"name":"binaryheap"}}],[11,"clone_from","","",20,null],[11,"default","","",20,{"inputs":[{"name":"binaryheap"}],"output":{"name":"binaryheap"}}],[11,"fmt","","",20,{"inputs":[{"name":"binaryheap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates an empty `BinaryHeap` as a max-heap.",20,{"inputs":[{"name":"binaryheap"}],"output":{"name":"binaryheap"}}],[11,"with_capacity","","Creates an empty `BinaryHeap` with a specific capacity.\nThis preallocates enough memory for `capacity` elements,\nso that the `BinaryHeap` does not have to be reallocated\nuntil it contains at least that many values.",20,{"inputs":[{"name":"binaryheap"},{"name":"usize"}],"output":{"name":"binaryheap"}}],[11,"from_vec","","Creates a `BinaryHeap` from a vector. This is sometimes called\n`heapifying` the vector.",20,{"inputs":[{"name":"binaryheap"},{"name":"vec"}],"output":{"name":"binaryheap"}}],[11,"iter","","Returns an iterator visiting all values in the underlying vector, in\narbitrary order.",20,{"inputs":[{"name":"binaryheap"}],"output":{"name":"iter"}}],[11,"peek","","Returns the greatest item in the binary heap, or `None` if it is empty.",20,{"inputs":[{"name":"binaryheap"}],"output":{"name":"option"}}],[11,"capacity","","Returns the number of elements the binary heap can hold without reallocating.",20,{"inputs":[{"name":"binaryheap"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `BinaryHeap`. Does nothing if the capacity is already sufficient.",20,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the\n`BinaryHeap`. The collection may reserve more space to avoid frequent reallocations.",20,null],[11,"shrink_to_fit","","Discards as much additional capacity as possible.",20,null],[11,"pop","","Removes the greatest item from the binary heap and returns it, or `None` if it\nis empty.",20,{"inputs":[{"name":"binaryheap"}],"output":{"name":"option"}}],[11,"push","","Pushes an item onto the binary heap.",20,null],[11,"push_pop","","Pushes an item onto the binary heap, then pops the greatest item off the queue in\nan optimized fashion.",20,{"inputs":[{"name":"binaryheap"},{"name":"t"}],"output":{"name":"t"}}],[11,"replace","","Pops the greatest item off the binary heap, then pushes an item onto the queue in\nan optimized fashion. The push is done regardless of whether the binary heap\nwas empty.",20,{"inputs":[{"name":"binaryheap"},{"name":"t"}],"output":{"name":"option"}}],[11,"into_vec","","Consumes the `BinaryHeap` and returns the underlying vector\nin arbitrary order.",20,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"into_sorted_vec","","Consumes the `BinaryHeap` and returns a vector in sorted\n(ascending) order.",20,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"len","","Returns the length of the binary heap.",20,{"inputs":[{"name":"binaryheap"}],"output":{"name":"usize"}}],[11,"is_empty","","Checks if the binary heap is empty.",20,{"inputs":[{"name":"binaryheap"}],"output":{"name":"bool"}}],[11,"drain","","Clears the binary heap, returning an iterator over the removed elements.",20,{"inputs":[{"name":"binaryheap"}],"output":{"name":"drain"}}],[11,"clear","","Drops all items from the binary heap.",20,null],[11,"drop","","",21,null],[11,"clone","","",22,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",22,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",22,null],[11,"next_back","","",22,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",23,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",23,null],[11,"next_back","","",23,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"next","","",24,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",24,null],[11,"next_back","","",24,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"from","","",20,{"inputs":[{"name":"binaryheap"},{"name":"vec"}],"output":{"name":"binaryheap"}}],[11,"from","collections::vec","",19,{"inputs":[{"name":"vec"},{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"from_iter","collections::binary_heap","",20,{"inputs":[{"name":"binaryheap"},{"name":"i"}],"output":{"name":"binaryheap"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe binary heap in arbitrary order. The binary heap cannot be used\nafter calling this.",20,{"inputs":[{"name":"binaryheap"}],"output":{"name":"intoiter"}}],[11,"extend","","",20,null],[11,"extend","","",20,null],[11,"next","collections::btree::node","",25,{"inputs":[{"name":"rawitems"}],"output":{"name":"option"}}],[11,"next_back","","",25,{"inputs":[{"name":"rawitems"}],"output":{"name":"option"}}],[11,"drop","","",25,null],[11,"drop","","",26,null],[11,"as_slices","","",26,null],[11,"as_slices_mut","","",26,null],[11,"as_slices_internal","","",26,{"inputs":[{"name":"node"}],"output":{"name":"nodeslice"}}],[11,"as_slices_internal_mut","","",26,{"inputs":[{"name":"node"}],"output":{"name":"mutnodeslice"}}],[11,"keys","","",26,null],[11,"keys_mut","","",26,null],[11,"vals","","",26,null],[11,"vals_mut","","",26,null],[11,"edges","","",26,null],[11,"edges_mut","","",26,null],[11,"clone","","",26,{"inputs":[{"name":"node"}],"output":{"name":"node"}}],[11,"clone","","",27,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"search","","Searches for the given key in the node. If it finds an exact match,\n`Found` will be yielded with the matching index. If it doesn't find an exact match,\n`GoDown` will be yielded with the index of the subtree the key must lie in.",26,{"inputs":[{"name":"node"},{"name":"noderef"},{"name":"q"}],"output":{"name":"searchresult"}}],[11,"make_leaf_root","","Make a leaf root from scratch",26,{"inputs":[{"name":"node"},{"name":"usize"}],"output":{"name":"node"}}],[11,"make_internal_root","","Make an internal root and swap it with an old root",26,null],[11,"len","","How many key-value pairs the node contains",26,{"inputs":[{"name":"node"}],"output":{"name":"usize"}}],[11,"is_empty","","Does the node not contain any key-value pairs",26,{"inputs":[{"name":"node"}],"output":{"name":"bool"}}],[11,"capacity","","How many key-value pairs the node can fit",26,{"inputs":[{"name":"node"}],"output":{"name":"usize"}}],[11,"is_leaf","","If the node has any children",26,{"inputs":[{"name":"node"}],"output":{"name":"bool"}}],[11,"is_underfull","","if the node has too few elements",26,{"inputs":[{"name":"node"}],"output":{"name":"bool"}}],[11,"is_full","","if the node cannot fit any more elements",26,{"inputs":[{"name":"node"}],"output":{"name":"bool"}}],[11,"node","","Returns a reference to the node that contains the pointed-to edge or key/value pair. This\nis very different from `edge` and `edge_mut` because those return children of the node\nreturned by `node`.",27,{"inputs":[{"name":"handle"}],"output":{"name":"node"}}],[11,"as_raw","","Converts a handle into one that stores the same information using a raw pointer. This can\nbe useful in conjunction with `from_raw` when the type system is insufficient for\ndetermining the lifetimes of the nodes.",27,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"from_raw","","Converts from a handle stored with a raw pointer, which isn't directly usable, to a handle\nstored with a reference. This is an unsafe inverse of `as_raw`, and together they allow\nunsafely extending the lifetime of the reference to the `Node`.",27,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"from_raw_mut","","Converts from a handle stored with a raw pointer, which isn't directly usable, to a handle\nstored with a mutable reference. This is an unsafe inverse of `as_raw`, and together they\nallow unsafely extending the lifetime of the reference to the `Node`.",27,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"into_edge","","Turns the handle into a reference to the edge it points at. This is necessary because the\nreturned pointer has a larger lifetime than what would be returned by `edge` or `edge_mut`,\nmaking it more suitable for moving down a chain of nodes.",27,{"inputs":[{"name":"handle"}],"output":{"name":"node"}}],[11,"into_edge_mut","","Turns the handle into a mutable reference to the edge it points at. This is necessary\nbecause the returned pointer has a larger lifetime than what would be returned by\n`edge_mut`, making it more suitable for moving down a chain of nodes.",27,{"inputs":[{"name":"handle"}],"output":{"name":"node"}}],[11,"force","","Figure out whether this handle is pointing to something in a leaf node or to something in\nan internal node, clarifying the type according to the result.",27,{"inputs":[{"name":"handle"}],"output":{"name":"forceresult"}}],[11,"insert_as_leaf","","Tries to insert this key-value pair at the given index in this leaf node\nIf the node is full, we have to split it.",27,null],[11,"edge_mut","","Returns a mutable reference to the edge pointed-to by this handle. This should not be\nconfused with `node`, which references the parent node of what is returned here.",27,{"inputs":[{"name":"handle"}],"output":{"name":"node"}}],[11,"insert_as_internal","","Tries to insert this key-value pair at the given index in this internal node\nIf the node is full, we have to split it.",27,{"inputs":[{"name":"handle"},{"name":"k"},{"name":"v"},{"name":"node"}],"output":{"name":"insertionresult"}}],[11,"handle_underflow","","Handle an underflow in this node's child. We favor handling \"to the left\" because we know\nwe're empty, but our neighbour can be full. Handling to the left means when we choose to\nsteal, we pop off the end of our neighbour (always fast) and \"unshift\" ourselves\n(always slow, but at least faster since we know we're half-empty).\nHandling \"to the right\" reverses these roles. Of course, we merge whenever possible\nbecause we want dense nodes, and merging is about equal work regardless of direction.",27,null],[11,"into_kv","","Turns the handle into references to the key and value it points at. This is necessary\nbecause the returned pointers have larger lifetimes than what would be returned by `key`\nor `val`.",27,null],[11,"into_kv_mut","","Turns the handle into mutable references to the key and value it points at. This is\nnecessary because the returned pointers have larger lifetimes than what would be returned\nby `key_mut` or `val_mut`.",27,null],[11,"into_left_edge","","Convert this handle into one pointing at the edge immediately to the left of the key/value\npair pointed-to by this handle. This is useful because it returns a reference with larger\nlifetime than `left_edge`.",27,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"key_mut","","Returns a mutable reference to the key pointed-to by this handle. This doesn't return a\nreference with a lifetime as large as `into_kv_mut`, but it also does not consume the\nhandle.",27,{"inputs":[{"name":"handle"}],"output":{"name":"k"}}],[11,"val_mut","","Returns a mutable reference to the value pointed-to by this handle. This doesn't return a\nreference with a lifetime as large as `into_kv_mut`, but it also does not consume the\nhandle.",27,{"inputs":[{"name":"handle"}],"output":{"name":"v"}}],[11,"left_edge","","Gets the handle pointing to the edge immediately to the left of the key/value pair pointed\nto by this handle.",27,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"right_edge","","Gets the handle pointing to the edge immediately to the right of the key/value pair pointed\nto by this handle.",27,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"remove_as_leaf","","Removes the key/value pair at the handle's location.",27,null],[11,"kv_handle","","Returns the mutable handle pointing to the key/value pair at a given index.",26,{"inputs":[{"name":"node"},{"name":"usize"}],"output":{"name":"handle"}}],[11,"iter","","",26,{"inputs":[{"name":"node"}],"output":{"name":"abstraversal"}}],[11,"iter_mut","","",26,{"inputs":[{"name":"node"}],"output":{"name":"abstraversal"}}],[11,"into_iter","","",26,{"inputs":[{"name":"node"}],"output":{"name":"abstraversal"}}],[11,"hoist_lone_child","","When a node has no keys or values and only a single edge, extract that edge.",26,null],[11,"clone","","",28,{"inputs":[{"name":"elemsandedges"}],"output":{"name":"elemsandedges"}}],[11,"next_kv","","",28,{"inputs":[{"name":"elemsandedges"}],"output":{"name":"option"}}],[11,"next_kv_back","","",28,{"inputs":[{"name":"elemsandedges"}],"output":{"name":"option"}}],[11,"next_edge","","",28,{"inputs":[{"name":"elemsandedges"}],"output":{"name":"option"}}],[11,"next_edge_back","","",28,{"inputs":[{"name":"elemsandedges"}],"output":{"name":"option"}}],[11,"next_kv","","",29,{"inputs":[{"name":"movetraversalimpl"}],"output":{"name":"option"}}],[11,"next_kv_back","","",29,{"inputs":[{"name":"movetraversalimpl"}],"output":{"name":"option"}}],[11,"next_edge","","",29,{"inputs":[{"name":"movetraversalimpl"}],"output":{"name":"option"}}],[11,"next_edge_back","","",29,{"inputs":[{"name":"movetraversalimpl"}],"output":{"name":"option"}}],[11,"drop","","",29,null],[11,"clone","","",30,{"inputs":[{"name":"abstraversal"}],"output":{"name":"abstraversal"}}],[11,"next","","",30,{"inputs":[{"name":"abstraversal"}],"output":{"name":"option"}}],[11,"next_back","","",30,{"inputs":[{"name":"abstraversal"}],"output":{"name":"option"}}],[11,"next_edge_item","","Advances the iterator and returns the item if it's an edge. Returns None\nand does nothing if the first item is not an edge.",30,{"inputs":[{"name":"abstraversal"}],"output":{"name":"option"}}],[11,"next_edge_item_back","","Advances the iterator and returns the item if it's an edge. Returns None\nand does nothing if the last item is not an edge.",30,{"inputs":[{"name":"abstraversal"}],"output":{"name":"option"}}],[11,"next_kv_item","","Advances the iterator and returns the item if it's a key-value pair. Returns None\nand does nothing if the first item is not a key-value pair.",30,{"inputs":[{"name":"abstraversal"}],"output":{"name":"option"}}],[11,"next_kv_item_back","","Advances the iterator and returns the item if it's a key-value pair. Returns None\nand does nothing if the last item is not a key-value pair.",30,{"inputs":[{"name":"abstraversal"}],"output":{"name":"option"}}],[11,"slice_from","","Returns a sub-slice with elements starting with `min_key`.",31,{"inputs":[{"name":"nodeslice"},{"name":"q"}],"output":{"name":"nodeslice"}}],[11,"slice_to","","Returns a sub-slice with elements up to and including `max_key`.",31,{"inputs":[{"name":"nodeslice"},{"name":"q"}],"output":{"name":"nodeslice"}}],[11,"iter","","Returns an iterator over key/value pairs and edges in a slice.",31,{"inputs":[{"name":"nodeslice"}],"output":{"name":"abstraversal"}}],[11,"slice_from","","Returns a sub-slice with elements starting with `min_key`.",32,{"inputs":[{"name":"mutnodeslice"},{"name":"q"}],"output":{"name":"mutnodeslice"}}],[11,"slice_to","","Returns a sub-slice with elements up to and including `max_key`.",32,{"inputs":[{"name":"mutnodeslice"},{"name":"q"}],"output":{"name":"mutnodeslice"}}],[11,"iter_mut","","Returns an iterator over key/value pairs and edges in a slice.",32,{"inputs":[{"name":"mutnodeslice"}],"output":{"name":"abstraversal"}}],[11,"clone","collections::btree::map","",33,{"inputs":[{"name":"btreemap"}],"output":{"name":"btreemap"}}],[11,"clone","","",34,{"inputs":[{"name":"absiter"}],"output":{"name":"absiter"}}],[11,"new","","Makes a new empty BTreeMap with a reasonable choice for B.",33,{"inputs":[{"name":"btreemap"}],"output":{"name":"btreemap"}}],[11,"with_b","","Makes a new empty BTreeMap with the given B.",33,{"inputs":[{"name":"btreemap"},{"name":"usize"}],"output":{"name":"btreemap"}}],[11,"clear","","Clears the map, removing all values.",33,null],[11,"get","","Returns a reference to the value corresponding to the key.",33,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",33,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",33,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair into the map.",33,{"inputs":[{"name":"btreemap"},{"name":"k"},{"name":"v"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",33,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"option"}}],[11,"into_iter","","Gets an owning iterator over the entries of the map.",33,{"inputs":[{"name":"btreemap"}],"output":{"name":"intoiter"}}],[11,"deref","collections::btree::map::stack","",35,{"inputs":[{"name":"idref"}],"output":{"name":"t"}}],[11,"deref_mut","","",35,{"inputs":[{"name":"idref"}],"output":{"name":"t"}}],[11,"new","","Creates a new PartialSearchStack from a BTreeMap by initializing the stack with the\nroot of the tree.",36,{"inputs":[{"name":"partialsearchstack"},{"name":"btreemap"}],"output":{"name":"partialsearchstack"}}],[11,"with","","Breaks up the stack into a `Pusher` and the next `Node`, allowing the given closure\nto interact with, search, and finally push the `Node` onto the stack. The passed in\nclosure must be polymorphic on the `'id` lifetime parameter, as this statically\nensures that only `Handle`s from the correct `Node` can be pushed.",36,{"inputs":[{"name":"partialsearchstack"},{"name":"f"}],"output":{"name":"t"}}],[11,"push","","Pushes the requested child of the stack's current top on top of the stack. If the child\nexists, then a new PartialSearchStack is yielded. Otherwise, a VacantSearchStack is\nyielded.",37,{"inputs":[{"name":"pusher"},{"name":"handle"}],"output":{"name":"partialsearchstack"}}],[11,"seal","","Converts the PartialSearchStack into a SearchStack.",37,{"inputs":[{"name":"pusher"},{"name":"handle"}],"output":{"name":"searchstack"}}],[11,"peek","","Gets a reference to the value the stack points to.",38,{"inputs":[{"name":"searchstack"}],"output":{"name":"v"}}],[11,"peek_mut","","Gets a mutable reference to the value the stack points to.",38,{"inputs":[{"name":"searchstack"}],"output":{"name":"v"}}],[11,"into_top","","Converts the stack into a mutable reference to the value it points to, with a lifetime\ntied to the original tree.",38,{"inputs":[{"name":"searchstack"}],"output":{"name":"v"}}],[11,"remove","","Removes the key and value in the top element of the stack, then handles underflows as\ndescribed in BTree's pop function.",38,null],[11,"insert","","Inserts the key and value into the top element in the stack, and if that node has to\nsplit recursively inserts the split contents into the next element stack until\nsplits stop.",38,{"inputs":[{"name":"searchstack"},{"name":"k"},{"name":"v"}],"output":{"name":"v"}}],[11,"from_iter","collections::btree::map","",33,{"inputs":[{"name":"btreemap"},{"name":"t"}],"output":{"name":"btreemap"}}],[11,"extend","","",33,null],[11,"extend","","",33,null],[11,"hash","","",33,null],[11,"default","","",33,{"inputs":[{"name":"btreemap"}],"output":{"name":"btreemap"}}],[11,"eq","","",33,{"inputs":[{"name":"btreemap"},{"name":"btreemap"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",33,{"inputs":[{"name":"btreemap"},{"name":"btreemap"}],"output":{"name":"option"}}],[11,"cmp","","",33,{"inputs":[{"name":"btreemap"},{"name":"btreemap"}],"output":{"name":"ordering"}}],[11,"fmt","","",33,{"inputs":[{"name":"btreemap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",33,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"v"}}],[11,"traverse","collections::btree::node","",30,{"inputs":[{"name":"abstraversal"},{"name":"node"}],"output":{"name":"abstraversal"}}],[11,"traverse","","",30,{"inputs":[{"name":"abstraversal"},{"name":"node"}],"output":{"name":"abstraversal"}}],[11,"traverse","","",30,{"inputs":[{"name":"abstraversal"},{"name":"node"}],"output":{"name":"abstraversal"}}],[11,"next","collections::btree::map","",34,{"inputs":[{"name":"absiter"}],"output":{"name":"option"}}],[11,"size_hint","","",34,null],[11,"next_back","","",34,{"inputs":[{"name":"absiter"}],"output":{"name":"option"}}],[11,"clone","","",39,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",39,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",39,null],[11,"next_back","","",39,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",40,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",40,null],[11,"next_back","","",40,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",41,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",41,null],[11,"next_back","","",41,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"clone","","",42,{"inputs":[{"name":"keys"}],"output":{"name":"keys"}}],[11,"next","","",42,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"size_hint","","",42,null],[11,"next_back","","",42,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"clone","","",43,{"inputs":[{"name":"values"}],"output":{"name":"values"}}],[11,"next","","",43,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"size_hint","","",43,null],[11,"next_back","","",43,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"clone","","",44,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"next","","",44,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next_back","","",44,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next","","",45,{"inputs":[{"name":"rangemut"}],"output":{"name":"option"}}],[11,"next_back","","",45,{"inputs":[{"name":"rangemut"}],"output":{"name":"option"}}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns\na mutable reference to the value in the entry.",46,{"inputs":[{"name":"entry"},{"name":"v"}],"output":{"name":"v"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty,\nand returns a mutable reference to the value in the entry.",46,{"inputs":[{"name":"entry"},{"name":"f"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the VacantEntry's key,\nand returns a mutable reference to it.",47,{"inputs":[{"name":"vacantentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"get","","Gets a reference to the value in the entry.",48,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",48,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"into_mut","","Converts the entry into a mutable reference to its value.",48,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the OccupiedEntry's key,\nand returns the entry's old value.",48,{"inputs":[{"name":"occupiedentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"remove","","Takes the value of the entry out of the map, and returns it.",48,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"iter","","Gets an iterator over the entries of the map.",33,{"inputs":[{"name":"btreemap"}],"output":{"name":"iter"}}],[11,"iter_mut","","Gets a mutable iterator over the entries of the map.",33,{"inputs":[{"name":"btreemap"}],"output":{"name":"itermut"}}],[11,"keys","","Gets an iterator over the keys of the map.",33,{"inputs":[{"name":"btreemap"}],"output":{"name":"keys"}}],[11,"values","","Gets an iterator over the values of the map.",33,{"inputs":[{"name":"btreemap"}],"output":{"name":"values"}}],[11,"len","","Returns the number of elements in the map.",33,{"inputs":[{"name":"btreemap"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",33,{"inputs":[{"name":"btreemap"}],"output":{"name":"bool"}}],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as \"negative\ninfinity\", and if max is `Unbounded`, then it will be treated as \"positive infinity\".\nThus range(Unbounded, Unbounded) will yield the whole collection.",33,{"inputs":[{"name":"btreemap"},{"name":"bound"},{"name":"bound"}],"output":{"name":"range"}}],[11,"range_mut","","Constructs a mutable double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as \"negative\ninfinity\", and if max is `Unbounded`, then it will be treated as \"positive infinity\".\nThus range(Unbounded, Unbounded) will yield the whole collection.",33,{"inputs":[{"name":"btreemap"},{"name":"bound"},{"name":"bound"}],"output":{"name":"rangemut"}}],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",33,{"inputs":[{"name":"btreemap"},{"name":"k"}],"output":{"name":"entry"}}],[11,"partial_cmp","collections::btree::set","",49,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"option"}}],[11,"lt","","",49,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"le","","",49,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"gt","","",49,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"ge","","",49,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"cmp","","",49,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"ordering"}}],[11,"eq","","",49,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"ne","","",49,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"hash","","",49,null],[11,"clone","","",49,{"inputs":[{"name":"btreeset"}],"output":{"name":"btreeset"}}],[11,"new","","Makes a new BTreeSet with a reasonable choice of B.",49,{"inputs":[{"name":"btreeset"}],"output":{"name":"btreeset"}}],[11,"with_b","","Makes a new BTreeSet with the given B.",49,{"inputs":[{"name":"btreeset"},{"name":"usize"}],"output":{"name":"btreeset"}}],[11,"iter","","Gets an iterator over the BTreeSet's contents.",49,{"inputs":[{"name":"btreeset"}],"output":{"name":"iter"}}],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the set, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as \"negative\ninfinity\", and if max is `Unbounded`, then it will be treated as \"positive infinity\".\nThus range(Unbounded, Unbounded) will yield the whole collection.",49,{"inputs":[{"name":"btreeset"},{"name":"bound"},{"name":"bound"}],"output":{"name":"range"}}],[11,"difference","","Visits the values representing the difference, in ascending order.",49,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"difference"}}],[11,"symmetric_difference","","Visits the values representing the symmetric difference, in ascending order.",49,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"symmetricdifference"}}],[11,"intersection","","Visits the values representing the intersection, in ascending order.",49,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"intersection"}}],[11,"union","","Visits the values representing the union, in ascending order.",49,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"union"}}],[11,"len","","Returns the number of elements in the set.",49,{"inputs":[{"name":"btreeset"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the set contains no elements.",49,{"inputs":[{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"clear","","Clears the set, removing all values.",49,null],[11,"contains","","Returns `true` if the set contains a value.",49,{"inputs":[{"name":"btreeset"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get","","Returns a reference to the value in the set, if any, that is equal to the given value.",49,{"inputs":[{"name":"btreeset"},{"name":"q"}],"output":{"name":"option"}}],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",49,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns `true` if the set is a subset of another.",49,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns `true` if the set is a superset of another.",49,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"insert","","Adds a value to the set.",49,{"inputs":[{"name":"btreeset"},{"name":"t"}],"output":{"name":"bool"}}],[11,"replace","","Adds a value to the set, replacing the existing value, if any, that is equal to the given\none. Returns the replaced value.",49,{"inputs":[{"name":"btreeset"},{"name":"t"}],"output":{"name":"option"}}],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",49,{"inputs":[{"name":"btreeset"},{"name":"q"}],"output":{"name":"bool"}}],[11,"take","","Removes and returns the value in the set, if any, that is equal to the given one.",49,{"inputs":[{"name":"btreeset"},{"name":"q"}],"output":{"name":"option"}}],[11,"from_iter","","",49,{"inputs":[{"name":"btreeset"},{"name":"i"}],"output":{"name":"btreeset"}}],[11,"into_iter","","Gets an iterator for moving out the BtreeSet's contents.",49,{"inputs":[{"name":"btreeset"}],"output":{"name":"intoiter"}}],[11,"extend","","",49,null],[11,"extend","","",49,null],[11,"default","","",49,{"inputs":[{"name":"btreeset"}],"output":{"name":"btreeset"}}],[11,"fmt","","",49,{"inputs":[{"name":"btreeset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",50,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",50,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",50,null],[11,"next_back","","",50,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",51,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",51,null],[11,"next_back","","",51,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"clone","","",52,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"next","","",52,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next_back","","",52,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"clone","","",53,{"inputs":[{"name":"difference"}],"output":{"name":"difference"}}],[11,"next","","",53,{"inputs":[{"name":"difference"}],"output":{"name":"option"}}],[11,"clone","","",54,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"symmetricdifference"}}],[11,"next","","",54,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"option"}}],[11,"clone","","",55,{"inputs":[{"name":"intersection"}],"output":{"name":"intersection"}}],[11,"next","","",55,{"inputs":[{"name":"intersection"}],"output":{"name":"option"}}],[11,"clone","","",56,{"inputs":[{"name":"union"}],"output":{"name":"union"}}],[11,"next","","",56,{"inputs":[{"name":"union"}],"output":{"name":"option"}}],[11,"borrow","collections::borrow","",57,{"inputs":[{"name":"cow"}],"output":{"name":"b"}}],[11,"clone","","",57,{"inputs":[{"name":"cow"}],"output":{"name":"cow"}}],[11,"to_mut","","Acquires a mutable reference to the owned form of the data.",57,null],[11,"into_owned","","Extracts the owned data.",57,null],[11,"deref","","",57,{"inputs":[{"name":"cow"}],"output":{"name":"b"}}],[11,"cmp","","",57,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"ordering"}}],[11,"eq","","",57,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",57,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"option"}}],[11,"fmt","","",57,{"inputs":[{"name":"cow"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",57,{"inputs":[{"name":"cow"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",57,null],[11,"into_cow","","",57,{"inputs":[{"name":"cow"}],"output":{"name":"cow"}}],[11,"as_ref","","",57,{"inputs":[{"name":"cow"}],"output":{"name":"t"}}],[11,"hash","collections::enum_set","",58,null],[11,"cmp","","",58,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",58,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"option"}}],[11,"lt","","",58,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"le","","",58,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"gt","","",58,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"ge","","",58,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"eq","","",58,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"ne","","",58,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"clone","","",58,{"inputs":[{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"fmt","","",58,{"inputs":[{"name":"enumset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Returns an empty `EnumSet`.",58,{"inputs":[{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"len","","Returns the number of elements in the given `EnumSet`.",58,{"inputs":[{"name":"enumset"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the `EnumSet` is empty.",58,{"inputs":[{"name":"enumset"}],"output":{"name":"bool"}}],[11,"clear","","",58,null],[11,"is_disjoint","","Returns `false` if the `EnumSet` contains any enum of the given `EnumSet`.",58,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns `true` if a given `EnumSet` is included in this `EnumSet`.",58,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns `true` if this `EnumSet` is included in the given `EnumSet`.",58,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"union","","Returns the union of both `EnumSets`.",58,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"intersection","","Returns the intersection of both `EnumSets`.",58,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"insert","","Adds an enum to the `EnumSet`, and returns `true` if it wasn't there before",58,{"inputs":[{"name":"enumset"},{"name":"e"}],"output":{"name":"bool"}}],[11,"remove","","Removes an enum from the EnumSet",58,{"inputs":[{"name":"enumset"},{"name":"e"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` if an `EnumSet` contains a given enum.",58,{"inputs":[{"name":"enumset"},{"name":"e"}],"output":{"name":"bool"}}],[11,"iter","","Returns an iterator over an `EnumSet`.",58,{"inputs":[{"name":"enumset"}],"output":{"name":"iter"}}],[11,"sub","","",58,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"bitor","","",58,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"bitand","","",58,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"bitxor","","",58,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"clone","","",59,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",59,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",59,null],[11,"from_iter","","",58,{"inputs":[{"name":"enumset"},{"name":"i"}],"output":{"name":"enumset"}}],[11,"extend","","",58,null],[11,"extend","","",58,null],[11,"clone","core::fmt::rt::v1","",60,{"inputs":[{"name":"argument"}],"output":{"name":"argument"}}],[11,"clone","","",61,{"inputs":[{"name":"formatspec"}],"output":{"name":"formatspec"}}],[11,"eq","","",62,{"inputs":[{"name":"alignment"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"ne","","",62,{"inputs":[{"name":"alignment"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"clone","","",62,{"inputs":[{"name":"alignment"}],"output":{"name":"alignment"}}],[11,"clone","","",63,{"inputs":[{"name":"count"}],"output":{"name":"count"}}],[11,"clone","","",64,{"inputs":[{"name":"position"}],"output":{"name":"position"}}],[11,"clone","collections::linked_list","",65,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"clone","","",66,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"from","","",67,{"inputs":[{"name":"rawlink"},{"name":"option"}],"output":{"name":"rawlink"}}],[11,"clone","","",67,{"inputs":[{"name":"rawlink"}],"output":{"name":"rawlink"}}],[11,"default","","",68,{"inputs":[{"name":"linkedlist"}],"output":{"name":"linkedlist"}}],[11,"new","","Creates an empty `LinkedList`.",68,{"inputs":[{"name":"linkedlist"}],"output":{"name":"linkedlist"}}],[11,"append","","Moves all elements from `other` to the end of the list.",68,null],[11,"iter","","Provides a forward iterator.",68,{"inputs":[{"name":"linkedlist"}],"output":{"name":"iter"}}],[11,"iter_mut","","Provides a forward iterator with mutable references.",68,{"inputs":[{"name":"linkedlist"}],"output":{"name":"itermut"}}],[11,"is_empty","","Returns `true` if the `LinkedList` is empty.",68,{"inputs":[{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"len","","Returns the length of the `LinkedList`.",68,{"inputs":[{"name":"linkedlist"}],"output":{"name":"usize"}}],[11,"clear","","Removes all elements from the `LinkedList`.",68,null],[11,"front","","Provides a reference to the front element, or `None` if the list is\nempty.",68,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the list\nis empty.",68,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the list is\nempty.",68,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the list\nis empty.",68,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"push_front","","Adds an element first in the list.",68,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the list is\nempty.",68,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"push_back","","Appends an element to the back of a list",68,null],[11,"pop_back","","Removes the last element from a list and returns it, or `None` if\nit is empty.",68,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"split_off","","Splits the list into two at the given index. Returns everything after the given index,\nincluding the index.",68,{"inputs":[{"name":"linkedlist"},{"name":"usize"}],"output":{"name":"linkedlist"}}],[11,"drop","","",68,null],[11,"next","","",65,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",65,null],[11,"next_back","","",65,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",69,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",69,null],[11,"next_back","","",69,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"insert_next","","Inserts `elt` just after the element most recently returned by `.next()`.\nThe inserted element does not appear in the iteration.",69,null],[11,"peek_next","","Provides a reference to the next element, without changing the iterator.",69,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",66,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",66,null],[11,"next_back","","",66,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","",68,{"inputs":[{"name":"linkedlist"},{"name":"t"}],"output":{"name":"linkedlist"}}],[11,"into_iter","","Consumes the list into an iterator yielding elements by value.",68,{"inputs":[{"name":"linkedlist"}],"output":{"name":"intoiter"}}],[11,"extend","","",68,null],[11,"extend","","",68,null],[11,"eq","","",68,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"ne","","",68,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",68,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"cmp","","",68,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"ordering"}}],[11,"clone","","",68,{"inputs":[{"name":"linkedlist"}],"output":{"name":"linkedlist"}}],[11,"fmt","","",68,{"inputs":[{"name":"linkedlist"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",68,null],[11,"start","core::ops","",70,{"inputs":[{"name":"rangefrom"}],"output":{"name":"option"}}],[11,"end","","",71,{"inputs":[{"name":"rangeto"}],"output":{"name":"option"}}],[11,"start","","",72,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"end","","",72,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"borrow","collections::vec","",19,null],[11,"borrow_mut","","",19,null],[11,"clone","collections::str","",73,{"inputs":[{"name":"utf16units"}],"output":{"name":"utf16units"}}],[11,"next","","",73,{"inputs":[{"name":"utf16units"}],"output":{"name":"option"}}],[11,"size_hint","","",73,null],[11,"borrow","collections::string","",74,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"fmt","core::str::pattern","",75,{"inputs":[{"name":"searchstep"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",75,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"ne","","",75,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"clone","","",75,{"inputs":[{"name":"searchstep"}],"output":{"name":"searchstep"}}],[11,"clone","","",76,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"chareqsearcher"}}],[11,"into_searcher","","",77,{"inputs":[{"name":"chareqpattern"},{"name":"str"}],"output":{"name":"chareqsearcher"}}],[11,"haystack","","",76,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"str"}}],[11,"next","","",76,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"next_back","","",76,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"clone","","",78,{"inputs":[{"name":"charsearcher"}],"output":{"name":"charsearcher"}}],[11,"haystack","","",78,{"inputs":[{"name":"charsearcher"}],"output":{"name":"str"}}],[11,"next","","",78,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",78,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",78,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",78,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",78,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",78,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"clone","","",79,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"charslicesearcher"}}],[11,"haystack","","",79,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"str"}}],[11,"next","","",79,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",79,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",79,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",79,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",79,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",79,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"clone","","",80,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"charpredicatesearcher"}}],[11,"haystack","","",80,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"str"}}],[11,"next","","",80,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",80,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",80,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",80,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",80,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",80,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"fmt","","",81,{"inputs":[{"name":"strsearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",81,{"inputs":[{"name":"strsearcher"}],"output":{"name":"strsearcher"}}],[11,"fmt","","",82,{"inputs":[{"name":"strsearcherimpl"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",82,{"inputs":[{"name":"strsearcherimpl"}],"output":{"name":"strsearcherimpl"}}],[11,"fmt","","",83,{"inputs":[{"name":"emptyneedle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",83,{"inputs":[{"name":"emptyneedle"}],"output":{"name":"emptyneedle"}}],[11,"haystack","","",81,{"inputs":[{"name":"strsearcher"}],"output":{"name":"str"}}],[11,"next","","",81,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",81,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",81,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",81,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"fmt","","",84,{"inputs":[{"name":"twowaysearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",84,{"inputs":[{"name":"twowaysearcher"}],"output":{"name":"twowaysearcher"}}],[11,"use_early_reject","","",85,{"inputs":[{"name":"matchonly"}],"output":{"name":"bool"}}],[11,"rejecting","","",85,null],[11,"matching","","",85,null],[11,"use_early_reject","","",86,{"inputs":[{"name":"rejectandmatch"}],"output":{"name":"bool"}}],[11,"rejecting","","",86,null],[11,"matching","","",86,null],[11,"cmp","collections::string","",74,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",74,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"option"}}],[11,"lt","","",74,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"le","","",74,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"gt","","",74,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ge","","",74,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"fmt","","",87,{"inputs":[{"name":"fromutf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",88,{"inputs":[{"name":"fromutf16error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new string buffer initialized with the empty string.",74,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"with_capacity","","Creates a new string buffer with the given capacity.\nThe string will be able to hold exactly `capacity` bytes without\nreallocating. If `capacity` is 0, the string will not allocate.",74,{"inputs":[{"name":"string"},{"name":"usize"}],"output":{"name":"string"}}],[11,"from_utf8","","Converts a vector of bytes to a `String`.",74,{"inputs":[{"name":"string"},{"name":"vec"}],"output":{"name":"result"}}],[11,"from_utf8_lossy","","Converts a slice of bytes to a `String`, including invalid characters.",74,null],[11,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`, returning `None`\nif `v` contains any invalid data.",74,null],[11,"from_utf16_lossy","","Decode a UTF-16 encoded vector `v` into a string, replacing\ninvalid data with the replacement character (U+FFFD).",74,null],[11,"from_raw_parts","","Creates a new `String` from a length, capacity, and pointer.",74,null],[11,"from_utf8_unchecked","","Converts a vector of bytes to a `String` without checking that the\nstring contains valid UTF-8.",74,{"inputs":[{"name":"string"},{"name":"vec"}],"output":{"name":"string"}}],[11,"into_bytes","","Returns the underlying byte buffer, encoded as UTF-8.",74,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"as_str","","Extracts a string slice containing the entire string.",74,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"push_str","","Pushes the given string onto this string buffer.",74,null],[11,"capacity","","Returns the number of bytes that this string buffer can hold without\nreallocating.",74,{"inputs":[{"name":"string"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more bytes to be inserted\nin the given `String`. The collection may reserve more space to avoid\nfrequent reallocations.",74,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more bytes to be\ninserted in the given `String`. Does nothing if the capacity is already\nsufficient.",74,null],[11,"shrink_to_fit","","Shrinks the capacity of this string buffer to match its length.",74,null],[11,"push","","Adds the given character to the end of the string.",74,null],[11,"as_bytes","","Works with the underlying buffer as a byte slice.",74,null],[11,"truncate","","Shortens a string to the specified length.",74,null],[11,"pop","","Removes the last character from the string buffer and returns it.\nReturns `None` if this string buffer is empty.",74,{"inputs":[{"name":"string"}],"output":{"name":"option"}}],[11,"remove","","Removes the character from the string buffer at byte position `idx` and\nreturns it.",74,{"inputs":[{"name":"string"},{"name":"usize"}],"output":{"name":"char"}}],[11,"insert","","Inserts a character into the string buffer at byte position `idx`.",74,null],[11,"as_mut_vec","","Views the string buffer as a mutable sequence of bytes.",74,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"len","","Returns the number of bytes in this string.",74,{"inputs":[{"name":"string"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the string contains no bytes",74,{"inputs":[{"name":"string"}],"output":{"name":"bool"}}],[11,"clear","","Truncates the string, returning it to 0 length.",74,null],[11,"drain","","Create a draining iterator that removes the specified range in the string\nand yields the removed chars from start to end. The element range is\nremoved even if the iterator is not consumed until the end.",74,{"inputs":[{"name":"string"},{"name":"r"}],"output":{"name":"drain"}}],[11,"into_boxed_str","","Converts the string into `Box<str>`.",74,{"inputs":[{"name":"string"}],"output":{"name":"box"}}],[11,"into_boxed_slice","","Converts the string into `Box<str>`.",74,{"inputs":[{"name":"string"}],"output":{"name":"box"}}],[11,"into_bytes","","Returns the bytes that were attempted to convert to a `String`.",87,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"vec"}}],[11,"utf8_error","","Fetch a `Utf8Error` to get more details about the conversion failure.",87,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"utf8error"}}],[11,"fmt","","",87,{"inputs":[{"name":"fromutf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",88,{"inputs":[{"name":"fromutf16error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",74,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"clone_from","","",74,null],[11,"from_iter","","",74,{"inputs":[{"name":"string"},{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",74,{"inputs":[{"name":"string"},{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",74,{"inputs":[{"name":"string"},{"name":"i"}],"output":{"name":"string"}}],[11,"extend","","",74,null],[11,"extend","","",74,null],[11,"extend","","",74,null],[11,"extend","","",74,null],[11,"eq","","",74,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",74,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",74,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",74,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",74,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",74,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","collections::borrow","",57,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",57,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",57,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",57,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",57,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",57,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","collections::string","",74,{"inputs":[{"name":"string"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"ne","","",74,{"inputs":[{"name":"string"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"default","","",74,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"fmt","","",74,{"inputs":[{"name":"string"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",74,{"inputs":[{"name":"string"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",74,null],[11,"add","","",74,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"string"}}],[11,"index","","",74,{"inputs":[{"name":"string"},{"name":"range"}],"output":{"name":"str"}}],[11,"index","","",74,{"inputs":[{"name":"string"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index","","",74,{"inputs":[{"name":"string"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index","","",74,{"inputs":[{"name":"string"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"index_mut","","",74,{"inputs":[{"name":"string"},{"name":"range"}],"output":{"name":"str"}}],[11,"index_mut","","",74,{"inputs":[{"name":"string"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index_mut","","",74,{"inputs":[{"name":"string"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index_mut","","",74,{"inputs":[{"name":"string"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"deref","","",74,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"deref_mut","","",74,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"from_str","","",74,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",89,{"inputs":[{"name":"parseerror"}],"output":{"name":"parseerror"}}],[11,"fmt","","",89,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",89,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"as_ref","","",74,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"as_ref","","",74,null],[11,"from","","",74,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"string"}}],[11,"from","collections::borrow","",57,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"cow"}}],[11,"from","","",57,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"cow"}}],[11,"into","collections::string","",74,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"into_cow","","",74,{"inputs":[{"name":"string"}],"output":{"name":"cow"}}],[11,"write_str","","",74,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",74,{"inputs":[{"name":"string"},{"name":"char"}],"output":{"name":"result"}}],[11,"drop","","",90,null],[11,"next","","",90,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",90,null],[11,"next_back","","",90,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"clone","collections::vec","",19,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"clone_from","","",19,null],[11,"hash","","",19,null],[11,"index","","",19,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",19,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index","","",19,null],[11,"index","","",19,null],[11,"index","","",19,null],[11,"index","","",19,null],[11,"index_mut","","",19,null],[11,"index_mut","","",19,null],[11,"index_mut","","",19,null],[11,"index_mut","","",19,null],[11,"deref","","",19,null],[11,"deref_mut","","",19,null],[11,"from_iter","","",19,{"inputs":[{"name":"vec"},{"name":"i"}],"output":{"name":"vec"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe vector (from start to end). The vector cannot be used after calling\nthis.",19,{"inputs":[{"name":"vec"}],"output":{"name":"intoiter"}}],[11,"extend","","",19,null],[11,"extend","","",19,null],[11,"eq","","",19,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","","",19,null],[11,"ne","","",19,null],[11,"eq","","",19,null],[11,"ne","","",19,null],[11,"eq","collections::borrow","",57,null],[11,"ne","","",57,null],[11,"eq","","",57,null],[11,"ne","","",57,null],[11,"eq","","",57,{"inputs":[{"name":"cow"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",57,{"inputs":[{"name":"cow"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","collections::vec","",19,null],[11,"ne","","",19,null],[11,"eq","","",19,null],[11,"ne","","",19,null],[11,"eq","","",19,null],[11,"ne","","",19,null],[11,"eq","","",19,null],[11,"ne","","",19,null],[11,"eq","","",19,null],[11,"ne","","",19,null],[11,"eq","","",19,null],[11,"ne","","",19,null],[11,"eq","","",19,null],[11,"ne","","",19,null],[11,"eq","","",19,null],[11,"ne","","",19,null],[11,"eq","","",19,null],[11,"ne","","",19,null],[11,"eq","","",19,null],[11,"ne","","",19,null],[11,"eq","","",19,null],[11,"ne","","",19,null],[11,"eq","","",19,null],[11,"ne","","",19,null],[11,"eq","","",19,null],[11,"ne","","",19,null],[11,"eq","","",19,null],[11,"ne","","",19,null],[11,"eq","","",19,null],[11,"ne","","",19,null],[11,"eq","","",19,null],[11,"ne","","",19,null],[11,"eq","","",19,null],[11,"ne","","",19,null],[11,"eq","","",19,null],[11,"ne","","",19,null],[11,"eq","","",19,null],[11,"ne","","",19,null],[11,"eq","","",19,null],[11,"ne","","",19,null],[11,"eq","","",19,null],[11,"ne","","",19,null],[11,"eq","","",19,null],[11,"ne","","",19,null],[11,"eq","","",19,null],[11,"ne","","",19,null],[11,"eq","","",19,null],[11,"ne","","",19,null],[11,"eq","","",19,null],[11,"ne","","",19,null],[11,"eq","","",19,null],[11,"ne","","",19,null],[11,"eq","","",19,null],[11,"ne","","",19,null],[11,"eq","","",19,null],[11,"ne","","",19,null],[11,"eq","","",19,null],[11,"ne","","",19,null],[11,"eq","","",19,null],[11,"ne","","",19,null],[11,"eq","","",19,null],[11,"ne","","",19,null],[11,"eq","","",19,null],[11,"ne","","",19,null],[11,"eq","","",19,null],[11,"ne","","",19,null],[11,"eq","","",19,null],[11,"ne","","",19,null],[11,"eq","","",19,null],[11,"ne","","",19,null],[11,"eq","","",19,null],[11,"ne","","",19,null],[11,"eq","","",19,null],[11,"ne","","",19,null],[11,"eq","","",19,null],[11,"ne","","",19,null],[11,"eq","","",19,null],[11,"ne","","",19,null],[11,"eq","","",19,null],[11,"ne","","",19,null],[11,"eq","","",19,null],[11,"ne","","",19,null],[11,"eq","","",19,null],[11,"ne","","",19,null],[11,"eq","","",19,null],[11,"ne","","",19,null],[11,"eq","","",19,null],[11,"ne","","",19,null],[11,"eq","","",19,null],[11,"ne","","",19,null],[11,"eq","","",19,null],[11,"ne","","",19,null],[11,"eq","","",19,null],[11,"ne","","",19,null],[11,"eq","","",19,null],[11,"ne","","",19,null],[11,"eq","","",19,null],[11,"ne","","",19,null],[11,"eq","","",19,null],[11,"ne","","",19,null],[11,"eq","","",19,null],[11,"ne","","",19,null],[11,"eq","","",19,null],[11,"ne","","",19,null],[11,"eq","","",19,null],[11,"ne","","",19,null],[11,"eq","","",19,null],[11,"ne","","",19,null],[11,"eq","","",19,null],[11,"ne","","",19,null],[11,"eq","","",19,null],[11,"ne","","",19,null],[11,"eq","","",19,null],[11,"ne","","",19,null],[11,"eq","","",19,null],[11,"ne","","",19,null],[11,"eq","","",19,null],[11,"ne","","",19,null],[11,"eq","","",19,null],[11,"ne","","",19,null],[11,"eq","","",19,null],[11,"ne","","",19,null],[11,"eq","","",19,null],[11,"ne","","",19,null],[11,"eq","","",19,null],[11,"ne","","",19,null],[11,"eq","","",19,null],[11,"ne","","",19,null],[11,"eq","","",19,null],[11,"ne","","",19,null],[11,"eq","","",19,null],[11,"ne","","",19,null],[11,"partial_cmp","","",19,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"option"}}],[11,"cmp","","",19,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"ordering"}}],[11,"drop","","",19,null],[11,"default","","",19,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"fmt","","",19,{"inputs":[{"name":"vec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",19,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"as_mut","","",19,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"as_ref","","",19,null],[11,"as_mut","","",19,null],[11,"from","","",19,null],[11,"from","","",19,{"inputs":[{"name":"vec"},{"name":"str"}],"output":{"name":"vec"}}],[11,"from_iter","collections::borrow","",57,{"inputs":[{"name":"cow"},{"name":"i"}],"output":{"name":"cow"}}],[11,"into_cow","collections::vec","",19,{"inputs":[{"name":"vec"}],"output":{"name":"cow"}}],[11,"next","","",91,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",91,null],[11,"count","","",91,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next_back","","",91,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"drop","","",91,null],[11,"next","","",92,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",92,null],[11,"next_back","","",92,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"drop","","",92,null],[11,"clone","collections::vec_deque","",93,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vecdeque"}}],[11,"drop","","",93,null],[11,"default","","",93,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vecdeque"}}],[11,"new","","Creates an empty `VecDeque`.",93,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vecdeque"}}],[11,"with_capacity","","Creates an empty `VecDeque` with space for at least `n` elements.",93,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"get","","Retrieves an element in the `VecDeque` by index.",93,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_mut","","Retrieves an element in the `VecDeque` mutably by index.",93,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap","","Swaps elements at indices `i` and `j`.",93,null],[11,"capacity","","Returns the number of elements the `VecDeque` can hold without\nreallocating.",93,{"inputs":[{"name":"vecdeque"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `VecDeque`. Does nothing if the capacity is already sufficient.",93,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given\n`VecDeque`. The collection may reserve more space to avoid frequent reallocations.",93,null],[11,"shrink_to_fit","","Shrinks the capacity of the `VecDeque` as much as possible.",93,null],[11,"truncate","","Shortens a `VecDeque`, dropping excess elements from the back.",93,null],[11,"iter","","Returns a front-to-back iterator.",93,{"inputs":[{"name":"vecdeque"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a front-to-back iterator that returns mutable references.",93,{"inputs":[{"name":"vecdeque"}],"output":{"name":"itermut"}}],[11,"as_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",93,null],[11,"as_mut_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",93,null],[11,"len","","Returns the number of elements in the `VecDeque`.",93,{"inputs":[{"name":"vecdeque"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the buffer contains no elements",93,{"inputs":[{"name":"vecdeque"}],"output":{"name":"bool"}}],[11,"drain","","Create a draining iterator that removes the specified range in the\n`VecDeque` and yields the removed items from start to end. The element\nrange is removed even if the iterator is not consumed until the end.",93,{"inputs":[{"name":"vecdeque"},{"name":"r"}],"output":{"name":"drain"}}],[11,"clear","","Clears the buffer, removing all values.",93,null],[11,"front","","Provides a reference to the front element, or `None` if the sequence is\nempty.",93,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the\nsequence is empty.",93,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the sequence is\nempty.",93,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the\nsequence is empty.",93,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"pop_front","","Removes the first element and returns it, or `None` if the sequence is\nempty.",93,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"push_front","","Inserts an element first in the sequence.",93,null],[11,"push_back","","Appends an element to the back of a buffer",93,null],[11,"pop_back","","Removes the last element from a buffer and returns it, or `None` if\nit is empty.",93,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"swap_remove_back","","Removes an element from anywhere in the `VecDeque` and returns it, replacing it with the\nlast element.",93,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap_back_remove","","deprecated",93,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap_remove_front","","Removes an element from anywhere in the `VecDeque` and returns it,\nreplacing it with the first element.",93,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap_front_remove","","deprecated",93,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"insert","","Inserts an element at `index` within the `VecDeque`. Whichever\nend is closer to the insertion point will be moved to make room,\nand all the affected elements will be moved to new positions.",93,null],[11,"remove","","Removes and returns the element at `index` from the `VecDeque`.\nWhichever end is closer to the removal point will be moved to make\nroom, and all the affected elements will be moved to new positions.\nReturns `None` if `index` is out of bounds.",93,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"split_off","","Splits the collection into two at the given index.",93,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",93,null],[11,"retain","","Retains only the elements specified by the predicate.",93,null],[11,"resize","","Modifies the `VecDeque` in-place so that `len()` is equal to new_len,\neither by removing excess elements or by appending copies of a value to the back.",93,null],[11,"clone","","",94,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",94,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",94,null],[11,"next_back","","",94,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",95,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",95,null],[11,"next_back","","",95,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",96,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"next","","",96,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",96,null],[11,"next_back","","",96,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"drop","","",97,null],[11,"next","","",97,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",97,null],[11,"next_back","","",97,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"eq","","",93,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",93,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"cmp","","",93,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"ordering"}}],[11,"hash","","",93,null],[11,"index","","",93,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"a"}}],[11,"index_mut","","",93,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"a"}}],[11,"from_iter","","",93,{"inputs":[{"name":"vecdeque"},{"name":"t"}],"output":{"name":"vecdeque"}}],[11,"into_iter","","Consumes the list into a front-to-back iterator yielding elements by\nvalue.",93,{"inputs":[{"name":"vecdeque"}],"output":{"name":"intoiter"}}],[11,"extend","","",93,null],[11,"extend","","",93,null],[11,"fmt","","",93,{"inputs":[{"name":"vecdeque"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","collections","",98,{"inputs":[{"name":"bound"},{"name":"bound"}],"output":{"name":"bool"}}],[11,"ne","","",98,{"inputs":[{"name":"bound"},{"name":"bound"}],"output":{"name":"bool"}}],[11,"hash","","",98,null],[11,"fmt","","",98,{"inputs":[{"name":"bound"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",98,{"inputs":[{"name":"bound"}],"output":{"name":"bound"}}],[11,"clone","alloc::boxed","",99,{"inputs":[{"name":"exchangeheapsingleton"}],"output":{"name":"exchangeheapsingleton"}}],[11,"pointer","","",100,null],[11,"make_place","","",100,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"intermediatebox"}}],[11,"finalize","","",100,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"finalize","","",101,{"inputs":[{"name":"box"},{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"make_place","","",99,{"inputs":[{"name":"exchangeheapsingleton"}],"output":{"name":"intermediatebox"}}],[11,"drop","","",100,null],[11,"new","","Allocates memory on the heap and then moves `x` into it.",101,{"inputs":[{"name":"box"},{"name":"t"}],"output":{"name":"box"}}],[11,"from_raw","","Constructs a box from the raw pointer.",101,null],[11,"into_raw","","Consumes the `Box`, returning the wrapped raw pointer.",101,null],[11,"default","","",101,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"default","","",101,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"clone","","Returns a new box with a `clone()` of this box's contents.",101,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"clone_from","","Copies `source`'s contents into `self` without creating a new allocation.",101,null],[11,"clone","","",101,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"eq","","",101,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ne","","",101,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",101,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"option"}}],[11,"lt","","",101,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"le","","",101,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ge","","",101,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"gt","","",101,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"cmp","","",101,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"ordering"}}],[11,"hash","","",101,null],[11,"from","","",101,{"inputs":[{"name":"box"},{"name":"t"}],"output":{"name":"box"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",101,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",101,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"fmt","","",101,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",101,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",101,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",101,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"deref_mut","","",101,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"next","","",101,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"size_hint","","",101,null],[11,"next_back","","",101,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"call_once","","",101,{"inputs":[{"name":"box"},{"name":"a"}],"output":{"name":"r"}}],[11,"call_once","","",101,{"inputs":[{"name":"box"},{"name":"a"}],"output":{"name":"r"}}],[11,"clone","","",101,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"borrow","","",101,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"borrow_mut","","",101,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"as_ref","","",101,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"as_mut","","",101,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"deref","hyper::header::common::accept","",18,{"inputs":[{"name":"accept"}],"output":{"name":"vec"}}],[11,"deref_mut","","",18,{"inputs":[{"name":"accept"}],"output":{"name":"vec"}}],[11,"header_name","","",18,{"inputs":[{"name":"accept"}],"output":{"name":"str"}}],[11,"parse_header","","",18,null],[11,"fmt_header","","",18,{"inputs":[{"name":"accept"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"accept"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","hyper::header::common::access_control_allow_credentials","",102,{"inputs":[{"name":"accesscontrolallowcredentials"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",102,{"inputs":[{"name":"accesscontrolallowcredentials"},{"name":"accesscontrolallowcredentials"}],"output":{"name":"bool"}}],[11,"ne","","",102,{"inputs":[{"name":"accesscontrolallowcredentials"},{"name":"accesscontrolallowcredentials"}],"output":{"name":"bool"}}],[11,"clone","","",102,{"inputs":[{"name":"accesscontrolallowcredentials"}],"output":{"name":"accesscontrolallowcredentials"}}],[11,"header_name","","",102,{"inputs":[{"name":"accesscontrolallowcredentials"}],"output":{"name":"str"}}],[11,"parse_header","","",102,null],[11,"fmt_header","","",102,{"inputs":[{"name":"accesscontrolallowcredentials"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",102,{"inputs":[{"name":"accesscontrolallowcredentials"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","hyper::header::common::access_control_allow_headers","",103,{"inputs":[{"name":"accesscontrolallowheaders"},{"name":"accesscontrolallowheaders"}],"output":{"name":"bool"}}],[11,"ne","","",103,{"inputs":[{"name":"accesscontrolallowheaders"},{"name":"accesscontrolallowheaders"}],"output":{"name":"bool"}}],[11,"fmt","","",103,{"inputs":[{"name":"accesscontrolallowheaders"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",103,{"inputs":[{"name":"accesscontrolallowheaders"}],"output":{"name":"accesscontrolallowheaders"}}],[11,"deref","","",103,{"inputs":[{"name":"accesscontrolallowheaders"}],"output":{"name":"vec"}}],[11,"deref_mut","","",103,{"inputs":[{"name":"accesscontrolallowheaders"}],"output":{"name":"vec"}}],[11,"header_name","","",103,{"inputs":[{"name":"accesscontrolallowheaders"}],"output":{"name":"str"}}],[11,"parse_header","","",103,null],[11,"fmt_header","","",103,{"inputs":[{"name":"accesscontrolallowheaders"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",103,{"inputs":[{"name":"accesscontrolallowheaders"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","hyper::header::common::access_control_allow_methods","",104,{"inputs":[{"name":"accesscontrolallowmethods"},{"name":"accesscontrolallowmethods"}],"output":{"name":"bool"}}],[11,"ne","","",104,{"inputs":[{"name":"accesscontrolallowmethods"},{"name":"accesscontrolallowmethods"}],"output":{"name":"bool"}}],[11,"fmt","","",104,{"inputs":[{"name":"accesscontrolallowmethods"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",104,{"inputs":[{"name":"accesscontrolallowmethods"}],"output":{"name":"accesscontrolallowmethods"}}],[11,"deref","","",104,{"inputs":[{"name":"accesscontrolallowmethods"}],"output":{"name":"vec"}}],[11,"deref_mut","","",104,{"inputs":[{"name":"accesscontrolallowmethods"}],"output":{"name":"vec"}}],[11,"header_name","","",104,{"inputs":[{"name":"accesscontrolallowmethods"}],"output":{"name":"str"}}],[11,"parse_header","","",104,null],[11,"fmt_header","","",104,{"inputs":[{"name":"accesscontrolallowmethods"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",104,{"inputs":[{"name":"accesscontrolallowmethods"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","hyper::header::common::access_control_allow_origin","",105,{"inputs":[{"name":"accesscontrolalloworigin"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",105,{"inputs":[{"name":"accesscontrolalloworigin"},{"name":"accesscontrolalloworigin"}],"output":{"name":"bool"}}],[11,"ne","","",105,{"inputs":[{"name":"accesscontrolalloworigin"},{"name":"accesscontrolalloworigin"}],"output":{"name":"bool"}}],[11,"clone","","",105,{"inputs":[{"name":"accesscontrolalloworigin"}],"output":{"name":"accesscontrolalloworigin"}}],[11,"header_name","","",105,{"inputs":[{"name":"accesscontrolalloworigin"}],"output":{"name":"str"}}],[11,"parse_header","","",105,null],[11,"fmt_header","","",105,{"inputs":[{"name":"accesscontrolalloworigin"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",105,{"inputs":[{"name":"accesscontrolalloworigin"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","hyper::header::common::access_control_expose_headers","",106,{"inputs":[{"name":"accesscontrolexposeheaders"},{"name":"accesscontrolexposeheaders"}],"output":{"name":"bool"}}],[11,"ne","","",106,{"inputs":[{"name":"accesscontrolexposeheaders"},{"name":"accesscontrolexposeheaders"}],"output":{"name":"bool"}}],[11,"fmt","","",106,{"inputs":[{"name":"accesscontrolexposeheaders"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",106,{"inputs":[{"name":"accesscontrolexposeheaders"}],"output":{"name":"accesscontrolexposeheaders"}}],[11,"deref","","",106,{"inputs":[{"name":"accesscontrolexposeheaders"}],"output":{"name":"vec"}}],[11,"deref_mut","","",106,{"inputs":[{"name":"accesscontrolexposeheaders"}],"output":{"name":"vec"}}],[11,"header_name","","",106,{"inputs":[{"name":"accesscontrolexposeheaders"}],"output":{"name":"str"}}],[11,"parse_header","","",106,null],[11,"fmt_header","","",106,{"inputs":[{"name":"accesscontrolexposeheaders"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",106,{"inputs":[{"name":"accesscontrolexposeheaders"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","hyper::header::common::access_control_max_age","",107,{"inputs":[{"name":"accesscontrolmaxage"},{"name":"accesscontrolmaxage"}],"output":{"name":"bool"}}],[11,"ne","","",107,{"inputs":[{"name":"accesscontrolmaxage"},{"name":"accesscontrolmaxage"}],"output":{"name":"bool"}}],[11,"fmt","","",107,{"inputs":[{"name":"accesscontrolmaxage"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",107,{"inputs":[{"name":"accesscontrolmaxage"}],"output":{"name":"accesscontrolmaxage"}}],[11,"deref","","",107,{"inputs":[{"name":"accesscontrolmaxage"}],"output":{"name":"u32"}}],[11,"deref_mut","","",107,{"inputs":[{"name":"accesscontrolmaxage"}],"output":{"name":"u32"}}],[11,"header_name","","",107,{"inputs":[{"name":"accesscontrolmaxage"}],"output":{"name":"str"}}],[11,"parse_header","","",107,null],[11,"fmt_header","","",107,{"inputs":[{"name":"accesscontrolmaxage"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",107,{"inputs":[{"name":"accesscontrolmaxage"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","hyper::header::common::access_control_request_headers","",108,{"inputs":[{"name":"accesscontrolrequestheaders"},{"name":"accesscontrolrequestheaders"}],"output":{"name":"bool"}}],[11,"ne","","",108,{"inputs":[{"name":"accesscontrolrequestheaders"},{"name":"accesscontrolrequestheaders"}],"output":{"name":"bool"}}],[11,"fmt","","",108,{"inputs":[{"name":"accesscontrolrequestheaders"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",108,{"inputs":[{"name":"accesscontrolrequestheaders"}],"output":{"name":"accesscontrolrequestheaders"}}],[11,"deref","","",108,{"inputs":[{"name":"accesscontrolrequestheaders"}],"output":{"name":"vec"}}],[11,"deref_mut","","",108,{"inputs":[{"name":"accesscontrolrequestheaders"}],"output":{"name":"vec"}}],[11,"header_name","","",108,{"inputs":[{"name":"accesscontrolrequestheaders"}],"output":{"name":"str"}}],[11,"parse_header","","",108,null],[11,"fmt_header","","",108,{"inputs":[{"name":"accesscontrolrequestheaders"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",108,{"inputs":[{"name":"accesscontrolrequestheaders"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","hyper::header::common::access_control_request_method","",109,{"inputs":[{"name":"accesscontrolrequestmethod"},{"name":"accesscontrolrequestmethod"}],"output":{"name":"bool"}}],[11,"ne","","",109,{"inputs":[{"name":"accesscontrolrequestmethod"},{"name":"accesscontrolrequestmethod"}],"output":{"name":"bool"}}],[11,"fmt","","",109,{"inputs":[{"name":"accesscontrolrequestmethod"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",109,{"inputs":[{"name":"accesscontrolrequestmethod"}],"output":{"name":"accesscontrolrequestmethod"}}],[11,"deref","","",109,{"inputs":[{"name":"accesscontrolrequestmethod"}],"output":{"name":"method"}}],[11,"deref_mut","","",109,{"inputs":[{"name":"accesscontrolrequestmethod"}],"output":{"name":"method"}}],[11,"header_name","","",109,{"inputs":[{"name":"accesscontrolrequestmethod"}],"output":{"name":"str"}}],[11,"parse_header","","",109,null],[11,"fmt_header","","",109,{"inputs":[{"name":"accesscontrolrequestmethod"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",109,{"inputs":[{"name":"accesscontrolrequestmethod"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","hyper::header::common::accept_charset","",110,{"inputs":[{"name":"acceptcharset"},{"name":"acceptcharset"}],"output":{"name":"bool"}}],[11,"ne","","",110,{"inputs":[{"name":"acceptcharset"},{"name":"acceptcharset"}],"output":{"name":"bool"}}],[11,"fmt","","",110,{"inputs":[{"name":"acceptcharset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",110,{"inputs":[{"name":"acceptcharset"}],"output":{"name":"acceptcharset"}}],[11,"deref","","",110,{"inputs":[{"name":"acceptcharset"}],"output":{"name":"vec"}}],[11,"deref_mut","","",110,{"inputs":[{"name":"acceptcharset"}],"output":{"name":"vec"}}],[11,"header_name","","",110,{"inputs":[{"name":"acceptcharset"}],"output":{"name":"str"}}],[11,"parse_header","","",110,null],[11,"fmt_header","","",110,{"inputs":[{"name":"acceptcharset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",110,{"inputs":[{"name":"acceptcharset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","hyper::header::common::accept_encoding","",111,{"inputs":[{"name":"acceptencoding"},{"name":"acceptencoding"}],"output":{"name":"bool"}}],[11,"ne","","",111,{"inputs":[{"name":"acceptencoding"},{"name":"acceptencoding"}],"output":{"name":"bool"}}],[11,"fmt","","",111,{"inputs":[{"name":"acceptencoding"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",111,{"inputs":[{"name":"acceptencoding"}],"output":{"name":"acceptencoding"}}],[11,"deref","","",111,{"inputs":[{"name":"acceptencoding"}],"output":{"name":"vec"}}],[11,"deref_mut","","",111,{"inputs":[{"name":"acceptencoding"}],"output":{"name":"vec"}}],[11,"header_name","","",111,{"inputs":[{"name":"acceptencoding"}],"output":{"name":"str"}}],[11,"parse_header","","",111,null],[11,"fmt_header","","",111,{"inputs":[{"name":"acceptencoding"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",111,{"inputs":[{"name":"acceptencoding"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","hyper::header::common::accept_language","",112,{"inputs":[{"name":"acceptlanguage"},{"name":"acceptlanguage"}],"output":{"name":"bool"}}],[11,"ne","","",112,{"inputs":[{"name":"acceptlanguage"},{"name":"acceptlanguage"}],"output":{"name":"bool"}}],[11,"fmt","","",112,{"inputs":[{"name":"acceptlanguage"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",112,{"inputs":[{"name":"acceptlanguage"}],"output":{"name":"acceptlanguage"}}],[11,"deref","","",112,{"inputs":[{"name":"acceptlanguage"}],"output":{"name":"vec"}}],[11,"deref_mut","","",112,{"inputs":[{"name":"acceptlanguage"}],"output":{"name":"vec"}}],[11,"header_name","","",112,{"inputs":[{"name":"acceptlanguage"}],"output":{"name":"str"}}],[11,"parse_header","","",112,null],[11,"fmt_header","","",112,{"inputs":[{"name":"acceptlanguage"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",112,{"inputs":[{"name":"acceptlanguage"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","hyper::header::common::accept_ranges","",113,{"inputs":[{"name":"acceptranges"},{"name":"acceptranges"}],"output":{"name":"bool"}}],[11,"ne","","",113,{"inputs":[{"name":"acceptranges"},{"name":"acceptranges"}],"output":{"name":"bool"}}],[11,"fmt","","",113,{"inputs":[{"name":"acceptranges"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",113,{"inputs":[{"name":"acceptranges"}],"output":{"name":"acceptranges"}}],[11,"deref","","",113,{"inputs":[{"name":"acceptranges"}],"output":{"name":"vec"}}],[11,"deref_mut","","",113,{"inputs":[{"name":"acceptranges"}],"output":{"name":"vec"}}],[11,"header_name","","",113,{"inputs":[{"name":"acceptranges"}],"output":{"name":"str"}}],[11,"parse_header","","",113,null],[11,"fmt_header","","",113,{"inputs":[{"name":"acceptranges"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",113,{"inputs":[{"name":"acceptranges"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",114,{"inputs":[{"name":"rangeunit"},{"name":"rangeunit"}],"output":{"name":"bool"}}],[11,"ne","","",114,{"inputs":[{"name":"rangeunit"},{"name":"rangeunit"}],"output":{"name":"bool"}}],[11,"fmt","","",114,{"inputs":[{"name":"rangeunit"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",114,{"inputs":[{"name":"rangeunit"}],"output":{"name":"rangeunit"}}],[11,"from_str","","",114,{"inputs":[{"name":"rangeunit"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",114,{"inputs":[{"name":"rangeunit"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","hyper::header::common::allow","",115,{"inputs":[{"name":"allow"},{"name":"allow"}],"output":{"name":"bool"}}],[11,"ne","","",115,{"inputs":[{"name":"allow"},{"name":"allow"}],"output":{"name":"bool"}}],[11,"fmt","","",115,{"inputs":[{"name":"allow"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",115,{"inputs":[{"name":"allow"}],"output":{"name":"allow"}}],[11,"deref","","",115,{"inputs":[{"name":"allow"}],"output":{"name":"vec"}}],[11,"deref_mut","","",115,{"inputs":[{"name":"allow"}],"output":{"name":"vec"}}],[11,"header_name","","",115,{"inputs":[{"name":"allow"}],"output":{"name":"str"}}],[11,"parse_header","","",115,null],[11,"fmt_header","","",115,{"inputs":[{"name":"allow"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",115,{"inputs":[{"name":"allow"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","hyper::header::common::authorization","",116,{"inputs":[{"name":"authorization"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",116,{"inputs":[{"name":"authorization"},{"name":"authorization"}],"output":{"name":"bool"}}],[11,"ne","","",116,{"inputs":[{"name":"authorization"},{"name":"authorization"}],"output":{"name":"bool"}}],[11,"clone","","",116,{"inputs":[{"name":"authorization"}],"output":{"name":"authorization"}}],[11,"deref","","",116,{"inputs":[{"name":"authorization"}],"output":{"name":"s"}}],[11,"deref_mut","","",116,{"inputs":[{"name":"authorization"}],"output":{"name":"s"}}],[11,"header_name","","",116,{"inputs":[{"name":"authorization"}],"output":{"name":"str"}}],[11,"parse_header","","",116,null],[11,"fmt_header","","",116,{"inputs":[{"name":"authorization"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"scheme","collections::string","",74,{"inputs":[{"name":"string"}],"output":{"name":"option"}}],[11,"fmt_scheme","","",74,{"inputs":[{"name":"string"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","hyper::header::common::authorization","",117,{"inputs":[{"name":"basic"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",117,{"inputs":[{"name":"basic"},{"name":"basic"}],"output":{"name":"bool"}}],[11,"ne","","",117,{"inputs":[{"name":"basic"},{"name":"basic"}],"output":{"name":"bool"}}],[11,"clone","","",117,{"inputs":[{"name":"basic"}],"output":{"name":"basic"}}],[11,"scheme","","",117,{"inputs":[{"name":"basic"}],"output":{"name":"option"}}],[11,"fmt_scheme","","",117,{"inputs":[{"name":"basic"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",117,{"inputs":[{"name":"basic"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",118,{"inputs":[{"name":"bearer"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",118,{"inputs":[{"name":"bearer"},{"name":"bearer"}],"output":{"name":"bool"}}],[11,"ne","","",118,{"inputs":[{"name":"bearer"},{"name":"bearer"}],"output":{"name":"bool"}}],[11,"clone","","",118,{"inputs":[{"name":"bearer"}],"output":{"name":"bearer"}}],[11,"scheme","","",118,{"inputs":[{"name":"bearer"}],"output":{"name":"option"}}],[11,"fmt_scheme","","",118,{"inputs":[{"name":"bearer"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",118,{"inputs":[{"name":"bearer"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","hyper::header::common::cache_control","",119,{"inputs":[{"name":"cachecontrol"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",119,{"inputs":[{"name":"cachecontrol"}],"output":{"name":"cachecontrol"}}],[11,"eq","","",119,{"inputs":[{"name":"cachecontrol"},{"name":"cachecontrol"}],"output":{"name":"bool"}}],[11,"ne","","",119,{"inputs":[{"name":"cachecontrol"},{"name":"cachecontrol"}],"output":{"name":"bool"}}],[11,"deref","","",119,{"inputs":[{"name":"cachecontrol"}],"output":{"name":"vec"}}],[11,"deref_mut","","",119,{"inputs":[{"name":"cachecontrol"}],"output":{"name":"vec"}}],[11,"header_name","","",119,{"inputs":[{"name":"cachecontrol"}],"output":{"name":"str"}}],[11,"parse_header","","",119,null],[11,"fmt_header","","",119,{"inputs":[{"name":"cachecontrol"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",120,{"inputs":[{"name":"cachedirective"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",120,{"inputs":[{"name":"cachedirective"}],"output":{"name":"cachedirective"}}],[11,"eq","","",120,{"inputs":[{"name":"cachedirective"},{"name":"cachedirective"}],"output":{"name":"bool"}}],[11,"ne","","",120,{"inputs":[{"name":"cachedirective"},{"name":"cachedirective"}],"output":{"name":"bool"}}],[11,"fmt","","",120,{"inputs":[{"name":"cachedirective"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",120,{"inputs":[{"name":"cachedirective"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","hyper::header::common::cookie","",121,{"inputs":[{"name":"cookie"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",121,{"inputs":[{"name":"cookie"},{"name":"cookie"}],"output":{"name":"bool"}}],[11,"ne","","",121,{"inputs":[{"name":"cookie"},{"name":"cookie"}],"output":{"name":"bool"}}],[11,"clone","","",121,{"inputs":[{"name":"cookie"}],"output":{"name":"cookie"}}],[11,"deref","","",121,{"inputs":[{"name":"cookie"}],"output":{"name":"vec"}}],[11,"deref_mut","","",121,{"inputs":[{"name":"cookie"}],"output":{"name":"vec"}}],[11,"header_name","","",121,{"inputs":[{"name":"cookie"}],"output":{"name":"str"}}],[11,"parse_header","","",121,null],[11,"fmt_header","","",121,{"inputs":[{"name":"cookie"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_cookie_jar","","This method can be used to create CookieJar that can be used\nto manipulate cookies and create a corresponding `SetCookie` header afterwards.",121,null],[11,"from_cookie_jar","","Extracts all cookies from `CookieJar` and creates Cookie header.\nUseful for clients.",121,{"inputs":[{"name":"cookie"},{"name":"cookiejar"}],"output":{"name":"cookie"}}],[11,"fmt","hyper::header::common::connection","",122,{"inputs":[{"name":"connectionoption"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",122,{"inputs":[{"name":"connectionoption"},{"name":"connectionoption"}],"output":{"name":"bool"}}],[11,"ne","","",122,{"inputs":[{"name":"connectionoption"},{"name":"connectionoption"}],"output":{"name":"bool"}}],[11,"clone","","",122,{"inputs":[{"name":"connectionoption"}],"output":{"name":"connectionoption"}}],[11,"from_str","","",122,{"inputs":[{"name":"connectionoption"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",122,{"inputs":[{"name":"connectionoption"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",123,{"inputs":[{"name":"connection"},{"name":"connection"}],"output":{"name":"bool"}}],[11,"ne","","",123,{"inputs":[{"name":"connection"},{"name":"connection"}],"output":{"name":"bool"}}],[11,"fmt","","",123,{"inputs":[{"name":"connection"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",123,{"inputs":[{"name":"connection"}],"output":{"name":"connection"}}],[11,"deref","","",123,{"inputs":[{"name":"connection"}],"output":{"name":"vec"}}],[11,"deref_mut","","",123,{"inputs":[{"name":"connection"}],"output":{"name":"vec"}}],[11,"header_name","","",123,{"inputs":[{"name":"connection"}],"output":{"name":"str"}}],[11,"parse_header","","",123,null],[11,"fmt_header","","",123,{"inputs":[{"name":"connection"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",123,{"inputs":[{"name":"connection"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"close","","A constructor to easily create a `Connection: close` header.",123,{"inputs":[{"name":"connection"}],"output":{"name":"connection"}}],[11,"keep_alive","","A constructor to easily create a `Connection: keep-alive` header.",123,{"inputs":[{"name":"connection"}],"output":{"name":"connection"}}],[11,"eq","hyper::header::common::content_disposition","",124,{"inputs":[{"name":"dispositiontype"},{"name":"dispositiontype"}],"output":{"name":"bool"}}],[11,"ne","","",124,{"inputs":[{"name":"dispositiontype"},{"name":"dispositiontype"}],"output":{"name":"bool"}}],[11,"fmt","","",124,{"inputs":[{"name":"dispositiontype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",124,{"inputs":[{"name":"dispositiontype"}],"output":{"name":"dispositiontype"}}],[11,"eq","","",125,{"inputs":[{"name":"dispositionparam"},{"name":"dispositionparam"}],"output":{"name":"bool"}}],[11,"ne","","",125,{"inputs":[{"name":"dispositionparam"},{"name":"dispositionparam"}],"output":{"name":"bool"}}],[11,"fmt","","",125,{"inputs":[{"name":"dispositionparam"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",125,{"inputs":[{"name":"dispositionparam"}],"output":{"name":"dispositionparam"}}],[11,"eq","","",126,{"inputs":[{"name":"contentdisposition"},{"name":"contentdisposition"}],"output":{"name":"bool"}}],[11,"ne","","",126,{"inputs":[{"name":"contentdisposition"},{"name":"contentdisposition"}],"output":{"name":"bool"}}],[11,"fmt","","",126,{"inputs":[{"name":"contentdisposition"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",126,{"inputs":[{"name":"contentdisposition"}],"output":{"name":"contentdisposition"}}],[11,"header_name","","",126,{"inputs":[{"name":"contentdisposition"}],"output":{"name":"str"}}],[11,"parse_header","","",126,null],[11,"fmt_header","","",126,{"inputs":[{"name":"contentdisposition"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",126,{"inputs":[{"name":"contentdisposition"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","hyper::header::common::content_encoding","",127,{"inputs":[{"name":"contentencoding"},{"name":"contentencoding"}],"output":{"name":"bool"}}],[11,"ne","","",127,{"inputs":[{"name":"contentencoding"},{"name":"contentencoding"}],"output":{"name":"bool"}}],[11,"fmt","","",127,{"inputs":[{"name":"contentencoding"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",127,{"inputs":[{"name":"contentencoding"}],"output":{"name":"contentencoding"}}],[11,"deref","","",127,{"inputs":[{"name":"contentencoding"}],"output":{"name":"vec"}}],[11,"deref_mut","","",127,{"inputs":[{"name":"contentencoding"}],"output":{"name":"vec"}}],[11,"header_name","","",127,{"inputs":[{"name":"contentencoding"}],"output":{"name":"str"}}],[11,"parse_header","","",127,null],[11,"fmt_header","","",127,{"inputs":[{"name":"contentencoding"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",127,{"inputs":[{"name":"contentencoding"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","hyper::header::common::content_language","",128,{"inputs":[{"name":"contentlanguage"},{"name":"contentlanguage"}],"output":{"name":"bool"}}],[11,"ne","","",128,{"inputs":[{"name":"contentlanguage"},{"name":"contentlanguage"}],"output":{"name":"bool"}}],[11,"fmt","","",128,{"inputs":[{"name":"contentlanguage"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",128,{"inputs":[{"name":"contentlanguage"}],"output":{"name":"contentlanguage"}}],[11,"deref","","",128,{"inputs":[{"name":"contentlanguage"}],"output":{"name":"vec"}}],[11,"deref_mut","","",128,{"inputs":[{"name":"contentlanguage"}],"output":{"name":"vec"}}],[11,"header_name","","",128,{"inputs":[{"name":"contentlanguage"}],"output":{"name":"str"}}],[11,"parse_header","","",128,null],[11,"fmt_header","","",128,{"inputs":[{"name":"contentlanguage"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",128,{"inputs":[{"name":"contentlanguage"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","hyper::header::common::content_length","",129,{"inputs":[{"name":"contentlength"},{"name":"contentlength"}],"output":{"name":"bool"}}],[11,"ne","","",129,{"inputs":[{"name":"contentlength"},{"name":"contentlength"}],"output":{"name":"bool"}}],[11,"fmt","","",129,{"inputs":[{"name":"contentlength"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",129,{"inputs":[{"name":"contentlength"}],"output":{"name":"contentlength"}}],[11,"header_name","","",129,{"inputs":[{"name":"contentlength"}],"output":{"name":"str"}}],[11,"parse_header","","",129,null],[11,"fmt_header","","",129,{"inputs":[{"name":"contentlength"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",129,{"inputs":[{"name":"contentlength"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",129,{"inputs":[{"name":"contentlength"}],"output":{"name":"u64"}}],[11,"deref_mut","","",129,{"inputs":[{"name":"contentlength"}],"output":{"name":"u64"}}],[11,"eq","hyper::header::common::content_range","",130,{"inputs":[{"name":"contentrange"},{"name":"contentrange"}],"output":{"name":"bool"}}],[11,"ne","","",130,{"inputs":[{"name":"contentrange"},{"name":"contentrange"}],"output":{"name":"bool"}}],[11,"fmt","","",130,{"inputs":[{"name":"contentrange"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",130,{"inputs":[{"name":"contentrange"}],"output":{"name":"contentrange"}}],[11,"deref","","",130,{"inputs":[{"name":"contentrange"}],"output":{"name":"contentrangespec"}}],[11,"deref_mut","","",130,{"inputs":[{"name":"contentrange"}],"output":{"name":"contentrangespec"}}],[11,"header_name","","",130,{"inputs":[{"name":"contentrange"}],"output":{"name":"str"}}],[11,"parse_header","","",130,null],[11,"fmt_header","","",130,{"inputs":[{"name":"contentrange"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",130,{"inputs":[{"name":"contentrange"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",131,{"inputs":[{"name":"contentrangespec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",131,{"inputs":[{"name":"contentrangespec"}],"output":{"name":"contentrangespec"}}],[11,"eq","","",131,{"inputs":[{"name":"contentrangespec"},{"name":"contentrangespec"}],"output":{"name":"bool"}}],[11,"ne","","",131,{"inputs":[{"name":"contentrangespec"},{"name":"contentrangespec"}],"output":{"name":"bool"}}],[11,"from_str","","",131,{"inputs":[{"name":"contentrangespec"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",131,{"inputs":[{"name":"contentrangespec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","hyper::header::common::content_type","",132,{"inputs":[{"name":"contenttype"},{"name":"contenttype"}],"output":{"name":"bool"}}],[11,"ne","","",132,{"inputs":[{"name":"contenttype"},{"name":"contenttype"}],"output":{"name":"bool"}}],[11,"fmt","","",132,{"inputs":[{"name":"contenttype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",132,{"inputs":[{"name":"contenttype"}],"output":{"name":"contenttype"}}],[11,"get_param","mime","",133,{"inputs":[{"name":"mime"},{"name":"a"}],"output":{"name":"option"}}],[11,"hash","","",133,null],[11,"fmt","","",133,{"inputs":[{"name":"mime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",133,{"inputs":[{"name":"mime"}],"output":{"name":"mime"}}],[11,"eq","","",133,{"inputs":[{"name":"mime"},{"name":"mime"}],"output":{"name":"bool"}}],[11,"hash","","",134,null],[11,"fmt","","",134,{"inputs":[{"name":"toplevel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",134,{"inputs":[{"name":"toplevel"}],"output":{"name":"toplevel"}}],[11,"as_str","","",134,{"inputs":[{"name":"toplevel"}],"output":{"name":"str"}}],[11,"deref","","",134,{"inputs":[{"name":"toplevel"}],"output":{"name":"str"}}],[11,"eq","","",134,{"inputs":[{"name":"toplevel"},{"name":"toplevel"}],"output":{"name":"bool"}}],[11,"eq","","",134,{"inputs":[{"name":"toplevel"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",134,{"inputs":[{"name":"toplevel"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",134,{"inputs":[{"name":"toplevel"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","collections::string","",74,{"inputs":[{"name":"string"},{"name":"toplevel"}],"output":{"name":"bool"}}],[11,"fmt","mime","",134,{"inputs":[{"name":"toplevel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",134,{"inputs":[{"name":"toplevel"},{"name":"str"}],"output":{"name":"result"}}],[11,"hash","","",135,null],[11,"fmt","","",135,{"inputs":[{"name":"sublevel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",135,{"inputs":[{"name":"sublevel"}],"output":{"name":"sublevel"}}],[11,"as_str","","",135,{"inputs":[{"name":"sublevel"}],"output":{"name":"str"}}],[11,"deref","","",135,{"inputs":[{"name":"sublevel"}],"output":{"name":"str"}}],[11,"eq","","",135,{"inputs":[{"name":"sublevel"},{"name":"sublevel"}],"output":{"name":"bool"}}],[11,"eq","","",135,{"inputs":[{"name":"sublevel"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",135,{"inputs":[{"name":"sublevel"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",135,{"inputs":[{"name":"sublevel"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","collections::string","",74,{"inputs":[{"name":"string"},{"name":"sublevel"}],"output":{"name":"bool"}}],[11,"fmt","mime","",135,{"inputs":[{"name":"sublevel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",135,{"inputs":[{"name":"sublevel"},{"name":"str"}],"output":{"name":"result"}}],[11,"hash","","",136,null],[11,"fmt","","",136,{"inputs":[{"name":"attr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",136,{"inputs":[{"name":"attr"}],"output":{"name":"attr"}}],[11,"as_str","","",136,{"inputs":[{"name":"attr"}],"output":{"name":"str"}}],[11,"deref","","",136,{"inputs":[{"name":"attr"}],"output":{"name":"str"}}],[11,"eq","","",136,{"inputs":[{"name":"attr"},{"name":"attr"}],"output":{"name":"bool"}}],[11,"eq","","",136,{"inputs":[{"name":"attr"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",136,{"inputs":[{"name":"attr"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",136,{"inputs":[{"name":"attr"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","collections::string","",74,{"inputs":[{"name":"string"},{"name":"attr"}],"output":{"name":"bool"}}],[11,"fmt","mime","",136,{"inputs":[{"name":"attr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",136,{"inputs":[{"name":"attr"},{"name":"str"}],"output":{"name":"result"}}],[11,"hash","","",137,null],[11,"fmt","","",137,{"inputs":[{"name":"value"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",137,{"inputs":[{"name":"value"}],"output":{"name":"value"}}],[11,"as_str","","",137,{"inputs":[{"name":"value"}],"output":{"name":"str"}}],[11,"deref","","",137,{"inputs":[{"name":"value"}],"output":{"name":"str"}}],[11,"eq","","",137,{"inputs":[{"name":"value"},{"name":"value"}],"output":{"name":"bool"}}],[11,"eq","","",137,{"inputs":[{"name":"value"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",137,{"inputs":[{"name":"value"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",137,{"inputs":[{"name":"value"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","collections::string","",74,{"inputs":[{"name":"string"},{"name":"value"}],"output":{"name":"bool"}}],[11,"fmt","mime","",137,{"inputs":[{"name":"value"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",137,{"inputs":[{"name":"value"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",133,{"inputs":[{"name":"mime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",133,{"inputs":[{"name":"mime"},{"name":"str"}],"output":{"name":"result"}}],[11,"deref","hyper::header::common::content_type","",132,{"inputs":[{"name":"contenttype"}],"output":{"name":"mime"}}],[11,"deref_mut","","",132,{"inputs":[{"name":"contenttype"}],"output":{"name":"mime"}}],[11,"header_name","","",132,{"inputs":[{"name":"contenttype"}],"output":{"name":"str"}}],[11,"parse_header","","",132,null],[11,"fmt_header","","",132,{"inputs":[{"name":"contenttype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",132,{"inputs":[{"name":"contenttype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"json","","A constructor  to easily create a `Content-Type: application/json; charset=utf-8` header.",132,{"inputs":[{"name":"contenttype"}],"output":{"name":"contenttype"}}],[11,"plaintext","","A constructor  to easily create a `Content-Type: text/plain; charset=utf-8` header.",132,{"inputs":[{"name":"contenttype"}],"output":{"name":"contenttype"}}],[11,"html","","A constructor  to easily create a `Content-Type: text/html; charset=utf-8` header.",132,{"inputs":[{"name":"contenttype"}],"output":{"name":"contenttype"}}],[11,"form_url_encoded","","A constructor  to easily create a `Content-Type: application/www-form-url-encoded` header.",132,{"inputs":[{"name":"contenttype"}],"output":{"name":"contenttype"}}],[11,"jpeg","","A constructor  to easily create a `Content-Type: image/jpeg` header.",132,{"inputs":[{"name":"contenttype"}],"output":{"name":"contenttype"}}],[11,"png","","A constructor  to easily create a `Content-Type: image/png` header.",132,{"inputs":[{"name":"contenttype"}],"output":{"name":"contenttype"}}],[11,"eq","hyper::header::common::date","",138,{"inputs":[{"name":"date"},{"name":"date"}],"output":{"name":"bool"}}],[11,"ne","","",138,{"inputs":[{"name":"date"},{"name":"date"}],"output":{"name":"bool"}}],[11,"fmt","","",138,{"inputs":[{"name":"date"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",138,{"inputs":[{"name":"date"}],"output":{"name":"date"}}],[11,"deref","","",138,{"inputs":[{"name":"date"}],"output":{"name":"httpdate"}}],[11,"deref_mut","","",138,{"inputs":[{"name":"date"}],"output":{"name":"httpdate"}}],[11,"header_name","","",138,{"inputs":[{"name":"date"}],"output":{"name":"str"}}],[11,"parse_header","","",138,null],[11,"fmt_header","","",138,{"inputs":[{"name":"date"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",138,{"inputs":[{"name":"date"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","hyper::header::common::etag","",139,{"inputs":[{"name":"etag"},{"name":"etag"}],"output":{"name":"bool"}}],[11,"ne","","",139,{"inputs":[{"name":"etag"},{"name":"etag"}],"output":{"name":"bool"}}],[11,"fmt","","",139,{"inputs":[{"name":"etag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",139,{"inputs":[{"name":"etag"}],"output":{"name":"etag"}}],[11,"new","hyper::header::shared::entity","Constructs a new EntityTag.\n# Panics\nIf the tag contains invalid characters.",140,{"inputs":[{"name":"entitytag"},{"name":"bool"},{"name":"string"}],"output":{"name":"entitytag"}}],[11,"weak","","Constructs a new weak EntityTag.\n# Panics\nIf the tag contains invalid characters.",140,{"inputs":[{"name":"entitytag"},{"name":"string"}],"output":{"name":"entitytag"}}],[11,"strong","","Constructs a new strong EntityTag.\n# Panics\nIf the tag contains invalid characters.",140,{"inputs":[{"name":"entitytag"},{"name":"string"}],"output":{"name":"entitytag"}}],[11,"tag","","Get the tag.",140,{"inputs":[{"name":"entitytag"}],"output":{"name":"str"}}],[11,"set_tag","","Set the tag.\n# Panics\nIf the tag contains invalid characters.",140,null],[11,"strong_eq","","For strong comparison two entity-tags are equivalent if both are not weak and their\nopaque-tags match character-by-character.",140,{"inputs":[{"name":"entitytag"},{"name":"entitytag"}],"output":{"name":"bool"}}],[11,"weak_eq","","For weak comparison two entity-tags are equivalent if their\nopaque-tags match character-by-character, regardless of either or\nboth being tagged as \"weak\".",140,{"inputs":[{"name":"entitytag"},{"name":"entitytag"}],"output":{"name":"bool"}}],[11,"strong_ne","","The inverse of `EntityTag.strong_eq()`.",140,{"inputs":[{"name":"entitytag"},{"name":"entitytag"}],"output":{"name":"bool"}}],[11,"weak_ne","","The inverse of `EntityTag.weak_eq()`.",140,{"inputs":[{"name":"entitytag"},{"name":"entitytag"}],"output":{"name":"bool"}}],[11,"deref","hyper::header::common::etag","",139,{"inputs":[{"name":"etag"}],"output":{"name":"entitytag"}}],[11,"deref_mut","","",139,{"inputs":[{"name":"etag"}],"output":{"name":"entitytag"}}],[11,"header_name","","",139,{"inputs":[{"name":"etag"}],"output":{"name":"str"}}],[11,"parse_header","","",139,null],[11,"fmt_header","","",139,{"inputs":[{"name":"etag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",139,{"inputs":[{"name":"etag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","hyper::header::common::expect","",141,{"inputs":[{"name":"expect"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",141,{"inputs":[{"name":"expect"},{"name":"expect"}],"output":{"name":"bool"}}],[11,"ne","","",141,{"inputs":[{"name":"expect"},{"name":"expect"}],"output":{"name":"bool"}}],[11,"clone","","",141,{"inputs":[{"name":"expect"}],"output":{"name":"expect"}}],[11,"header_name","","",141,{"inputs":[{"name":"expect"}],"output":{"name":"str"}}],[11,"parse_header","","",141,null],[11,"fmt_header","","",141,{"inputs":[{"name":"expect"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","hyper::header::common::expires","",142,{"inputs":[{"name":"expires"},{"name":"expires"}],"output":{"name":"bool"}}],[11,"ne","","",142,{"inputs":[{"name":"expires"},{"name":"expires"}],"output":{"name":"bool"}}],[11,"fmt","","",142,{"inputs":[{"name":"expires"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",142,{"inputs":[{"name":"expires"}],"output":{"name":"expires"}}],[11,"deref","","",142,{"inputs":[{"name":"expires"}],"output":{"name":"httpdate"}}],[11,"deref_mut","","",142,{"inputs":[{"name":"expires"}],"output":{"name":"httpdate"}}],[11,"header_name","","",142,{"inputs":[{"name":"expires"}],"output":{"name":"str"}}],[11,"parse_header","","",142,null],[11,"fmt_header","","",142,{"inputs":[{"name":"expires"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",142,{"inputs":[{"name":"expires"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","hyper::header::common::from","",143,{"inputs":[{"name":"from"},{"name":"from"}],"output":{"name":"bool"}}],[11,"ne","","",143,{"inputs":[{"name":"from"},{"name":"from"}],"output":{"name":"bool"}}],[11,"fmt","","",143,{"inputs":[{"name":"from"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",143,{"inputs":[{"name":"from"}],"output":{"name":"from"}}],[11,"deref","","",143,{"inputs":[{"name":"from"}],"output":{"name":"string"}}],[11,"deref_mut","","",143,{"inputs":[{"name":"from"}],"output":{"name":"string"}}],[11,"header_name","","",143,{"inputs":[{"name":"from"}],"output":{"name":"str"}}],[11,"parse_header","","",143,null],[11,"fmt_header","","",143,{"inputs":[{"name":"from"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",143,{"inputs":[{"name":"from"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","hyper::header::common::host","",144,{"inputs":[{"name":"host"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",144,{"inputs":[{"name":"host"},{"name":"host"}],"output":{"name":"bool"}}],[11,"ne","","",144,{"inputs":[{"name":"host"},{"name":"host"}],"output":{"name":"bool"}}],[11,"clone","","",144,{"inputs":[{"name":"host"}],"output":{"name":"host"}}],[11,"header_name","","",144,{"inputs":[{"name":"host"}],"output":{"name":"str"}}],[11,"parse_header","","",144,null],[11,"fmt_header","","",144,{"inputs":[{"name":"host"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","hyper::header::common::if_match","",145,{"inputs":[{"name":"ifmatch"},{"name":"ifmatch"}],"output":{"name":"bool"}}],[11,"ne","","",145,{"inputs":[{"name":"ifmatch"},{"name":"ifmatch"}],"output":{"name":"bool"}}],[11,"fmt","","",145,{"inputs":[{"name":"ifmatch"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",145,{"inputs":[{"name":"ifmatch"}],"output":{"name":"ifmatch"}}],[11,"header_name","","",145,{"inputs":[{"name":"ifmatch"}],"output":{"name":"str"}}],[11,"parse_header","","",145,null],[11,"fmt_header","","",145,{"inputs":[{"name":"ifmatch"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",145,{"inputs":[{"name":"ifmatch"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","hyper::header::common::if_modified_since","",146,{"inputs":[{"name":"ifmodifiedsince"},{"name":"ifmodifiedsince"}],"output":{"name":"bool"}}],[11,"ne","","",146,{"inputs":[{"name":"ifmodifiedsince"},{"name":"ifmodifiedsince"}],"output":{"name":"bool"}}],[11,"fmt","","",146,{"inputs":[{"name":"ifmodifiedsince"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",146,{"inputs":[{"name":"ifmodifiedsince"}],"output":{"name":"ifmodifiedsince"}}],[11,"deref","","",146,{"inputs":[{"name":"ifmodifiedsince"}],"output":{"name":"httpdate"}}],[11,"deref_mut","","",146,{"inputs":[{"name":"ifmodifiedsince"}],"output":{"name":"httpdate"}}],[11,"header_name","","",146,{"inputs":[{"name":"ifmodifiedsince"}],"output":{"name":"str"}}],[11,"parse_header","","",146,null],[11,"fmt_header","","",146,{"inputs":[{"name":"ifmodifiedsince"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",146,{"inputs":[{"name":"ifmodifiedsince"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","hyper::header::common::if_none_match","",147,{"inputs":[{"name":"ifnonematch"},{"name":"ifnonematch"}],"output":{"name":"bool"}}],[11,"ne","","",147,{"inputs":[{"name":"ifnonematch"},{"name":"ifnonematch"}],"output":{"name":"bool"}}],[11,"fmt","","",147,{"inputs":[{"name":"ifnonematch"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",147,{"inputs":[{"name":"ifnonematch"}],"output":{"name":"ifnonematch"}}],[11,"header_name","","",147,{"inputs":[{"name":"ifnonematch"}],"output":{"name":"str"}}],[11,"parse_header","","",147,null],[11,"fmt_header","","",147,{"inputs":[{"name":"ifnonematch"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",147,{"inputs":[{"name":"ifnonematch"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","hyper::header::common::if_range","",148,{"inputs":[{"name":"ifrange"},{"name":"ifrange"}],"output":{"name":"bool"}}],[11,"ne","","",148,{"inputs":[{"name":"ifrange"},{"name":"ifrange"}],"output":{"name":"bool"}}],[11,"fmt","","",148,{"inputs":[{"name":"ifrange"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",148,{"inputs":[{"name":"ifrange"}],"output":{"name":"ifrange"}}],[11,"header_name","","",148,{"inputs":[{"name":"ifrange"}],"output":{"name":"str"}}],[11,"parse_header","","",148,null],[11,"fmt_header","","",148,{"inputs":[{"name":"ifrange"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",148,{"inputs":[{"name":"ifrange"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","hyper::header::common::if_unmodified_since","",149,{"inputs":[{"name":"ifunmodifiedsince"},{"name":"ifunmodifiedsince"}],"output":{"name":"bool"}}],[11,"ne","","",149,{"inputs":[{"name":"ifunmodifiedsince"},{"name":"ifunmodifiedsince"}],"output":{"name":"bool"}}],[11,"fmt","","",149,{"inputs":[{"name":"ifunmodifiedsince"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",149,{"inputs":[{"name":"ifunmodifiedsince"}],"output":{"name":"ifunmodifiedsince"}}],[11,"deref","","",149,{"inputs":[{"name":"ifunmodifiedsince"}],"output":{"name":"httpdate"}}],[11,"deref_mut","","",149,{"inputs":[{"name":"ifunmodifiedsince"}],"output":{"name":"httpdate"}}],[11,"header_name","","",149,{"inputs":[{"name":"ifunmodifiedsince"}],"output":{"name":"str"}}],[11,"parse_header","","",149,null],[11,"fmt_header","","",149,{"inputs":[{"name":"ifunmodifiedsince"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",149,{"inputs":[{"name":"ifunmodifiedsince"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","hyper::header::common::last_modified","",150,{"inputs":[{"name":"lastmodified"},{"name":"lastmodified"}],"output":{"name":"bool"}}],[11,"ne","","",150,{"inputs":[{"name":"lastmodified"},{"name":"lastmodified"}],"output":{"name":"bool"}}],[11,"fmt","","",150,{"inputs":[{"name":"lastmodified"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",150,{"inputs":[{"name":"lastmodified"}],"output":{"name":"lastmodified"}}],[11,"deref","","",150,{"inputs":[{"name":"lastmodified"}],"output":{"name":"httpdate"}}],[11,"deref_mut","","",150,{"inputs":[{"name":"lastmodified"}],"output":{"name":"httpdate"}}],[11,"header_name","","",150,{"inputs":[{"name":"lastmodified"}],"output":{"name":"str"}}],[11,"parse_header","","",150,null],[11,"fmt_header","","",150,{"inputs":[{"name":"lastmodified"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",150,{"inputs":[{"name":"lastmodified"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","hyper::header::common::location","",151,{"inputs":[{"name":"location"},{"name":"location"}],"output":{"name":"bool"}}],[11,"ne","","",151,{"inputs":[{"name":"location"},{"name":"location"}],"output":{"name":"bool"}}],[11,"fmt","","",151,{"inputs":[{"name":"location"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",151,{"inputs":[{"name":"location"}],"output":{"name":"location"}}],[11,"deref","","",151,{"inputs":[{"name":"location"}],"output":{"name":"string"}}],[11,"deref_mut","","",151,{"inputs":[{"name":"location"}],"output":{"name":"string"}}],[11,"header_name","","",151,{"inputs":[{"name":"location"}],"output":{"name":"str"}}],[11,"parse_header","","",151,null],[11,"fmt_header","","",151,{"inputs":[{"name":"location"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",151,{"inputs":[{"name":"location"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","hyper::header::common::pragma","",152,{"inputs":[{"name":"pragma"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",152,{"inputs":[{"name":"pragma"},{"name":"pragma"}],"output":{"name":"bool"}}],[11,"ne","","",152,{"inputs":[{"name":"pragma"},{"name":"pragma"}],"output":{"name":"bool"}}],[11,"clone","","",152,{"inputs":[{"name":"pragma"}],"output":{"name":"pragma"}}],[11,"header_name","","",152,{"inputs":[{"name":"pragma"}],"output":{"name":"str"}}],[11,"parse_header","","",152,null],[11,"fmt_header","","",152,{"inputs":[{"name":"pragma"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","hyper::header::common::range","",153,{"inputs":[{"name":"range"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",153,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"eq","","",153,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"ne","","",153,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"fmt","","",154,{"inputs":[{"name":"byterangespec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",154,{"inputs":[{"name":"byterangespec"}],"output":{"name":"byterangespec"}}],[11,"eq","","",154,{"inputs":[{"name":"byterangespec"},{"name":"byterangespec"}],"output":{"name":"bool"}}],[11,"ne","","",154,{"inputs":[{"name":"byterangespec"},{"name":"byterangespec"}],"output":{"name":"bool"}}],[11,"bytes","","Get the most common byte range header (\"bytes=from-to\")",153,{"inputs":[{"name":"range"},{"name":"u64"},{"name":"u64"}],"output":{"name":"range"}}],[11,"bytes_multi","","Get byte range header with multiple subranges\n(\"bytes=from1-to1,from2-to2,fromX-toX\")",153,{"inputs":[{"name":"range"},{"name":"vec"}],"output":{"name":"range"}}],[11,"fmt","","",154,{"inputs":[{"name":"byterangespec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",153,{"inputs":[{"name":"range"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",153,{"inputs":[{"name":"range"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",154,{"inputs":[{"name":"byterangespec"},{"name":"str"}],"output":{"name":"result"}}],[11,"header_name","","",153,{"inputs":[{"name":"range"}],"output":{"name":"str"}}],[11,"parse_header","","",153,null],[11,"fmt_header","","",153,{"inputs":[{"name":"range"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","hyper::header::common::referer","",155,{"inputs":[{"name":"referer"},{"name":"referer"}],"output":{"name":"bool"}}],[11,"ne","","",155,{"inputs":[{"name":"referer"},{"name":"referer"}],"output":{"name":"bool"}}],[11,"fmt","","",155,{"inputs":[{"name":"referer"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",155,{"inputs":[{"name":"referer"}],"output":{"name":"referer"}}],[11,"deref","","",155,{"inputs":[{"name":"referer"}],"output":{"name":"string"}}],[11,"deref_mut","","",155,{"inputs":[{"name":"referer"}],"output":{"name":"string"}}],[11,"header_name","","",155,{"inputs":[{"name":"referer"}],"output":{"name":"str"}}],[11,"parse_header","","",155,null],[11,"fmt_header","","",155,{"inputs":[{"name":"referer"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",155,{"inputs":[{"name":"referer"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","hyper::header::common::server","",156,{"inputs":[{"name":"server"},{"name":"server"}],"output":{"name":"bool"}}],[11,"ne","","",156,{"inputs":[{"name":"server"},{"name":"server"}],"output":{"name":"bool"}}],[11,"fmt","","",156,{"inputs":[{"name":"server"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",156,{"inputs":[{"name":"server"}],"output":{"name":"server"}}],[11,"deref","","",156,{"inputs":[{"name":"server"}],"output":{"name":"string"}}],[11,"deref_mut","","",156,{"inputs":[{"name":"server"}],"output":{"name":"string"}}],[11,"header_name","","",156,{"inputs":[{"name":"server"}],"output":{"name":"str"}}],[11,"parse_header","","",156,null],[11,"fmt_header","","",156,{"inputs":[{"name":"server"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",156,{"inputs":[{"name":"server"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","hyper::header::common::set_cookie","",157,{"inputs":[{"name":"setcookie"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",157,{"inputs":[{"name":"setcookie"},{"name":"setcookie"}],"output":{"name":"bool"}}],[11,"ne","","",157,{"inputs":[{"name":"setcookie"},{"name":"setcookie"}],"output":{"name":"bool"}}],[11,"clone","","",157,{"inputs":[{"name":"setcookie"}],"output":{"name":"setcookie"}}],[11,"deref","","",157,{"inputs":[{"name":"setcookie"}],"output":{"name":"vec"}}],[11,"deref_mut","","",157,{"inputs":[{"name":"setcookie"}],"output":{"name":"vec"}}],[11,"header_name","","",157,{"inputs":[{"name":"setcookie"}],"output":{"name":"str"}}],[11,"parse_header","","",157,null],[11,"fmt_header","","",157,{"inputs":[{"name":"setcookie"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_cookie_jar","","Use this to create SetCookie header from CookieJar using\ncalculated delta.",157,{"inputs":[{"name":"setcookie"},{"name":"cookiejar"}],"output":{"name":"setcookie"}}],[11,"apply_to_cookie_jar","","Use this on client to apply changes from SetCookie to CookieJar.\nNote that this will `panic!` if `CookieJar` is not root.",157,null],[11,"fmt","hyper::header::common::strict_transport_security","",158,{"inputs":[{"name":"stricttransportsecurity"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",158,{"inputs":[{"name":"stricttransportsecurity"},{"name":"stricttransportsecurity"}],"output":{"name":"bool"}}],[11,"ne","","",158,{"inputs":[{"name":"stricttransportsecurity"},{"name":"stricttransportsecurity"}],"output":{"name":"bool"}}],[11,"clone","","",158,{"inputs":[{"name":"stricttransportsecurity"}],"output":{"name":"stricttransportsecurity"}}],[11,"including_subdomains","","Create an STS header that includes subdomains",158,{"inputs":[{"name":"stricttransportsecurity"},{"name":"u64"}],"output":{"name":"stricttransportsecurity"}}],[11,"excluding_subdomains","","Create an STS header that excludes subdomains",158,{"inputs":[{"name":"stricttransportsecurity"},{"name":"u64"}],"output":{"name":"stricttransportsecurity"}}],[11,"from_str","","",158,{"inputs":[{"name":"stricttransportsecurity"},{"name":"str"}],"output":{"name":"result"}}],[11,"header_name","","",158,{"inputs":[{"name":"stricttransportsecurity"}],"output":{"name":"str"}}],[11,"parse_header","","",158,null],[11,"fmt_header","","",158,{"inputs":[{"name":"stricttransportsecurity"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","hyper::header::common::transfer_encoding","",159,{"inputs":[{"name":"transferencoding"},{"name":"transferencoding"}],"output":{"name":"bool"}}],[11,"ne","","",159,{"inputs":[{"name":"transferencoding"},{"name":"transferencoding"}],"output":{"name":"bool"}}],[11,"fmt","","",159,{"inputs":[{"name":"transferencoding"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",159,{"inputs":[{"name":"transferencoding"}],"output":{"name":"transferencoding"}}],[11,"deref","","",159,{"inputs":[{"name":"transferencoding"}],"output":{"name":"vec"}}],[11,"deref_mut","","",159,{"inputs":[{"name":"transferencoding"}],"output":{"name":"vec"}}],[11,"header_name","","",159,{"inputs":[{"name":"transferencoding"}],"output":{"name":"str"}}],[11,"parse_header","","",159,null],[11,"fmt_header","","",159,{"inputs":[{"name":"transferencoding"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",159,{"inputs":[{"name":"transferencoding"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","hyper::header::common::upgrade","",160,{"inputs":[{"name":"upgrade"},{"name":"upgrade"}],"output":{"name":"bool"}}],[11,"ne","","",160,{"inputs":[{"name":"upgrade"},{"name":"upgrade"}],"output":{"name":"bool"}}],[11,"fmt","","",160,{"inputs":[{"name":"upgrade"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",160,{"inputs":[{"name":"upgrade"}],"output":{"name":"upgrade"}}],[11,"deref","","",160,{"inputs":[{"name":"upgrade"}],"output":{"name":"vec"}}],[11,"deref_mut","","",160,{"inputs":[{"name":"upgrade"}],"output":{"name":"vec"}}],[11,"header_name","","",160,{"inputs":[{"name":"upgrade"}],"output":{"name":"str"}}],[11,"parse_header","","",160,null],[11,"fmt_header","","",160,{"inputs":[{"name":"upgrade"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",160,{"inputs":[{"name":"upgrade"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",161,{"inputs":[{"name":"protocolname"},{"name":"protocolname"}],"output":{"name":"bool"}}],[11,"ne","","",161,{"inputs":[{"name":"protocolname"},{"name":"protocolname"}],"output":{"name":"bool"}}],[11,"fmt","","",161,{"inputs":[{"name":"protocolname"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",161,{"inputs":[{"name":"protocolname"}],"output":{"name":"protocolname"}}],[11,"from_str","","",161,{"inputs":[{"name":"protocolname"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",161,{"inputs":[{"name":"protocolname"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",162,{"inputs":[{"name":"protocol"},{"name":"protocol"}],"output":{"name":"bool"}}],[11,"ne","","",162,{"inputs":[{"name":"protocol"},{"name":"protocol"}],"output":{"name":"bool"}}],[11,"fmt","","",162,{"inputs":[{"name":"protocol"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",162,{"inputs":[{"name":"protocol"}],"output":{"name":"protocol"}}],[11,"new","","Creates a new Protocol with the given name and version",162,{"inputs":[{"name":"protocol"},{"name":"protocolname"},{"name":"option"}],"output":{"name":"protocol"}}],[11,"from_str","","",162,{"inputs":[{"name":"protocol"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",162,{"inputs":[{"name":"protocol"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","hyper::header::common::user_agent","",163,{"inputs":[{"name":"useragent"},{"name":"useragent"}],"output":{"name":"bool"}}],[11,"ne","","",163,{"inputs":[{"name":"useragent"},{"name":"useragent"}],"output":{"name":"bool"}}],[11,"fmt","","",163,{"inputs":[{"name":"useragent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",163,{"inputs":[{"name":"useragent"}],"output":{"name":"useragent"}}],[11,"deref","","",163,{"inputs":[{"name":"useragent"}],"output":{"name":"string"}}],[11,"deref_mut","","",163,{"inputs":[{"name":"useragent"}],"output":{"name":"string"}}],[11,"header_name","","",163,{"inputs":[{"name":"useragent"}],"output":{"name":"str"}}],[11,"parse_header","","",163,null],[11,"fmt_header","","",163,{"inputs":[{"name":"useragent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",163,{"inputs":[{"name":"useragent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","hyper::header::common::vary","",164,{"inputs":[{"name":"vary"},{"name":"vary"}],"output":{"name":"bool"}}],[11,"ne","","",164,{"inputs":[{"name":"vary"},{"name":"vary"}],"output":{"name":"bool"}}],[11,"fmt","","",164,{"inputs":[{"name":"vary"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",164,{"inputs":[{"name":"vary"}],"output":{"name":"vary"}}],[11,"header_name","","",164,{"inputs":[{"name":"vary"}],"output":{"name":"str"}}],[11,"parse_header","","",164,null],[11,"fmt_header","","",164,{"inputs":[{"name":"vary"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",164,{"inputs":[{"name":"vary"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","hyper::header::internals::cell","",165,{"inputs":[{"name":"optcell"},{"name":"option"}],"output":{"name":"optcell"}}],[11,"set","","",165,null],[11,"get_mut","","",165,{"inputs":[{"name":"optcell"}],"output":{"name":"t"}}],[11,"is_some","core::option","Returns `true` if the option is a `Some` value",166,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"is_none","","Returns `true` if the option is a `None` value",166,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"as_ref","","Converts from `Option<T>` to `Option<&T>`",166,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_mut","","Converts from `Option<T>` to `Option<&mut T>`",166,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_mut_slice","","Converts from `Option<T>` to `&mut [T]` (without copying)",166,null],[11,"expect","","Unwraps an option, yielding the content of a `Some`",166,{"inputs":[{"name":"option"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap","","Moves the value `v` out of the `Option<T>` if it is `Some(v)`.",166,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"unwrap_or","","Returns the contained value or a default.",166,{"inputs":[{"name":"option"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",166,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"t"}}],[11,"map","","Maps an `Option<T>` to `Option<U>` by applying a function to a contained value",166,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",166,{"inputs":[{"name":"option"},{"name":"u"},{"name":"f"}],"output":{"name":"u"}}],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",166,{"inputs":[{"name":"option"},{"name":"d"},{"name":"f"}],"output":{"name":"u"}}],[11,"ok_or","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",166,{"inputs":[{"name":"option"},{"name":"e"}],"output":{"name":"result"}}],[11,"ok_or_else","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",166,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",166,{"inputs":[{"name":"option"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",166,{"inputs":[{"name":"option"}],"output":{"name":"itermut"}}],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",166,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",166,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",166,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",166,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",166,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_slice","","Converts from `Option<T>` to `&[T]` (without copying)",166,null],[11,"cloned","","Maps an `Option<&T>` to an `Option<T>` by cloning the contents of the\noption.",166,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"unwrap_or_default","","Returns the contained value or a default",166,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"default","core::num","",167,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"fmt","","",167,{"inputs":[{"name":"wrapping"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",167,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"cmp","","",167,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",167,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"option"}}],[11,"lt","","",167,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"le","","",167,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"gt","","",167,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ge","","",167,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"eq","","",167,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ne","","",167,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"shl","","",167,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",167,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",167,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",167,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",167,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",167,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",167,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",167,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",167,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",167,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",167,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",167,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",167,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",167,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",167,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",167,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",167,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",167,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",167,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",167,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"add","","",167,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",167,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",167,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",167,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",167,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",167,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",167,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",167,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",167,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",167,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",167,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",167,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",167,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",167,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",167,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",167,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",167,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",167,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",167,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",167,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",167,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",167,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",167,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",167,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",167,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",167,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",167,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",167,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",167,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",167,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",167,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",167,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",167,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",167,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",167,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",167,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",167,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",167,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",167,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",167,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",167,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",167,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",167,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",167,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",167,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",167,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",167,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",167,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",167,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",167,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",167,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",167,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",167,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",167,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",167,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",167,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",167,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",167,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",167,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",167,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",167,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",167,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",167,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",167,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",167,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",167,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",167,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",167,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",167,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",167,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",167,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",167,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",167,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",167,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",167,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",167,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",167,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",167,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",167,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",167,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"eq","core::num::flt2dec::decoder","",168,{"inputs":[{"name":"decoded"},{"name":"decoded"}],"output":{"name":"bool"}}],[11,"ne","","",168,{"inputs":[{"name":"decoded"},{"name":"decoded"}],"output":{"name":"bool"}}],[11,"fmt","","",168,{"inputs":[{"name":"decoded"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",168,{"inputs":[{"name":"decoded"}],"output":{"name":"decoded"}}],[11,"eq","","",169,{"inputs":[{"name":"fulldecoded"},{"name":"fulldecoded"}],"output":{"name":"bool"}}],[11,"ne","","",169,{"inputs":[{"name":"fulldecoded"},{"name":"fulldecoded"}],"output":{"name":"bool"}}],[11,"fmt","","",169,{"inputs":[{"name":"fulldecoded"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",169,{"inputs":[{"name":"fulldecoded"}],"output":{"name":"fulldecoded"}}],[11,"fmt","core::num::flt2dec","",170,{"inputs":[{"name":"part"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",170,{"inputs":[{"name":"part"},{"name":"part"}],"output":{"name":"bool"}}],[11,"ne","","",170,{"inputs":[{"name":"part"},{"name":"part"}],"output":{"name":"bool"}}],[11,"clone","","",170,{"inputs":[{"name":"part"}],"output":{"name":"part"}}],[11,"len","","Returns the exact byte length of given part.",170,{"inputs":[{"name":"part"}],"output":{"name":"usize"}}],[11,"write","","Writes a part into the supplied buffer.\nReturns the number of written bytes, or `None` if the buffer is not enough.\n(It may still leave partially written bytes in the buffer; do not rely on that.)",170,null],[11,"clone","","",171,{"inputs":[{"name":"formatted"}],"output":{"name":"formatted"}}],[11,"len","","Returns the exact byte length of combined formatted result.",171,{"inputs":[{"name":"formatted"}],"output":{"name":"usize"}}],[11,"write","","Writes all formatted parts into the supplied buffer.\nReturns the number of written bytes, or `None` if the buffer is not enough.\n(It may still leave partially written bytes in the buffer; do not rely on that.)",171,null],[11,"fmt","","",172,{"inputs":[{"name":"sign"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",172,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"ne","","",172,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"clone","","",172,{"inputs":[{"name":"sign"}],"output":{"name":"sign"}}],[11,"fmt","core::num::dec2flt::rawfp","",173,{"inputs":[{"name":"unpacked"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",173,{"inputs":[{"name":"unpacked"}],"output":{"name":"unpacked"}}],[11,"new","","",173,{"inputs":[{"name":"unpacked"},{"name":"u64"},{"name":"i16"}],"output":{"name":"unpacked"}}],[11,"fmt","core::num::dec2flt::parse","",174,{"inputs":[{"name":"sign"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",175,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"ne","","",175,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"fmt","","",175,{"inputs":[{"name":"decimal"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",175,null],[11,"eq","","",176,{"inputs":[{"name":"parseresult"},{"name":"parseresult"}],"output":{"name":"bool"}}],[11,"ne","","",176,{"inputs":[{"name":"parseresult"},{"name":"parseresult"}],"output":{"name":"bool"}}],[11,"fmt","","",176,{"inputs":[{"name":"parseresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","core::num::dec2flt","",177,{"inputs":[{"name":"parsefloaterror"},{"name":"parsefloaterror"}],"output":{"name":"bool"}}],[11,"ne","","",177,{"inputs":[{"name":"parsefloaterror"},{"name":"parsefloaterror"}],"output":{"name":"bool"}}],[11,"clone","","",177,{"inputs":[{"name":"parsefloaterror"}],"output":{"name":"parsefloaterror"}}],[11,"fmt","","",177,{"inputs":[{"name":"parsefloaterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",178,{"inputs":[{"name":"floaterrorkind"},{"name":"floaterrorkind"}],"output":{"name":"bool"}}],[11,"ne","","",178,{"inputs":[{"name":"floaterrorkind"},{"name":"floaterrorkind"}],"output":{"name":"bool"}}],[11,"clone","","",178,{"inputs":[{"name":"floaterrorkind"}],"output":{"name":"floaterrorkind"}}],[11,"fmt","","",178,{"inputs":[{"name":"floaterrorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",177,{"inputs":[{"name":"parsefloaterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_small","core::num::bignum","Makes a bignum from one digit.",179,{"inputs":[{"name":"big32x40"},{"name":"u32"}],"output":{"name":"big32x40"}}],[11,"from_u64","","Makes a bignum from `u64` value.",179,{"inputs":[{"name":"big32x40"},{"name":"u64"}],"output":{"name":"big32x40"}}],[11,"digits","","Return the internal digits as a slice `[a, b, c, ...]` such that the numeric\nvalue is `a + b * 2^W + c * 2^(2W) + ...` where `W` is the number of bits in\nthe digit type.",179,null],[11,"get_bit","","Return the `i`-th bit where bit 0 is the least significant one.\nIn other words, the bit with weight `2^i`.",179,{"inputs":[{"name":"big32x40"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"is_zero","","Returns true if the bignum is zero.",179,{"inputs":[{"name":"big32x40"}],"output":{"name":"bool"}}],[11,"bit_length","","Returns the number of bits necessary to represent this value. Note that zero\nis considered to need 0 bits.",179,{"inputs":[{"name":"big32x40"}],"output":{"name":"usize"}}],[11,"add","","Adds `other` to itself and returns its own mutable reference.",179,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"big32x40"}}],[11,"add_small","","",179,{"inputs":[{"name":"big32x40"},{"name":"u32"}],"output":{"name":"big32x40"}}],[11,"sub","","Subtracts `other` from itself and returns its own mutable reference.",179,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"big32x40"}}],[11,"mul_small","","Multiplies itself by a digit-sized `other` and returns its own\nmutable reference.",179,{"inputs":[{"name":"big32x40"},{"name":"u32"}],"output":{"name":"big32x40"}}],[11,"mul_pow2","","Multiplies itself by `2^bits` and returns its own mutable reference.",179,{"inputs":[{"name":"big32x40"},{"name":"usize"}],"output":{"name":"big32x40"}}],[11,"mul_pow5","","Multiplies itself by `5^e` and returns its own mutable reference.",179,{"inputs":[{"name":"big32x40"},{"name":"usize"}],"output":{"name":"big32x40"}}],[11,"mul_digits","","Multiplies itself by a number described by `other[0] + other[1] * 2^W +\nother[2] * 2^(2W) + ...` (where `W` is the number of bits in the digit type)\nand returns its own mutable reference.",179,null],[11,"div_rem_small","","Divides itself by a digit-sized `other` and returns its own\nmutable reference *and* the remainder.",179,null],[11,"div_rem","","Divide self by another bignum, overwriting `q` with the quotient and `r` with the\nremainder.",179,null],[11,"eq","","",179,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",179,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"option"}}],[11,"cmp","","",179,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"ordering"}}],[11,"clone","","",179,{"inputs":[{"name":"big32x40"}],"output":{"name":"big32x40"}}],[11,"fmt","","",179,{"inputs":[{"name":"big32x40"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_small","core::num::bignum::tests","Makes a bignum from one digit.",180,{"inputs":[{"name":"big8x3"},{"name":"u8"}],"output":{"name":"big8x3"}}],[11,"from_u64","","Makes a bignum from `u64` value.",180,{"inputs":[{"name":"big8x3"},{"name":"u64"}],"output":{"name":"big8x3"}}],[11,"digits","","Return the internal digits as a slice `[a, b, c, ...]` such that the numeric\nvalue is `a + b * 2^W + c * 2^(2W) + ...` where `W` is the number of bits in\nthe digit type.",180,null],[11,"get_bit","","Return the `i`-th bit where bit 0 is the least significant one.\nIn other words, the bit with weight `2^i`.",180,{"inputs":[{"name":"big8x3"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"is_zero","","Returns true if the bignum is zero.",180,{"inputs":[{"name":"big8x3"}],"output":{"name":"bool"}}],[11,"bit_length","","Returns the number of bits necessary to represent this value. Note that zero\nis considered to need 0 bits.",180,{"inputs":[{"name":"big8x3"}],"output":{"name":"usize"}}],[11,"add","","Adds `other` to itself and returns its own mutable reference.",180,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"big8x3"}}],[11,"add_small","","",180,{"inputs":[{"name":"big8x3"},{"name":"u8"}],"output":{"name":"big8x3"}}],[11,"sub","","Subtracts `other` from itself and returns its own mutable reference.",180,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"big8x3"}}],[11,"mul_small","","Multiplies itself by a digit-sized `other` and returns its own\nmutable reference.",180,{"inputs":[{"name":"big8x3"},{"name":"u8"}],"output":{"name":"big8x3"}}],[11,"mul_pow2","","Multiplies itself by `2^bits` and returns its own mutable reference.",180,{"inputs":[{"name":"big8x3"},{"name":"usize"}],"output":{"name":"big8x3"}}],[11,"mul_pow5","","Multiplies itself by `5^e` and returns its own mutable reference.",180,{"inputs":[{"name":"big8x3"},{"name":"usize"}],"output":{"name":"big8x3"}}],[11,"mul_digits","","Multiplies itself by a number described by `other[0] + other[1] * 2^W +\nother[2] * 2^(2W) + ...` (where `W` is the number of bits in the digit type)\nand returns its own mutable reference.",180,null],[11,"div_rem_small","","Divides itself by a digit-sized `other` and returns its own\nmutable reference *and* the remainder.",180,null],[11,"div_rem","","Divide self by another bignum, overwriting `q` with the quotient and `r` with the\nremainder.",180,null],[11,"eq","","",180,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",180,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"option"}}],[11,"cmp","","",180,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"ordering"}}],[11,"clone","","",180,{"inputs":[{"name":"big8x3"}],"output":{"name":"big8x3"}}],[11,"fmt","","",180,{"inputs":[{"name":"big8x3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::num::diy_float","",181,{"inputs":[{"name":"fp"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",181,{"inputs":[{"name":"fp"}],"output":{"name":"fp"}}],[11,"mul","","Returns a correctly rounded product of itself and `other`.",181,{"inputs":[{"name":"fp"},{"name":"fp"}],"output":{"name":"fp"}}],[11,"normalize","","Normalizes itself so that the resulting mantissa is at least `2^63`.",181,{"inputs":[{"name":"fp"}],"output":{"name":"fp"}}],[11,"normalize_to","","Normalizes itself to have the shared exponent.\nIt can only decrease the exponent (and thus increase the mantissa).",181,{"inputs":[{"name":"fp"},{"name":"i16"}],"output":{"name":"fp"}}],[11,"fmt","core::num","",182,{"inputs":[{"name":"fpcategory"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",182,{"inputs":[{"name":"fpcategory"},{"name":"fpcategory"}],"output":{"name":"bool"}}],[11,"ne","","",182,{"inputs":[{"name":"fpcategory"},{"name":"fpcategory"}],"output":{"name":"bool"}}],[11,"clone","","",182,{"inputs":[{"name":"fpcategory"}],"output":{"name":"fpcategory"}}],[11,"eq","","",183,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"ne","","",183,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"clone","","",183,{"inputs":[{"name":"parseinterror"}],"output":{"name":"parseinterror"}}],[11,"fmt","","",183,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",184,{"inputs":[{"name":"interrorkind"},{"name":"interrorkind"}],"output":{"name":"bool"}}],[11,"ne","","",184,{"inputs":[{"name":"interrorkind"},{"name":"interrorkind"}],"output":{"name":"bool"}}],[11,"clone","","",184,{"inputs":[{"name":"interrorkind"}],"output":{"name":"interrorkind"}}],[11,"fmt","","",184,{"inputs":[{"name":"interrorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",183,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","core::nonzero","",185,null],[11,"fmt","","",185,{"inputs":[{"name":"nonzero"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",185,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"option"}}],[11,"lt","","",185,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"le","","",185,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"gt","","",185,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"ge","","",185,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"cmp","","",185,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"ordering"}}],[11,"eq","","",185,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"ne","","",185,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"clone","","",185,{"inputs":[{"name":"nonzero"}],"output":{"name":"nonzero"}}],[11,"new","","Creates an instance of NonZero with the provided value.\nYou must indeed ensure that the value is actually \"non-zero\".",185,{"inputs":[{"name":"nonzero"},{"name":"t"}],"output":{"name":"nonzero"}}],[11,"deref","","",185,{"inputs":[{"name":"nonzero"}],"output":{"name":"t"}}],[11,"new","core::ptr","Creates a new `Unique`.",186,null],[11,"get","","Dereferences the content.",186,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"get_mut","","Mutably dereferences the content.",186,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"deref","","",186,null],[11,"fmt","","",186,{"inputs":[{"name":"unique"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `Shared`.",187,null],[11,"clone","","",187,{"inputs":[{"name":"shared"}],"output":{"name":"shared"}}],[11,"deref","","",187,null],[11,"fmt","","",187,{"inputs":[{"name":"shared"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","core::marker","",188,null],[11,"eq","","",188,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",188,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"option"}}],[11,"cmp","","",188,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"ordering"}}],[11,"clone","","",188,{"inputs":[{"name":"phantomdata"}],"output":{"name":"phantomdata"}}],[11,"default","","",188,{"inputs":[{"name":"phantomdata"}],"output":{"name":"phantomdata"}}],[11,"eq","core::ops","",189,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"ne","","",189,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"clone","","",189,{"inputs":[{"name":"rangefull"}],"output":{"name":"rangefull"}}],[11,"fmt","","",189,{"inputs":[{"name":"rangefull"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",72,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"ne","","",72,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"clone","","",72,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"fmt","","",72,{"inputs":[{"name":"range"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",70,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"ne","","",70,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"clone","","",70,{"inputs":[{"name":"rangefrom"}],"output":{"name":"rangefrom"}}],[11,"fmt","","",70,{"inputs":[{"name":"rangefrom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",71,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"ne","","",71,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"clone","","",71,{"inputs":[{"name":"rangeto"}],"output":{"name":"rangeto"}}],[11,"fmt","","",71,{"inputs":[{"name":"rangeto"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::cmp","",190,{"inputs":[{"name":"ordering"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",190,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"ne","","",190,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"clone","","",190,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"reverse","","Reverse the `Ordering`.",190,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"cmp","","",190,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",190,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"option"}}],[11,"fmt","","",191,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",191,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is","","Returns true if the boxed type is the same as `T`",191,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",191,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",191,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",191,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",191,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",191,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"hash","core::any","",192,null],[11,"fmt","","",192,{"inputs":[{"name":"typeid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",192,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"ne","","",192,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"clone","","",192,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",192,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[11,"default","core::sync::atomic","",193,{"inputs":[{"name":"atomicbool"}],"output":{"name":"atomicbool"}}],[11,"default","","",194,{"inputs":[{"name":"atomicisize"}],"output":{"name":"atomicisize"}}],[11,"default","","",195,{"inputs":[{"name":"atomicusize"}],"output":{"name":"atomicusize"}}],[11,"default","","",196,{"inputs":[{"name":"atomicptr"}],"output":{"name":"atomicptr"}}],[11,"clone","","",197,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"new","","Creates a new `AtomicBool`.",193,{"inputs":[{"name":"atomicbool"},{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"load","","Loads a value from the bool.",193,{"inputs":[{"name":"atomicbool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"store","","Stores a value into the bool.",193,null],[11,"swap","","Stores a value into the bool, returning the old value.",193,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_and_swap","","Stores a value into the `bool` if the current value is the same as the `current` value.",193,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_and","","Logical \"and\" with a boolean value.",193,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_nand","","Logical \"nand\" with a boolean value.",193,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_or","","Logical \"or\" with a boolean value.",193,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_xor","","Logical \"xor\" with a boolean value.",193,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `AtomicIsize`.",194,{"inputs":[{"name":"atomicisize"},{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"load","","Loads a value from the isize.",194,{"inputs":[{"name":"atomicisize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"store","","Stores a value into the isize.",194,null],[11,"swap","","Stores a value into the isize, returning the old value.",194,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_and_swap","","Stores a value into the `isize` if the current value is the same as the `current` value.",194,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_add","","Add an isize to the current value, returning the previous value.",194,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_sub","","Subtract an isize from the current value, returning the previous value.",194,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_and","","Bitwise and with the current isize, returning the previous value.",194,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_or","","Bitwise or with the current isize, returning the previous value.",194,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_xor","","Bitwise xor with the current isize, returning the previous value.",194,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"new","","Creates a new `AtomicUsize`.",195,{"inputs":[{"name":"atomicusize"},{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"load","","Loads a value from the usize.",195,{"inputs":[{"name":"atomicusize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"store","","Stores a value into the usize.",195,null],[11,"swap","","Stores a value into the usize, returning the old value.",195,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_and_swap","","Stores a value into the `usize` if the current value is the same as the `current` value.",195,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_add","","Add to the current usize, returning the previous value.",195,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_sub","","Subtract from the current usize, returning the previous value.",195,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_and","","Bitwise and with the current usize, returning the previous value.",195,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_or","","Bitwise or with the current usize, returning the previous value.",195,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_xor","","Bitwise xor with the current usize, returning the previous value.",195,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"new","","Creates a new `AtomicPtr`.",196,null],[11,"load","","Loads a value from the pointer.",196,null],[11,"store","","Stores a value into the pointer.",196,null],[11,"swap","","Stores a value into the pointer, returning the old value.",196,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",196,null],[11,"fmt","","",195,{"inputs":[{"name":"atomicusize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",194,{"inputs":[{"name":"atomicisize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",193,{"inputs":[{"name":"atomicbool"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",196,{"inputs":[{"name":"atomicptr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","core::cell","Creates a new `Cell` containing the given value.",198,{"inputs":[{"name":"cell"},{"name":"t"}],"output":{"name":"cell"}}],[11,"get","","Returns a copy of the contained value.",198,{"inputs":[{"name":"cell"}],"output":{"name":"t"}}],[11,"set","","Sets the contained value.",198,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",198,{"inputs":[{"name":"cell"}],"output":{"name":"unsafecell"}}],[11,"clone","","",198,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"default","","",198,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"eq","","",198,{"inputs":[{"name":"cell"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"fmt","","",199,{"inputs":[{"name":"borrowstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",199,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"ne","","",199,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"clone","","",199,{"inputs":[{"name":"borrowstate"}],"output":{"name":"borrowstate"}}],[11,"new","","Creates a new `RefCell` containing `value`.",200,{"inputs":[{"name":"refcell"},{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",200,{"inputs":[{"name":"refcell"}],"output":{"name":"t"}}],[11,"borrow_state","","Query the current state of this `RefCell`",200,{"inputs":[{"name":"refcell"}],"output":{"name":"borrowstate"}}],[11,"borrow","","Immutably borrows the wrapped value.",200,{"inputs":[{"name":"refcell"}],"output":{"name":"ref"}}],[11,"borrow_mut","","Mutably borrows the wrapped value.",200,{"inputs":[{"name":"refcell"}],"output":{"name":"refmut"}}],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",200,{"inputs":[{"name":"refcell"}],"output":{"name":"unsafecell"}}],[11,"clone","","",200,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"default","","",200,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"eq","","",200,{"inputs":[{"name":"refcell"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"drop","","",201,null],[11,"clone","","",201,{"inputs":[{"name":"borrowref"}],"output":{"name":"borrowref"}}],[11,"deref","","",202,{"inputs":[{"name":"ref"}],"output":{"name":"t"}}],[11,"clone","","Copies a `Ref`.",202,{"inputs":[{"name":"ref"},{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",202,{"inputs":[{"name":"ref"},{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"filter_map","","Make a new `Ref` for an optional component of the borrowed data, e.g. an\nenum variant.",202,{"inputs":[{"name":"ref"},{"name":"ref"},{"name":"f"}],"output":{"name":"option"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum\nvariant.",203,{"inputs":[{"name":"refmut"},{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"filter_map","","Make a new `RefMut` for an optional component of the borrowed data, e.g.\nan enum variant.",203,{"inputs":[{"name":"refmut"},{"name":"refmut"},{"name":"f"}],"output":{"name":"option"}}],[11,"drop","","",204,null],[11,"deref","","",203,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"deref_mut","","",203,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified\nvalue.",205,{"inputs":[{"name":"unsafecell"},{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",205,{"inputs":[{"name":"unsafecell"}],"output":{"name":"t"}}],[11,"get","","Gets a mutable pointer to the wrapped value.",205,null],[11,"clone","core::char","",206,{"inputs":[{"name":"escapeunicode"}],"output":{"name":"escapeunicode"}}],[11,"clone","","",207,{"inputs":[{"name":"escapeunicodestate"}],"output":{"name":"escapeunicodestate"}}],[11,"next","","",206,{"inputs":[{"name":"escapeunicode"}],"output":{"name":"option"}}],[11,"size_hint","","",206,null],[11,"clone","","",208,{"inputs":[{"name":"escapedefault"}],"output":{"name":"escapedefault"}}],[11,"clone","","",209,{"inputs":[{"name":"escapedefaultstate"}],"output":{"name":"escapedefaultstate"}}],[11,"next","","",208,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"size_hint","","",208,null],[11,"clone","core::iter","",210,{"inputs":[{"name":"rev"}],"output":{"name":"rev"}}],[11,"next","","",210,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"size_hint","","",210,null],[11,"next_back","","",210,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"clone","","",211,{"inputs":[{"name":"cloned"}],"output":{"name":"cloned"}}],[11,"next","","",211,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"size_hint","","",211,null],[11,"next_back","","",211,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"clone","","",212,{"inputs":[{"name":"cycle"}],"output":{"name":"cycle"}}],[11,"next","","",212,{"inputs":[{"name":"cycle"}],"output":{"name":"option"}}],[11,"size_hint","","",212,null],[11,"clone","","",213,{"inputs":[{"name":"chain"}],"output":{"name":"chain"}}],[11,"clone","","",214,{"inputs":[{"name":"chainstate"}],"output":{"name":"chainstate"}}],[11,"next","","",213,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"count","","",213,{"inputs":[{"name":"chain"}],"output":{"name":"usize"}}],[11,"nth","","",213,{"inputs":[{"name":"chain"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",213,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"size_hint","","",213,null],[11,"next_back","","",213,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"clone","","",215,{"inputs":[{"name":"zip"}],"output":{"name":"zip"}}],[11,"next","","",215,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",215,null],[11,"next_back","","",215,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"clone","","",216,{"inputs":[{"name":"map"}],"output":{"name":"map"}}],[11,"next","","",216,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"size_hint","","",216,null],[11,"next_back","","",216,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"clone","","",217,{"inputs":[{"name":"filter"}],"output":{"name":"filter"}}],[11,"next","","",217,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"size_hint","","",217,null],[11,"next_back","","",217,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"clone","","",218,{"inputs":[{"name":"filtermap"}],"output":{"name":"filtermap"}}],[11,"next","","",218,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"size_hint","","",218,null],[11,"next_back","","",218,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"clone","","",219,{"inputs":[{"name":"enumerate"}],"output":{"name":"enumerate"}}],[11,"next","","# Overflow Behavior",219,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"size_hint","","",219,null],[11,"nth","","",219,{"inputs":[{"name":"enumerate"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",219,{"inputs":[{"name":"enumerate"}],"output":{"name":"usize"}}],[11,"next_back","","",219,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"clone","","",220,{"inputs":[{"name":"peekable"}],"output":{"name":"peekable"}}],[11,"next","","",220,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"count","","",220,{"inputs":[{"name":"peekable"}],"output":{"name":"usize"}}],[11,"nth","","",220,{"inputs":[{"name":"peekable"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",220,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"size_hint","","",220,null],[11,"peek","","Returns a reference to the next() value without advancing the iterator.",220,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"is_empty","","Checks if the iterator has finished iterating.",220,{"inputs":[{"name":"peekable"}],"output":{"name":"bool"}}],[11,"clone","","",221,{"inputs":[{"name":"skipwhile"}],"output":{"name":"skipwhile"}}],[11,"next","","",221,{"inputs":[{"name":"skipwhile"}],"output":{"name":"option"}}],[11,"size_hint","","",221,null],[11,"clone","","",222,{"inputs":[{"name":"takewhile"}],"output":{"name":"takewhile"}}],[11,"next","","",222,{"inputs":[{"name":"takewhile"}],"output":{"name":"option"}}],[11,"size_hint","","",222,null],[11,"clone","","",223,{"inputs":[{"name":"skip"}],"output":{"name":"skip"}}],[11,"next","","",223,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"nth","","",223,{"inputs":[{"name":"skip"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",223,{"inputs":[{"name":"skip"}],"output":{"name":"usize"}}],[11,"last","","",223,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"size_hint","","",223,null],[11,"clone","","",224,{"inputs":[{"name":"take"}],"output":{"name":"take"}}],[11,"next","","",224,{"inputs":[{"name":"take"}],"output":{"name":"option"}}],[11,"nth","","",224,{"inputs":[{"name":"take"},{"name":"usize"}],"output":{"name":"option"}}],[11,"size_hint","","",224,null],[11,"clone","","",225,{"inputs":[{"name":"scan"}],"output":{"name":"scan"}}],[11,"next","","",225,{"inputs":[{"name":"scan"}],"output":{"name":"option"}}],[11,"size_hint","","",225,null],[11,"clone","","",226,{"inputs":[{"name":"flatmap"}],"output":{"name":"flatmap"}}],[11,"next","","",226,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"size_hint","","",226,null],[11,"next_back","","",226,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"clone","","",227,{"inputs":[{"name":"fuse"}],"output":{"name":"fuse"}}],[11,"next","","",227,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"nth","","",227,{"inputs":[{"name":"fuse"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",227,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"count","","",227,{"inputs":[{"name":"fuse"}],"output":{"name":"usize"}}],[11,"size_hint","","",227,null],[11,"next_back","","",227,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"clone","","",228,{"inputs":[{"name":"inspect"}],"output":{"name":"inspect"}}],[11,"next","","",228,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"size_hint","","",228,null],[11,"next_back","","",228,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"clone","","",229,{"inputs":[{"name":"stepby"}],"output":{"name":"stepby"}}],[11,"step_by","core::ops","Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.",70,{"inputs":[{"name":"rangefrom"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",72,{"inputs":[{"name":"range"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"next","core::iter","",229,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",229,null],[11,"clone","","",230,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"rangeinclusive"}}],[11,"next","","",230,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"size_hint","","",230,null],[11,"next_back","","",230,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"next","","",229,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",229,null],[11,"next","core::ops","",72,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"size_hint","","",72,null],[11,"next_back","","",72,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next","","",70,{"inputs":[{"name":"rangefrom"}],"output":{"name":"option"}}],[11,"clone","core::iter","",231,{"inputs":[{"name":"repeat"}],"output":{"name":"repeat"}}],[11,"next","","",231,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"size_hint","","",231,null],[11,"next_back","","",231,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"next","","",232,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"size_hint","","",232,null],[11,"next_back","","",232,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"len","","",232,{"inputs":[{"name":"empty"}],"output":{"name":"usize"}}],[11,"clone","","",232,{"inputs":[{"name":"empty"}],"output":{"name":"empty"}}],[11,"default","","",232,{"inputs":[{"name":"empty"}],"output":{"name":"empty"}}],[11,"clone","","",233,{"inputs":[{"name":"once"}],"output":{"name":"once"}}],[11,"next","","",233,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"size_hint","","",233,null],[11,"next_back","","",233,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"len","","",233,{"inputs":[{"name":"once"}],"output":{"name":"usize"}}],[11,"hash","core::option","",166,null],[11,"fmt","","",166,{"inputs":[{"name":"option"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",166,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",166,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"lt","","",166,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"le","","",166,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"gt","","",166,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ge","","",166,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"eq","","",166,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ne","","",166,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"clone","","",166,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"default","","",166,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",166,{"inputs":[{"name":"option"}],"output":{"name":"intoiter"}}],[11,"clone","","",234,{"inputs":[{"name":"item"}],"output":{"name":"item"}}],[11,"next","","",234,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"size_hint","","",234,null],[11,"next_back","","",234,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"next","","",235,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",235,null],[11,"next_back","","",235,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",235,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",236,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",236,null],[11,"next_back","","",236,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",237,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"next","","",237,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",237,null],[11,"next_back","","",237,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",166,{"inputs":[{"name":"option"},{"name":"i"}],"output":{"name":"option"}}],[11,"clone","core::raw","",238,{"inputs":[{"name":"slice"}],"output":{"name":"slice"}}],[11,"clone","","",239,{"inputs":[{"name":"traitobject"}],"output":{"name":"traitobject"}}],[11,"hash","core::result","",240,null],[11,"fmt","","",240,{"inputs":[{"name":"result"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",240,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",240,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"option"}}],[11,"lt","","",240,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"le","","",240,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"gt","","",240,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ge","","",240,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"eq","","",240,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ne","","",240,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"clone","","",240,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"is_ok","","Returns true if the result is `Ok`",240,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"is_err","","Returns true if the result is `Err`",240,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"ok","","Converts from `Result<T, E>` to `Option<T>`",240,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"err","","Converts from `Result<T, E>` to `Option<E>`",240,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"as_ref","","Converts from `Result<T, E>` to `Result<&T, &E>`",240,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"as_mut","","Converts from `Result<T, E>` to `Result<&mut T, &mut E>`",240,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"as_slice","","Converts from `Result<T, E>` to `&[T]` (without copying)",240,null],[11,"as_mut_slice","","Converts from `Result<T, E>` to `&mut [T]` (without copying)",240,null],[11,"map","","Maps a `Result<T, E>` to `Result<U, E>` by applying a function to a\ncontained `Ok` value, leaving an `Err` value untouched.",240,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"map_err","","Maps a `Result<T, E>` to `Result<T, F>` by applying a function to a\ncontained `Err` value, leaving an `Ok` value untouched.",240,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",240,{"inputs":[{"name":"result"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",240,{"inputs":[{"name":"result"}],"output":{"name":"itermut"}}],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",240,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",240,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",240,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",240,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",240,{"inputs":[{"name":"result"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",240,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"t"}}],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",240,{"inputs":[{"name":"result"}],"output":{"name":"t"}}],[11,"expect","","Unwraps a result, yielding the content of an `Ok`.",240,{"inputs":[{"name":"result"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",240,{"inputs":[{"name":"result"}],"output":{"name":"e"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",240,{"inputs":[{"name":"result"}],"output":{"name":"intoiter"}}],[11,"next","","",241,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",241,null],[11,"next_back","","",241,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",241,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",242,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",242,null],[11,"next_back","","",242,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",243,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",243,null],[11,"next_back","","",243,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",240,{"inputs":[{"name":"result"},{"name":"i"}],"output":{"name":"result"}}],[11,"fmt","core::simd","",244,{"inputs":[{"name":"i8x16"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",244,{"inputs":[{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"fmt","","",245,{"inputs":[{"name":"i16x8"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",245,{"inputs":[{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"fmt","","",246,{"inputs":[{"name":"i32x4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",246,{"inputs":[{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"fmt","","",247,{"inputs":[{"name":"i64x2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",247,{"inputs":[{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"fmt","","",248,{"inputs":[{"name":"u8x16"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",248,{"inputs":[{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"fmt","","",249,{"inputs":[{"name":"u16x8"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",249,{"inputs":[{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"fmt","","",250,{"inputs":[{"name":"u32x4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",250,{"inputs":[{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"fmt","","",251,{"inputs":[{"name":"u64x2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",251,{"inputs":[{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"fmt","","",252,{"inputs":[{"name":"f32x4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",252,{"inputs":[{"name":"f32x4"}],"output":{"name":"f32x4"}}],[11,"fmt","","",253,{"inputs":[{"name":"f64x2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",253,{"inputs":[{"name":"f64x2"}],"output":{"name":"f64x2"}}],[11,"add","","",248,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"add","","",249,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"add","","",250,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"add","","",251,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"add","","",244,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"add","","",245,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"add","","",246,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"add","","",247,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"add","","",252,{"inputs":[{"name":"f32x4"},{"name":"f32x4"}],"output":{"name":"f32x4"}}],[11,"add","","",253,{"inputs":[{"name":"f64x2"},{"name":"f64x2"}],"output":{"name":"f64x2"}}],[11,"sub","","",248,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"sub","","",249,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"sub","","",250,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"sub","","",251,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"sub","","",244,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"sub","","",245,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"sub","","",246,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"sub","","",247,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"sub","","",252,{"inputs":[{"name":"f32x4"},{"name":"f32x4"}],"output":{"name":"f32x4"}}],[11,"sub","","",253,{"inputs":[{"name":"f64x2"},{"name":"f64x2"}],"output":{"name":"f64x2"}}],[11,"mul","","",248,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"mul","","",249,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"mul","","",250,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"mul","","",251,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"mul","","",244,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"mul","","",245,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"mul","","",246,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"mul","","",247,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"mul","","",252,{"inputs":[{"name":"f32x4"},{"name":"f32x4"}],"output":{"name":"f32x4"}}],[11,"mul","","",253,{"inputs":[{"name":"f64x2"},{"name":"f64x2"}],"output":{"name":"f64x2"}}],[11,"div","","",252,{"inputs":[{"name":"f32x4"},{"name":"f32x4"}],"output":{"name":"f32x4"}}],[11,"div","","",253,{"inputs":[{"name":"f64x2"},{"name":"f64x2"}],"output":{"name":"f64x2"}}],[11,"shl","","",248,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"shl","","",249,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"shl","","",250,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"shl","","",251,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"shl","","",244,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"shl","","",245,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"shl","","",246,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"shl","","",247,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"shr","","",248,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"shr","","",249,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"shr","","",250,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"shr","","",251,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"shr","","",244,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"shr","","",245,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"shr","","",246,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"shr","","",247,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"bitand","","",248,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"bitand","","",249,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"bitand","","",250,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"bitand","","",251,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"bitand","","",244,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"bitand","","",245,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"bitand","","",246,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"bitand","","",247,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"bitor","","",248,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"bitor","","",249,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"bitor","","",250,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"bitor","","",251,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"bitor","","",244,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"bitor","","",245,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"bitor","","",246,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"bitor","","",247,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"bitxor","","",248,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"bitxor","","",249,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"bitxor","","",250,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"bitxor","","",251,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"bitxor","","",244,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"bitxor","","",245,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"bitxor","","",246,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"bitxor","","",247,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"as_slice","core::slice","View the underlying data as a subslice of the original data.",254,null],[11,"next","","",254,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",254,null],[11,"count","","",254,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"nth","","",254,{"inputs":[{"name":"iter"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",254,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next_back","","",254,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",254,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"into_slice","","View the underlying data as a subslice of the original data.",255,null],[11,"next","","",255,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",255,null],[11,"count","","",255,{"inputs":[{"name":"itermut"}],"output":{"name":"usize"}}],[11,"nth","","",255,{"inputs":[{"name":"itermut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",255,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next_back","","",255,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",256,{"inputs":[{"name":"split"}],"output":{"name":"split"}}],[11,"next","","",256,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"size_hint","","",256,null],[11,"next_back","","",256,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"finish","","",256,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"finish","","",257,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"next","","",257,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"size_hint","","",257,null],[11,"next_back","","",257,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"next","","",258,{"inputs":[{"name":"genericsplitn"}],"output":{"name":"option"}}],[11,"size_hint","","",258,null],[11,"next","","",259,{"inputs":[{"name":"splitn"}],"output":{"name":"option"}}],[11,"size_hint","","",259,null],[11,"next","","",260,{"inputs":[{"name":"rsplitn"}],"output":{"name":"option"}}],[11,"size_hint","","",260,null],[11,"next","","",261,{"inputs":[{"name":"splitnmut"}],"output":{"name":"option"}}],[11,"size_hint","","",261,null],[11,"next","","",262,{"inputs":[{"name":"rsplitnmut"}],"output":{"name":"option"}}],[11,"size_hint","","",262,null],[11,"clone","","",263,{"inputs":[{"name":"windows"}],"output":{"name":"windows"}}],[11,"next","","",263,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"size_hint","","",263,null],[11,"count","","",263,{"inputs":[{"name":"windows"}],"output":{"name":"usize"}}],[11,"nth","","",263,{"inputs":[{"name":"windows"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",263,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"next_back","","",263,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"clone","","",264,{"inputs":[{"name":"chunks"}],"output":{"name":"chunks"}}],[11,"next","","",264,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"size_hint","","",264,null],[11,"count","","",264,{"inputs":[{"name":"chunks"}],"output":{"name":"usize"}}],[11,"nth","","",264,{"inputs":[{"name":"chunks"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",264,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"next_back","","",264,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"next","","",265,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"size_hint","","",265,null],[11,"count","","",265,{"inputs":[{"name":"chunksmut"}],"output":{"name":"usize"}}],[11,"nth","","",265,{"inputs":[{"name":"chunksmut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",265,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"next_back","","",265,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"eq","core::str","",266,{"inputs":[{"name":"parseboolerror"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"ne","","",266,{"inputs":[{"name":"parseboolerror"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"clone","","",266,{"inputs":[{"name":"parseboolerror"}],"output":{"name":"parseboolerror"}}],[11,"fmt","","",266,{"inputs":[{"name":"parseboolerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",266,{"inputs":[{"name":"parseboolerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",267,{"inputs":[{"name":"utf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",267,{"inputs":[{"name":"utf8error"}],"output":{"name":"utf8error"}}],[11,"eq","","",267,{"inputs":[{"name":"utf8error"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"ne","","",267,{"inputs":[{"name":"utf8error"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"valid_up_to","","Returns the index in the given string up to which valid UTF-8 was\nverified.",267,{"inputs":[{"name":"utf8error"}],"output":{"name":"usize"}}],[11,"fmt","","",267,{"inputs":[{"name":"utf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",268,{"inputs":[{"name":"chars"}],"output":{"name":"chars"}}],[11,"next","","",268,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"size_hint","","",268,null],[11,"next_back","","",268,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",268,{"inputs":[{"name":"chars"}],"output":{"name":"str"}}],[11,"clone","","",269,{"inputs":[{"name":"charindices"}],"output":{"name":"charindices"}}],[11,"next","","",269,{"inputs":[{"name":"charindices"}],"output":{"name":"option"}}],[11,"size_hint","","",269,null],[11,"next_back","","",269,{"inputs":[{"name":"charindices"}],"output":{"name":"option"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",269,{"inputs":[{"name":"charindices"}],"output":{"name":"str"}}],[11,"clone","","",270,{"inputs":[{"name":"bytes"}],"output":{"name":"bytes"}}],[11,"next","","",270,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"size_hint","","",270,null],[11,"count","","",270,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"last","","",270,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"nth","","",270,{"inputs":[{"name":"bytes"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next_back","","",270,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"len","","",270,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"clone","","",271,{"inputs":[{"name":"splitinternal"}],"output":{"name":"splitinternal"}}],[11,"next","","",272,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"clone","","",272,{"inputs":[{"name":"split"}],"output":{"name":"split"}}],[11,"next","","",273,{"inputs":[{"name":"rsplit"}],"output":{"name":"option"}}],[11,"clone","","",273,{"inputs":[{"name":"rsplit"}],"output":{"name":"rsplit"}}],[11,"next_back","","",272,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"next_back","","",273,{"inputs":[{"name":"rsplit"}],"output":{"name":"option"}}],[11,"next","","",274,{"inputs":[{"name":"splitterminator"}],"output":{"name":"option"}}],[11,"clone","","",274,{"inputs":[{"name":"splitterminator"}],"output":{"name":"splitterminator"}}],[11,"next","","",275,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"option"}}],[11,"clone","","",275,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"rsplitterminator"}}],[11,"next_back","","",274,{"inputs":[{"name":"splitterminator"}],"output":{"name":"option"}}],[11,"next_back","","",275,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"option"}}],[11,"clone","","",276,{"inputs":[{"name":"splitninternal"}],"output":{"name":"splitninternal"}}],[11,"next","","",277,{"inputs":[{"name":"splitn"}],"output":{"name":"option"}}],[11,"clone","","",277,{"inputs":[{"name":"splitn"}],"output":{"name":"splitn"}}],[11,"next","","",278,{"inputs":[{"name":"rsplitn"}],"output":{"name":"option"}}],[11,"clone","","",278,{"inputs":[{"name":"rsplitn"}],"output":{"name":"rsplitn"}}],[11,"clone","","",279,{"inputs":[{"name":"matchindicesinternal"}],"output":{"name":"matchindicesinternal"}}],[11,"next","","",280,{"inputs":[{"name":"matchindices"}],"output":{"name":"option"}}],[11,"clone","","",280,{"inputs":[{"name":"matchindices"}],"output":{"name":"matchindices"}}],[11,"next","","",281,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"option"}}],[11,"clone","","",281,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"rmatchindices"}}],[11,"next_back","","",280,{"inputs":[{"name":"matchindices"}],"output":{"name":"option"}}],[11,"next_back","","",281,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"option"}}],[11,"clone","","",282,{"inputs":[{"name":"matchesinternal"}],"output":{"name":"matchesinternal"}}],[11,"next","","",283,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"clone","","",283,{"inputs":[{"name":"matches"}],"output":{"name":"matches"}}],[11,"next","","",284,{"inputs":[{"name":"rmatches"}],"output":{"name":"option"}}],[11,"clone","","",284,{"inputs":[{"name":"rmatches"}],"output":{"name":"rmatches"}}],[11,"next_back","","",283,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"next_back","","",284,{"inputs":[{"name":"rmatches"}],"output":{"name":"option"}}],[11,"clone","","",285,{"inputs":[{"name":"lines"}],"output":{"name":"lines"}}],[11,"next","","",285,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"size_hint","","",285,null],[11,"next_back","","",285,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"clone","","",286,{"inputs":[{"name":"linesany"}],"output":{"name":"linesany"}}],[11,"clone","","",287,{"inputs":[{"name":"linesanymap"}],"output":{"name":"linesanymap"}}],[11,"call","","",287,null],[11,"call_mut","","",287,null],[11,"call_once","","",287,null],[11,"next","","",286,{"inputs":[{"name":"linesany"}],"output":{"name":"option"}}],[11,"size_hint","","",286,null],[11,"next_back","","",286,{"inputs":[{"name":"linesany"}],"output":{"name":"option"}}],[11,"clone","","",288,{"inputs":[{"name":"charrange"}],"output":{"name":"charrange"}}],[11,"new","core::hash::sip","Creates a new `SipHasher` with the two initial keys set to 0.",289,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",289,{"inputs":[{"name":"siphasher"},{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"write","","",289,null],[11,"finish","","",289,{"inputs":[{"name":"siphasher"}],"output":{"name":"u64"}}],[11,"clone","","",289,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"default","","",289,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"eq","core::fmt::num","",290,{"inputs":[{"name":"binary"},{"name":"binary"}],"output":{"name":"bool"}}],[11,"ne","","",290,{"inputs":[{"name":"binary"},{"name":"binary"}],"output":{"name":"bool"}}],[11,"clone","","",290,{"inputs":[{"name":"binary"}],"output":{"name":"binary"}}],[11,"eq","","",291,{"inputs":[{"name":"octal"},{"name":"octal"}],"output":{"name":"bool"}}],[11,"ne","","",291,{"inputs":[{"name":"octal"},{"name":"octal"}],"output":{"name":"bool"}}],[11,"clone","","",291,{"inputs":[{"name":"octal"}],"output":{"name":"octal"}}],[11,"eq","","",292,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"ne","","",292,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"clone","","",292,{"inputs":[{"name":"decimal"}],"output":{"name":"decimal"}}],[11,"eq","","",293,{"inputs":[{"name":"lowerhex"},{"name":"lowerhex"}],"output":{"name":"bool"}}],[11,"ne","","",293,{"inputs":[{"name":"lowerhex"},{"name":"lowerhex"}],"output":{"name":"bool"}}],[11,"clone","","",293,{"inputs":[{"name":"lowerhex"}],"output":{"name":"lowerhex"}}],[11,"eq","","",294,{"inputs":[{"name":"upperhex"},{"name":"upperhex"}],"output":{"name":"bool"}}],[11,"ne","","",294,{"inputs":[{"name":"upperhex"},{"name":"upperhex"}],"output":{"name":"bool"}}],[11,"clone","","",294,{"inputs":[{"name":"upperhex"}],"output":{"name":"upperhex"}}],[11,"eq","","",295,{"inputs":[{"name":"radix"},{"name":"radix"}],"output":{"name":"bool"}}],[11,"ne","","",295,{"inputs":[{"name":"radix"},{"name":"radix"}],"output":{"name":"bool"}}],[11,"clone","","",295,{"inputs":[{"name":"radix"}],"output":{"name":"radix"}}],[11,"clone","","",296,{"inputs":[{"name":"radixfmt"}],"output":{"name":"radixfmt"}}],[11,"fmt","","",296,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write_str","core::fmt::builders","",297,{"inputs":[{"name":"padadapter"},{"name":"str"}],"output":{"name":"result"}}],[11,"field","","Adds a new field to the generated struct output.",298,{"inputs":[{"name":"debugstruct"},{"name":"str"},{"name":"debug"}],"output":{"name":"debugstruct"}}],[11,"finish","","Finishes output and returns any error encountered.",298,{"inputs":[{"name":"debugstruct"}],"output":{"name":"result"}}],[11,"field","","Adds a new field to the generated tuple struct output.",299,{"inputs":[{"name":"debugtuple"},{"name":"debug"}],"output":{"name":"debugtuple"}}],[11,"finish","","Finishes output and returns any error encountered.",299,{"inputs":[{"name":"debugtuple"}],"output":{"name":"result"}}],[11,"formatter","","Returns the wrapped `Formatter`.",299,{"inputs":[{"name":"debugtuple"}],"output":{"name":"formatter"}}],[11,"finish","","",300,null],[11,"entry","","Adds a new entry to the set output.",301,{"inputs":[{"name":"debugset"},{"name":"debug"}],"output":{"name":"debugset"}}],[11,"entries","","Adds the contents of an iterator of entries to the set output.",301,{"inputs":[{"name":"debugset"},{"name":"i"}],"output":{"name":"debugset"}}],[11,"finish","","Finishes output and returns any error encountered.",301,{"inputs":[{"name":"debugset"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the list output.",302,{"inputs":[{"name":"debuglist"},{"name":"debug"}],"output":{"name":"debuglist"}}],[11,"entries","","Adds the contents of an iterator of entries to the list output.",302,{"inputs":[{"name":"debuglist"},{"name":"i"}],"output":{"name":"debuglist"}}],[11,"finish","","Finishes output and returns any error encountered.",302,{"inputs":[{"name":"debuglist"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the map output.",303,{"inputs":[{"name":"debugmap"},{"name":"debug"},{"name":"debug"}],"output":{"name":"debugmap"}}],[11,"entries","","Adds the contents of an iterator of entries to the map output.",303,{"inputs":[{"name":"debugmap"},{"name":"i"}],"output":{"name":"debugmap"}}],[11,"finish","","Finishes output and returns any error encountered.",303,{"inputs":[{"name":"debugmap"}],"output":{"name":"result"}}],[11,"fmt","core::fmt","",304,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",304,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"clone","","",305,{"inputs":[{"name":"argumentv1"}],"output":{"name":"argumentv1"}}],[11,"clone","","",306,{"inputs":[{"name":"flagv1"}],"output":{"name":"flagv1"}}],[11,"clone","","",307,{"inputs":[{"name":"arguments"}],"output":{"name":"arguments"}}],[11,"fmt","","",307,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",307,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"pad_integral","","Performs the correct padding for an integer which has already been\nemitted into a str. The str should *not* contain the sign for the\ninteger, that will be added by this method.",308,{"inputs":[{"name":"formatter"},{"name":"bool"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",308,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_str","","Writes some data to the underlying buffer contained within this\nformatter.",308,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_fmt","","Writes some formatted information into this instance",308,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"flags","","Flags for formatting (packed version of rt::Flag)",308,{"inputs":[{"name":"formatter"}],"output":{"name":"u32"}}],[11,"fill","","Character used as 'fill' whenever there is alignment",308,{"inputs":[{"name":"formatter"}],"output":{"name":"char"}}],[11,"align","","Flag indicating what form of alignment was requested",308,{"inputs":[{"name":"formatter"}],"output":{"name":"alignment"}}],[11,"width","","Optionally specified integer width that the output should be",308,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"precision","","Optionally specified precision for numeric types",308,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"sign_plus","","Determines if the `+` flag was specified.",308,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"sign_minus","","Determines if the `-` flag was specified.",308,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"alternate","","Determines if the `#` flag was specified.",308,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",308,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"debug_struct","","Creates a `DebugStruct` builder designed to assist with creation of\n`fmt::Debug` implementations for structs.",308,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugstruct"}}],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of\n`fmt::Debug` implementations for tuple structs.",308,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugtuple"}}],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of\n`fmt::Debug` implementations for list-like structures.",308,{"inputs":[{"name":"formatter"}],"output":{"name":"debuglist"}}],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of\n`fmt::Debug` implementations for set-like structures.",308,{"inputs":[{"name":"formatter"}],"output":{"name":"debugset"}}],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of\n`fmt::Debug` implementations for map-like structures.",308,{"inputs":[{"name":"formatter"}],"output":{"name":"debugmap"}}],[11,"write_str","","",308,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",308,{"inputs":[{"name":"formatter"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_fmt","","",308,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"fmt","","",304,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::marker","",188,{"inputs":[{"name":"phantomdata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::cell","",198,{"inputs":[{"name":"cell"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",200,{"inputs":[{"name":"refcell"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",202,{"inputs":[{"name":"ref"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",203,{"inputs":[{"name":"refmut"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","hyper::header::internals::cell","",165,{"inputs":[{"name":"optcell"}],"output":{"name":"option"}}],[11,"clone","","",165,{"inputs":[{"name":"optcell"}],"output":{"name":"optcell"}}],[11,"fmt","","",309,{"inputs":[{"name":"ptrmap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",309,{"inputs":[{"name":"ptrmap"}],"output":{"name":"ptrmap"}}],[11,"new","","",310,{"inputs":[{"name":"ptrmapcell"}],"output":{"name":"ptrmapcell"}}],[11,"get","","",310,{"inputs":[{"name":"ptrmapcell"},{"name":"typeid"}],"output":{"name":"option"}}],[11,"get_mut","","",310,{"inputs":[{"name":"ptrmapcell"},{"name":"typeid"}],"output":{"name":"option"}}],[11,"insert","","",310,null],[11,"one","","",310,{"inputs":[{"name":"ptrmapcell"}],"output":{"name":"v"}}],[11,"clone","","",310,{"inputs":[{"name":"ptrmapcell"}],"output":{"name":"ptrmapcell"}}],[11,"clone","hyper::header::internals::item","",311,{"inputs":[{"name":"item"}],"output":{"name":"item"}}],[11,"new_raw","","",311,{"inputs":[{"name":"item"},{"name":"vec"}],"output":{"name":"item"}}],[11,"new_typed","","",311,{"inputs":[{"name":"item"},{"name":"box"}],"output":{"name":"item"}}],[11,"mut_raw","","",311,{"inputs":[{"name":"item"}],"output":{"name":"vec"}}],[11,"raw","","",311,null],[11,"typed","","",311,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"typed_mut","","",311,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"fmt","","",311,{"inputs":[{"name":"item"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","hyper::header::shared::charset","",312,{"inputs":[{"name":"charset"},{"name":"charset"}],"output":{"name":"bool"}}],[11,"ne","","",312,{"inputs":[{"name":"charset"},{"name":"charset"}],"output":{"name":"bool"}}],[11,"fmt","","",312,{"inputs":[{"name":"charset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",312,{"inputs":[{"name":"charset"}],"output":{"name":"charset"}}],[11,"fmt","","",312,{"inputs":[{"name":"charset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",312,{"inputs":[{"name":"charset"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","hyper::header::shared::encoding","",313,{"inputs":[{"name":"encoding"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",313,{"inputs":[{"name":"encoding"},{"name":"encoding"}],"output":{"name":"bool"}}],[11,"ne","","",313,{"inputs":[{"name":"encoding"},{"name":"encoding"}],"output":{"name":"bool"}}],[11,"clone","","",313,{"inputs":[{"name":"encoding"}],"output":{"name":"encoding"}}],[11,"fmt","","",313,{"inputs":[{"name":"encoding"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",313,{"inputs":[{"name":"encoding"},{"name":"str"}],"output":{"name":"result"}}],[11,"eq","hyper::header::shared::entity","",140,{"inputs":[{"name":"entitytag"},{"name":"entitytag"}],"output":{"name":"bool"}}],[11,"ne","","",140,{"inputs":[{"name":"entitytag"},{"name":"entitytag"}],"output":{"name":"bool"}}],[11,"fmt","","",140,{"inputs":[{"name":"entitytag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",140,{"inputs":[{"name":"entitytag"}],"output":{"name":"entitytag"}}],[11,"fmt","","",140,{"inputs":[{"name":"entitytag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",140,{"inputs":[{"name":"entitytag"},{"name":"str"}],"output":{"name":"result"}}],[11,"cmp","hyper::header::shared::httpdate","",314,{"inputs":[{"name":"httpdate"},{"name":"httpdate"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",314,{"inputs":[{"name":"httpdate"},{"name":"httpdate"}],"output":{"name":"option"}}],[11,"lt","","",314,{"inputs":[{"name":"httpdate"},{"name":"httpdate"}],"output":{"name":"bool"}}],[11,"le","","",314,{"inputs":[{"name":"httpdate"},{"name":"httpdate"}],"output":{"name":"bool"}}],[11,"gt","","",314,{"inputs":[{"name":"httpdate"},{"name":"httpdate"}],"output":{"name":"bool"}}],[11,"ge","","",314,{"inputs":[{"name":"httpdate"},{"name":"httpdate"}],"output":{"name":"bool"}}],[11,"eq","","",314,{"inputs":[{"name":"httpdate"},{"name":"httpdate"}],"output":{"name":"bool"}}],[11,"ne","","",314,{"inputs":[{"name":"httpdate"},{"name":"httpdate"}],"output":{"name":"bool"}}],[11,"fmt","","",314,{"inputs":[{"name":"httpdate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",314,{"inputs":[{"name":"httpdate"}],"output":{"name":"httpdate"}}],[11,"from_str","","",314,{"inputs":[{"name":"httpdate"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",314,{"inputs":[{"name":"httpdate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","hyper::header::shared::quality_item","",315,{"inputs":[{"name":"quality"},{"name":"quality"}],"output":{"name":"option"}}],[11,"lt","","",315,{"inputs":[{"name":"quality"},{"name":"quality"}],"output":{"name":"bool"}}],[11,"le","","",315,{"inputs":[{"name":"quality"},{"name":"quality"}],"output":{"name":"bool"}}],[11,"gt","","",315,{"inputs":[{"name":"quality"},{"name":"quality"}],"output":{"name":"bool"}}],[11,"ge","","",315,{"inputs":[{"name":"quality"},{"name":"quality"}],"output":{"name":"bool"}}],[11,"eq","","",315,{"inputs":[{"name":"quality"},{"name":"quality"}],"output":{"name":"bool"}}],[11,"ne","","",315,{"inputs":[{"name":"quality"},{"name":"quality"}],"output":{"name":"bool"}}],[11,"cmp","","",315,{"inputs":[{"name":"quality"},{"name":"quality"}],"output":{"name":"ordering"}}],[11,"fmt","","",315,{"inputs":[{"name":"quality"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",315,{"inputs":[{"name":"quality"}],"output":{"name":"quality"}}],[11,"fmt","","",315,{"inputs":[{"name":"quality"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",315,{"inputs":[{"name":"quality"}],"output":{"name":"quality"}}],[11,"fmt","","",316,{"inputs":[{"name":"qualityitem"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",316,{"inputs":[{"name":"qualityitem"},{"name":"qualityitem"}],"output":{"name":"bool"}}],[11,"ne","","",316,{"inputs":[{"name":"qualityitem"},{"name":"qualityitem"}],"output":{"name":"bool"}}],[11,"clone","","",316,{"inputs":[{"name":"qualityitem"}],"output":{"name":"qualityitem"}}],[11,"new","","Creates a new `QualityItem` from an item and a quality.\nThe item can be of any type.\nThe quality should be a value in the range [0, 1].",316,{"inputs":[{"name":"qualityitem"},{"name":"t"},{"name":"quality"}],"output":{"name":"qualityitem"}}],[11,"partial_cmp","","",316,{"inputs":[{"name":"qualityitem"},{"name":"qualityitem"}],"output":{"name":"option"}}],[11,"fmt","","",316,{"inputs":[{"name":"qualityitem"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",316,{"inputs":[{"name":"qualityitem"},{"name":"str"}],"output":{"name":"result"}}],[11,"eq","hyper::header::parsing","",317,{"inputs":[{"name":"extendedvalue"},{"name":"extendedvalue"}],"output":{"name":"bool"}}],[11,"ne","","",317,{"inputs":[{"name":"extendedvalue"},{"name":"extendedvalue"}],"output":{"name":"bool"}}],[11,"fmt","","",317,{"inputs":[{"name":"extendedvalue"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",317,{"inputs":[{"name":"extendedvalue"}],"output":{"name":"extendedvalue"}}],[11,"fmt","","",317,{"inputs":[{"name":"extendedvalue"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","alloc::boxed","",101,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"clone","hyper::header","",318,{"inputs":[{"name":"headers"}],"output":{"name":"headers"}}],[11,"new","","Creates a new, empty headers map.",318,{"inputs":[{"name":"headers"}],"output":{"name":"headers"}}],[11,"set","","Set a header field to the corresponding value.",318,null],[11,"get_raw","","Access the raw value of a header.",318,{"inputs":[{"name":"headers"},{"name":"str"}],"output":{"name":"option"}}],[11,"set_raw","","Set the raw value of a header, bypassing any typed headers.",318,null],[11,"remove_raw","","Remove a header set by set_raw",318,null],[11,"get","","Get a reference to the header field's value, if it exists.",318,{"inputs":[{"name":"headers"}],"output":{"name":"option"}}],[11,"get_mut","","Get a mutable reference to the header field's value, if it exists.",318,{"inputs":[{"name":"headers"}],"output":{"name":"option"}}],[11,"has","","Returns a boolean of whether a certain header is in the map.",318,{"inputs":[{"name":"headers"}],"output":{"name":"bool"}}],[11,"remove","","Removes a header from the map, if one existed.\nReturns true if a header has been removed.",318,{"inputs":[{"name":"headers"}],"output":{"name":"bool"}}],[11,"iter","","Returns an iterator over the header fields.",318,{"inputs":[{"name":"headers"}],"output":{"name":"headersitems"}}],[11,"len","","Returns the number of headers in the map.",318,{"inputs":[{"name":"headers"}],"output":{"name":"usize"}}],[11,"clear","","Remove all headers from the map.",318,null],[11,"eq","","",318,{"inputs":[{"name":"headers"},{"name":"headers"}],"output":{"name":"bool"}}],[11,"fmt","","",318,{"inputs":[{"name":"headers"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",318,{"inputs":[{"name":"headers"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",319,{"inputs":[{"name":"headersitems"}],"output":{"name":"option"}}],[11,"is","","Check if a HeaderView is a certain Header.",320,{"inputs":[{"name":"headerview"}],"output":{"name":"bool"}}],[11,"name","","Get the Header name as a slice.",320,{"inputs":[{"name":"headerview"}],"output":{"name":"str"}}],[11,"value","","Cast the value to a certain Header type.",320,{"inputs":[{"name":"headerview"}],"output":{"name":"option"}}],[11,"value_string","","Get just the header value as a String.",320,{"inputs":[{"name":"headerview"}],"output":{"name":"string"}}],[11,"fmt","","",320,{"inputs":[{"name":"headerview"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",320,{"inputs":[{"name":"headerview"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"extend","","",318,null],[11,"from_iter","","",318,{"inputs":[{"name":"headers"},{"name":"i"}],"output":{"name":"headers"}}],[11,"fmt","","",321,{"inputs":[{"name":"headerformatter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",321,{"inputs":[{"name":"headerformatter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",322,{"inputs":[{"name":"cowstr"},{"name":"cowstr"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",322,{"inputs":[{"name":"cowstr"},{"name":"cowstr"}],"output":{"name":"option"}}],[11,"lt","","",322,{"inputs":[{"name":"cowstr"},{"name":"cowstr"}],"output":{"name":"bool"}}],[11,"le","","",322,{"inputs":[{"name":"cowstr"},{"name":"cowstr"}],"output":{"name":"bool"}}],[11,"gt","","",322,{"inputs":[{"name":"cowstr"},{"name":"cowstr"}],"output":{"name":"bool"}}],[11,"ge","","",322,{"inputs":[{"name":"cowstr"},{"name":"cowstr"}],"output":{"name":"bool"}}],[11,"eq","","",322,{"inputs":[{"name":"cowstr"},{"name":"cowstr"}],"output":{"name":"bool"}}],[11,"ne","","",322,{"inputs":[{"name":"cowstr"},{"name":"cowstr"}],"output":{"name":"bool"}}],[11,"hash","","",322,null],[11,"clone","","",322,{"inputs":[{"name":"cowstr"}],"output":{"name":"cowstr"}}],[11,"deref","","",322,{"inputs":[{"name":"cowstr"}],"output":{"name":"cow"}}],[11,"fmt","","",322,{"inputs":[{"name":"cowstr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",322,{"inputs":[{"name":"cowstr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref_mut","","",322,{"inputs":[{"name":"cowstr"}],"output":{"name":"cow"}}],[11,"as_ref","","",322,{"inputs":[{"name":"cowstr"}],"output":{"name":"str"}}],[11,"fmt","hyper::http::h1","",323,{"inputs":[{"name":"wrapper"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",323,{"inputs":[{"name":"wrapper"},{"name":"t"}],"output":{"name":"wrapper"}}],[11,"map_in_place","","",323,null],[11,"into_inner","","",323,{"inputs":[{"name":"wrapper"}],"output":{"name":"t"}}],[11,"as_mut","","",323,{"inputs":[{"name":"wrapper"}],"output":{"name":"t"}}],[11,"as_ref","","",323,{"inputs":[{"name":"wrapper"}],"output":{"name":"t"}}],[11,"fmt","","",324,{"inputs":[{"name":"stream"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",325,{"inputs":[{"name":"http11message"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write","","",325,null],[11,"flush","","",325,{"inputs":[{"name":"http11message"}],"output":{"name":"result"}}],[11,"read","","",325,null],[11,"set_outgoing","","",325,{"inputs":[{"name":"http11message"},{"name":"requesthead"}],"output":{"name":"result"}}],[11,"get_incoming","","",325,{"inputs":[{"name":"http11message"}],"output":{"name":"result"}}],[11,"has_body","","",325,{"inputs":[{"name":"http11message"}],"output":{"name":"bool"}}],[11,"set_read_timeout","","",325,{"inputs":[{"name":"http11message"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_write_timeout","","",325,{"inputs":[{"name":"http11message"},{"name":"option"}],"output":{"name":"result"}}],[11,"close_connection","","",325,{"inputs":[{"name":"http11message"}],"output":{"name":"result"}}],[11,"into_inner","","Consumes the `Http11Message` and returns the underlying `NetworkStream`.",325,{"inputs":[{"name":"http11message"}],"output":{"name":"box"}}],[11,"get_ref","","Gets a mutable reference to the underlying `NetworkStream`, regardless of the state of the\n`Http11Message`.",325,{"inputs":[{"name":"http11message"}],"output":{"name":"networkstream"}}],[11,"get_mut","","Gets a mutable reference to the underlying `NetworkStream`, regardless of the state of the\n`Http11Message`.",325,{"inputs":[{"name":"http11message"}],"output":{"name":"networkstream"}}],[11,"with_stream","","Creates a new `Http11Message` that will use the given `NetworkStream` for communicating to\nthe peer.",325,{"inputs":[{"name":"http11message"},{"name":"box"}],"output":{"name":"http11message"}}],[11,"flush_outgoing","","Flushes the current outgoing content and moves the stream into the `stream` property.",325,{"inputs":[{"name":"http11message"}],"output":{"name":"result"}}],[11,"new_message","","",326,{"inputs":[{"name":"http11protocol"},{"name":"str"},{"name":"u16"},{"name":"str"}],"output":{"name":"result"}}],[11,"with_connector","","Creates a new `Http11Protocol` instance that will use the given `NetworkConnector` for\nestablishing HTTP connections.",326,{"inputs":[{"name":"http11protocol"},{"name":"c"}],"output":{"name":"http11protocol"}}],[11,"connect","","",327,{"inputs":[{"name":"connadapter"},{"name":"str"},{"name":"u16"},{"name":"str"}],"output":{"name":"result"}}],[11,"connect","","",328,{"inputs":[{"name":"connector"},{"name":"str"},{"name":"u16"},{"name":"str"}],"output":{"name":"result"}}],[11,"into_inner","","Unwraps this HttpReader and returns the underlying Reader.",329,{"inputs":[{"name":"httpreader"}],"output":{"name":"r"}}],[11,"get_ref","","Gets a borrowed reference to the underlying Reader.",329,{"inputs":[{"name":"httpreader"}],"output":{"name":"r"}}],[11,"get_mut","","Gets a mutable reference to the underlying Reader.",329,{"inputs":[{"name":"httpreader"}],"output":{"name":"r"}}],[11,"fmt","","",329,{"inputs":[{"name":"httpreader"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"read","","",329,null],[11,"into_inner","","Unwraps the HttpWriter and returns the underlying Writer.",330,{"inputs":[{"name":"httpwriter"}],"output":{"name":"w"}}],[11,"get_ref","","Access the inner Writer.",330,{"inputs":[{"name":"httpwriter"}],"output":{"name":"w"}}],[11,"get_mut","","Access the inner Writer mutably.",330,{"inputs":[{"name":"httpwriter"}],"output":{"name":"w"}}],[11,"end","","Ends the HttpWriter, and returns the underlying Writer.",330,{"inputs":[{"name":"httpwriter"}],"output":{"name":"result"}}],[11,"fmt","","",331,{"inputs":[{"name":"enderror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","std::io::error","",332,{"inputs":[{"name":"error"},{"name":"enderror"}],"output":{"name":"error"}}],[11,"write","hyper::http::h1","",330,null],[11,"flush","","",330,{"inputs":[{"name":"httpwriter"}],"output":{"name":"result"}}],[11,"fmt","","",330,{"inputs":[{"name":"httpwriter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",333,{"inputs":[{"name":"incoming"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","hyper::http::h2","",334,{"inputs":[{"name":"http2stream"}],"output":{"name":"http2stream"}}],[11,"write","","",334,null],[11,"flush","","",334,{"inputs":[{"name":"http2stream"}],"output":{"name":"result"}}],[11,"read","","",334,null],[11,"try_split","","",334,{"inputs":[{"name":"http2stream"}],"output":{"name":"result"}}],[11,"close","","",334,{"inputs":[{"name":"http2stream"}],"output":{"name":"result"}}],[11,"fmt","","",335,{"inputs":[{"name":"http2connecterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",335,{"inputs":[{"name":"http2connecterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",335,{"inputs":[{"name":"http2connecterror"}],"output":{"name":"str"}}],[11,"cause","","",335,{"inputs":[{"name":"http2connecterror"}],"output":{"name":"option"}}],[11,"from","","",335,{"inputs":[{"name":"http2connecterror"},{"name":"error"}],"output":{"name":"http2connecterror"}}],[11,"connect","","Establishes a network connection that can be used by HTTP/2 connections.",336,{"inputs":[{"name":"http2connector"}],"output":{"name":"result"}}],[11,"with_connector","","Create a new `Http2Protocol` that will use the given `NetworkConnector` to establish TCP\nconnections to the server.",337,{"inputs":[{"name":"http2protocol"},{"name":"c"}],"output":{"name":"http2protocol"}}],[11,"new_message","","",337,{"inputs":[{"name":"http2protocol"},{"name":"str"},{"name":"u16"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",338,{"inputs":[{"name":"http2request"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",338,{"inputs":[{"name":"http2request"}],"output":{"name":"http2request"}}],[11,"fmt","","",339,{"inputs":[{"name":"http2response"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",339,{"inputs":[{"name":"http2response"}],"output":{"name":"http2response"}}],[11,"fmt","","",340,{"inputs":[{"name":"http2message"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write","","",340,null],[11,"flush","","",340,{"inputs":[{"name":"http2message"}],"output":{"name":"result"}}],[11,"read","","",340,null],[11,"set_outgoing","","",340,{"inputs":[{"name":"http2message"},{"name":"requesthead"}],"output":{"name":"result"}}],[11,"get_incoming","","",340,{"inputs":[{"name":"http2message"}],"output":{"name":"result"}}],[11,"has_body","","",340,{"inputs":[{"name":"http2message"}],"output":{"name":"bool"}}],[11,"set_read_timeout","","",340,{"inputs":[{"name":"http2message"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_write_timeout","","",340,{"inputs":[{"name":"http2message"},{"name":"option"}],"output":{"name":"result"}}],[11,"close_connection","","",340,{"inputs":[{"name":"http2message"}],"output":{"name":"result"}}],[11,"fmt","hyper::http::message","",341,{"inputs":[{"name":"requesthead"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",341,{"inputs":[{"name":"requesthead"}],"output":{"name":"requesthead"}}],[11,"fmt","","",342,{"inputs":[{"name":"responsehead"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",342,{"inputs":[{"name":"responsehead"}],"output":{"name":"responsehead"}}],[11,"is","","Is the underlying type in this trait object a T?",343,{"inputs":[{"name":"httpmessage"}],"output":{"name":"bool"}}],[11,"downcast_ref","","If the underlying type is T, get a reference to the contained data.",343,{"inputs":[{"name":"httpmessage"}],"output":{"name":"option"}}],[11,"downcast_mut","","If the underlying type is T, get a mutable reference to the contained\ndata.",343,{"inputs":[{"name":"httpmessage"}],"output":{"name":"option"}}],[11,"downcast","","If the underlying type is T, extract it.",343,{"inputs":[{"name":"httpmessage"}],"output":{"name":"result"}}],[11,"fmt","hyper::http","",344,{"inputs":[{"name":"rawstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",344,{"inputs":[{"name":"rawstatus"},{"name":"rawstatus"}],"output":{"name":"bool"}}],[11,"ne","","",344,{"inputs":[{"name":"rawstatus"},{"name":"rawstatus"}],"output":{"name":"bool"}}],[11,"clone","","",344,{"inputs":[{"name":"rawstatus"}],"output":{"name":"rawstatus"}}],[11,"next","hyper::net","",345,{"inputs":[{"name":"networkconnections"}],"output":{"name":"option"}}],[11,"from","alloc::boxed","",101,{"inputs":[{"name":"box"},{"name":"t"}],"output":{"name":"box"}}],[11,"fmt","","",101,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is","","Is the underlying type in this trait object a T?",346,{"inputs":[{"name":"networkstream"}],"output":{"name":"bool"}}],[11,"downcast_ref","","If the underlying type is T, get a reference to the contained data.",346,{"inputs":[{"name":"networkstream"}],"output":{"name":"option"}}],[11,"downcast_mut","","If the underlying type is T, get a mutable reference to the contained\ndata.",346,{"inputs":[{"name":"networkstream"}],"output":{"name":"option"}}],[11,"downcast","","If the underlying type is T, extract it.",346,{"inputs":[{"name":"networkstream"}],"output":{"name":"result"}}],[11,"is","","Is the underlying type in this trait object a T?",346,{"inputs":[{"name":"networkstream"}],"output":{"name":"bool"}}],[11,"downcast_ref","","If the underlying type is T, get a reference to the contained data.",346,{"inputs":[{"name":"networkstream"}],"output":{"name":"option"}}],[11,"downcast_mut","","If the underlying type is T, get a mutable reference to the contained\ndata.",346,{"inputs":[{"name":"networkstream"}],"output":{"name":"option"}}],[11,"downcast","","If the underlying type is T, extract it.",346,{"inputs":[{"name":"networkstream"}],"output":{"name":"result"}}],[11,"clone","hyper::net","",347,{"inputs":[{"name":"httplistener"}],"output":{"name":"httplistener"}}],[11,"from","","",347,{"inputs":[{"name":"httplistener"},{"name":"tcplistener"}],"output":{"name":"httplistener"}}],[11,"new","","Start listening to an address over HTTP.",347,{"inputs":[{"name":"httplistener"},{"name":"to"}],"output":{"name":"result"}}],[11,"accept","","",347,{"inputs":[{"name":"httplistener"}],"output":{"name":"result"}}],[11,"local_addr","","",347,{"inputs":[{"name":"httplistener"}],"output":{"name":"result"}}],[11,"as_raw_fd","","",347,{"inputs":[{"name":"httplistener"}],"output":{"name":"i32"}}],[11,"from_raw_fd","","",347,{"inputs":[{"name":"httplistener"},{"name":"i32"}],"output":{"name":"httplistener"}}],[11,"clone","","",348,{"inputs":[{"name":"httpstream"}],"output":{"name":"httpstream"}}],[11,"fmt","","",348,{"inputs":[{"name":"httpstream"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"read","","",348,null],[11,"write","","",348,null],[11,"flush","","",348,{"inputs":[{"name":"httpstream"}],"output":{"name":"result"}}],[11,"as_raw_fd","","",348,{"inputs":[{"name":"httpstream"}],"output":{"name":"i32"}}],[11,"from_raw_fd","","",348,{"inputs":[{"name":"httpstream"},{"name":"i32"}],"output":{"name":"httpstream"}}],[11,"peer_addr","","",348,{"inputs":[{"name":"httpstream"}],"output":{"name":"result"}}],[11,"set_read_timeout","","",348,{"inputs":[{"name":"httpstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_write_timeout","","",348,{"inputs":[{"name":"httpstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"close","","",348,{"inputs":[{"name":"httpstream"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"default","","",349,{"inputs":[{"name":"httpconnector"}],"output":{"name":"httpconnector"}}],[11,"clone","","",349,{"inputs":[{"name":"httpconnector"}],"output":{"name":"httpconnector"}}],[11,"fmt","","",349,{"inputs":[{"name":"httpconnector"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"connect","","",349,{"inputs":[{"name":"httpconnector"},{"name":"str"},{"name":"u16"},{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",350,{"inputs":[{"name":"httpsstream"}],"output":{"name":"httpsstream"}}],[11,"fmt","","",350,{"inputs":[{"name":"httpsstream"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"read","","",350,null],[11,"write","","",350,null],[11,"flush","","",350,{"inputs":[{"name":"httpsstream"}],"output":{"name":"result"}}],[11,"peer_addr","","",350,{"inputs":[{"name":"httpsstream"}],"output":{"name":"result"}}],[11,"set_read_timeout","","",350,{"inputs":[{"name":"httpsstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_write_timeout","","",350,{"inputs":[{"name":"httpsstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"close","","",350,{"inputs":[{"name":"httpsstream"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"clone","","",351,{"inputs":[{"name":"httpslistener"}],"output":{"name":"httpslistener"}}],[11,"new","","Start listening to an address over HTTPS.",351,{"inputs":[{"name":"httpslistener"},{"name":"to"},{"name":"s"}],"output":{"name":"result"}}],[11,"with_listener","","Construct an HttpsListener from a bound `TcpListener`.",351,{"inputs":[{"name":"httpslistener"},{"name":"httplistener"},{"name":"s"}],"output":{"name":"httpslistener"}}],[11,"accept","","",351,{"inputs":[{"name":"httpslistener"}],"output":{"name":"result"}}],[11,"local_addr","","",351,{"inputs":[{"name":"httpslistener"}],"output":{"name":"result"}}],[11,"default","","",352,{"inputs":[{"name":"httpsconnector"}],"output":{"name":"httpsconnector"}}],[11,"fmt","","",352,{"inputs":[{"name":"httpsconnector"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new connector using the provided SSL implementation.",352,{"inputs":[{"name":"httpsconnector"},{"name":"s"}],"output":{"name":"httpsconnector"}}],[11,"connect","","",352,{"inputs":[{"name":"httpsconnector"},{"name":"str"},{"name":"u16"},{"name":"str"}],"output":{"name":"result"}}],[11,"new","hyper::server::request","Create a new Request, reading the StartLine and Headers so they are\nimmediately useful.",353,{"inputs":[{"name":"request"},{"name":"bufreader"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"set_read_timeout","","Set the read timeout of the underlying NetworkStream.",353,{"inputs":[{"name":"request"},{"name":"option"}],"output":{"name":"result"}}],[11,"downcast_ref","","Get a reference to the underlying `NetworkStream`.",353,{"inputs":[{"name":"request"}],"output":{"name":"option"}}],[11,"ssl","","Get a reference to the underlying Ssl stream, if connected\nover HTTPS.",353,{"inputs":[{"name":"request"}],"output":{"name":"option"}}],[11,"deconstruct","","Deconstruct a Request into its constituent parts.",353,null],[11,"read","","",353,null],[11,"fmt","hyper::server::response","",354,{"inputs":[{"name":"response"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"status","","The status of this response.",354,{"inputs":[{"name":"response"}],"output":{"name":"statuscode"}}],[11,"headers","","The headers of this response.",354,{"inputs":[{"name":"response"}],"output":{"name":"headers"}}],[11,"construct","","Construct a Response from its constituent parts.",354,{"inputs":[{"name":"response"},{"name":"httpversion"},{"name":"httpwriter"},{"name":"statuscode"},{"name":"headers"}],"output":{"name":"response"}}],[11,"deconstruct","","Deconstruct this Response into its constituent parts.",354,null],[11,"new","","Creates a new Response that can be used to write to a network stream.",354,{"inputs":[{"name":"response"},{"name":"write"},{"name":"headers"}],"output":{"name":"response"}}],[11,"send","","Writes the body and ends the response.",354,null],[11,"start","","Consume this Response<Fresh>, writing the Headers and Status and\ncreating a Response<Streaming>",354,{"inputs":[{"name":"response"}],"output":{"name":"result"}}],[11,"status_mut","","Get a mutable reference to the status.",354,{"inputs":[{"name":"response"}],"output":{"name":"statuscode"}}],[11,"headers_mut","","Get a mutable reference to the Headers.",354,{"inputs":[{"name":"response"}],"output":{"name":"headers"}}],[11,"end","","Flushes all writing of a response to the client.",354,{"inputs":[{"name":"response"}],"output":{"name":"result"}}],[11,"write","","",354,null],[11,"flush","","",354,{"inputs":[{"name":"response"}],"output":{"name":"result"}}],[11,"eq","","",355,{"inputs":[{"name":"body"},{"name":"body"}],"output":{"name":"bool"}}],[11,"ne","","",355,{"inputs":[{"name":"body"},{"name":"body"}],"output":{"name":"bool"}}],[11,"drop","","",354,null],[11,"new","hyper::server::listener","Create a thread pool to manage the acceptor.",356,{"inputs":[{"name":"listenerpool"},{"name":"a"}],"output":{"name":"listenerpool"}}],[11,"accept","","Runs the acceptor pool. Blocks until the acceptors are closed.",356,null],[11,"drop","","",357,null],[11,"fmt","hyper::server","",358,{"inputs":[{"name":"server"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",359,{"inputs":[{"name":"timeouts"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",359,{"inputs":[{"name":"timeouts"}],"output":{"name":"timeouts"}}],[11,"default","","",359,{"inputs":[{"name":"timeouts"}],"output":{"name":"timeouts"}}],[11,"new","","Creates a new server with the provided handler.",358,{"inputs":[{"name":"server"},{"name":"l"}],"output":{"name":"server"}}],[11,"keep_alive","","Controls keep-alive for this server.",358,null],[11,"set_read_timeout","","Sets the read timeout for all Request reads.",358,null],[11,"set_write_timeout","","Sets the write timeout for all Response writes.",358,null],[11,"http","","Creates a new server that will handle `HttpStream`s.",358,{"inputs":[{"name":"server"},{"name":"to"}],"output":{"name":"result"}}],[11,"https","","Creates a new server that will handle `HttpStream`s over SSL.",358,{"inputs":[{"name":"server"},{"name":"a"},{"name":"s"}],"output":{"name":"result"}}],[11,"handle","","Binds to a socket and starts handling connections.",358,{"inputs":[{"name":"server"},{"name":"h"}],"output":{"name":"result"}}],[11,"handle_threads","","Binds to a socket and starts handling connections with the provided\nnumber of threads.",358,{"inputs":[{"name":"server"},{"name":"h"},{"name":"usize"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"listening"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",0,null],[11,"hash","hyper::status","",360,null],[11,"fmt","","",360,{"inputs":[{"name":"statuscode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"canonical_reason","","Get the standardised `reason-phrase` for this status code.",360,{"inputs":[{"name":"statuscode"}],"output":{"name":"option"}}],[11,"class","","Determine the class of a status code, based on its first digit.",360,{"inputs":[{"name":"statuscode"}],"output":{"name":"statusclass"}}],[11,"is_informational","","Check if class is Informational.",360,{"inputs":[{"name":"statuscode"}],"output":{"name":"bool"}}],[11,"is_success","","Check if class is Success.",360,{"inputs":[{"name":"statuscode"}],"output":{"name":"bool"}}],[11,"is_redirection","","Check if class is Redirection.",360,{"inputs":[{"name":"statuscode"}],"output":{"name":"bool"}}],[11,"is_client_error","","Check if class is ClientError.",360,{"inputs":[{"name":"statuscode"}],"output":{"name":"bool"}}],[11,"is_server_error","","Check if class is ServerError.",360,{"inputs":[{"name":"statuscode"}],"output":{"name":"bool"}}],[11,"is_strange_status","","Check if class is NoClass",360,{"inputs":[{"name":"statuscode"}],"output":{"name":"bool"}}],[11,"fmt","","",360,{"inputs":[{"name":"statuscode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",360,{"inputs":[{"name":"statuscode"},{"name":"statuscode"}],"output":{"name":"bool"}}],[11,"clone","","",360,{"inputs":[{"name":"statuscode"}],"output":{"name":"statuscode"}}],[11,"partial_cmp","","",360,{"inputs":[{"name":"statuscode"},{"name":"statuscode"}],"output":{"name":"option"}}],[11,"cmp","","",360,{"inputs":[{"name":"statuscode"},{"name":"statuscode"}],"output":{"name":"ordering"}}],[11,"cmp","","",361,{"inputs":[{"name":"statusclass"},{"name":"statusclass"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",361,{"inputs":[{"name":"statusclass"},{"name":"statusclass"}],"output":{"name":"option"}}],[11,"lt","","",361,{"inputs":[{"name":"statusclass"},{"name":"statusclass"}],"output":{"name":"bool"}}],[11,"le","","",361,{"inputs":[{"name":"statusclass"},{"name":"statusclass"}],"output":{"name":"bool"}}],[11,"gt","","",361,{"inputs":[{"name":"statusclass"},{"name":"statusclass"}],"output":{"name":"bool"}}],[11,"ge","","",361,{"inputs":[{"name":"statusclass"},{"name":"statusclass"}],"output":{"name":"bool"}}],[11,"eq","","",361,{"inputs":[{"name":"statusclass"},{"name":"statusclass"}],"output":{"name":"bool"}}],[11,"ne","","",361,{"inputs":[{"name":"statusclass"},{"name":"statusclass"}],"output":{"name":"bool"}}],[11,"clone","","",361,{"inputs":[{"name":"statusclass"}],"output":{"name":"statusclass"}}],[11,"fmt","","",361,{"inputs":[{"name":"statusclass"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default_code","","Get the default status code for the class.",361,{"inputs":[{"name":"statusclass"}],"output":{"name":"statuscode"}}],[11,"clone","hyper::uri","",362,{"inputs":[{"name":"requesturi"}],"output":{"name":"requesturi"}}],[11,"eq","","",362,{"inputs":[{"name":"requesturi"},{"name":"requesturi"}],"output":{"name":"bool"}}],[11,"ne","","",362,{"inputs":[{"name":"requesturi"},{"name":"requesturi"}],"output":{"name":"bool"}}],[11,"fmt","","",362,{"inputs":[{"name":"requesturi"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",362,{"inputs":[{"name":"requesturi"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",362,{"inputs":[{"name":"requesturi"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","hyper::version","",363,{"inputs":[{"name":"httpversion"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",363,null],[11,"cmp","","",363,{"inputs":[{"name":"httpversion"},{"name":"httpversion"}],"output":{"name":"ordering"}}],[11,"clone","","",363,{"inputs":[{"name":"httpversion"}],"output":{"name":"httpversion"}}],[11,"partial_cmp","","",363,{"inputs":[{"name":"httpversion"},{"name":"httpversion"}],"output":{"name":"option"}}],[11,"lt","","",363,{"inputs":[{"name":"httpversion"},{"name":"httpversion"}],"output":{"name":"bool"}}],[11,"le","","",363,{"inputs":[{"name":"httpversion"},{"name":"httpversion"}],"output":{"name":"bool"}}],[11,"gt","","",363,{"inputs":[{"name":"httpversion"},{"name":"httpversion"}],"output":{"name":"bool"}}],[11,"ge","","",363,{"inputs":[{"name":"httpversion"},{"name":"httpversion"}],"output":{"name":"bool"}}],[11,"eq","","",363,{"inputs":[{"name":"httpversion"},{"name":"httpversion"}],"output":{"name":"bool"}}],[11,"ne","","",363,{"inputs":[{"name":"httpversion"},{"name":"httpversion"}],"output":{"name":"bool"}}],[11,"fmt","","",363,{"inputs":[{"name":"httpversion"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Listening","iron","A listening server, which can later be closed.",null,null],[12,"socket","","The socket addresses that the server is bound to.",0,null],[11,"new","typemap","Create a new, empty TypeMap.",364,{"inputs":[{"name":"typemap"}],"output":{"name":"typemap"}}],[11,"custom","","Create a new, empty TypeMap.",364,{"inputs":[{"name":"typemap"}],"output":{"name":"typemap"}}],[11,"insert","","Insert a value into the map with a specified key type.",364,null],[11,"get","","Find a value in the map and get a reference to it.",364,{"inputs":[{"name":"typemap"}],"output":{"name":"option"}}],[11,"get_mut","","Find a value in the map and get a mutable reference to it.",364,{"inputs":[{"name":"typemap"}],"output":{"name":"option"}}],[11,"contains","","Check if a key has an associated value stored in the map.",364,{"inputs":[{"name":"typemap"}],"output":{"name":"bool"}}],[11,"remove","","Remove a value from the map.",364,{"inputs":[{"name":"typemap"}],"output":{"name":"option"}}],[11,"entry","","Get the given key's corresponding entry in the map for in-place manipulation.",364,{"inputs":[{"name":"typemap"}],"output":{"name":"entry"}}],[11,"data","","Read the underlying HashMap",364,{"inputs":[{"name":"typemap"}],"output":{"name":"hashmap"}}],[11,"data_mut","","Get a mutable reference to the underlying HashMap",364,{"inputs":[{"name":"typemap"}],"output":{"name":"hashmap"}}],[11,"len","","Get the number of values stored in the map.",364,{"inputs":[{"name":"typemap"}],"output":{"name":"usize"}}],[11,"is_empty","","Return true if the map contains no values.",364,{"inputs":[{"name":"typemap"}],"output":{"name":"bool"}}],[11,"clear","","Remove all entries from the map.",364,null],[11,"fmt","","",364,{"inputs":[{"name":"typemap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",364,{"inputs":[{"name":"typemap"}],"output":{"name":"typemap"}}],[11,"clone","","",364,{"inputs":[{"name":"typemap"}],"output":{"name":"typemap"}}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns\na mutable reference to the value in the entry.",365,null],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty,\nand returns a mutable reference to the value in the entry.",365,null],[11,"get","","Get a reference to the entry's value.",366,null],[11,"get_mut","","Get a mutable reference to the entry's value.",366,null],[11,"into_mut","","Transform the entry into a mutable reference with the same lifetime as the map.",366,null],[11,"insert","","Set the entry's value and return the previous value.",366,null],[11,"remove","","Move the entry's value out of the map, consuming the entry.",366,null],[11,"insert","","Set the entry's value and return a mutable reference to it.",367,null],[11,"clone","alloc::boxed","",101,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"clone","","",101,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"clone","","",101,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"clone","","",101,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[3,"TypeMap","iron","A map keyed by types.",null,null],[0,"headers","","Headers container, and common header fields.",null,null],[0,"parsing","iron::headers","Utility functions for Header implementations.",null,null],[5,"from_one_raw_str","iron::headers::parsing","Reads a single raw string when parsing a header.",null,null],[5,"from_raw_str","","Reads a raw string into a value.",null,null],[5,"from_comma_delimited","","Reads a comma-delimited raw header into a Vec.",null,null],[5,"from_one_comma_delimited","","Reads a comma-delimited raw string into a Vec.",null,null],[5,"fmt_comma_delimited","","Format an array into a comma-delimited string.",null,null],[3,"ExtendedValue","","An extended header parameter value (i.e., tagged with a character set and optionally,\na language), as defined in [RFC 5987](https://tools.ietf.org/html/rfc5987#section-3.2).",null,null],[12,"charset","","The character set that is used to encode the `value` to a string.",317,null],[12,"language_tag","","The human language details of the `value`, if available.",317,null],[12,"value","","The parameter value, as expressed in octets.",317,null],[5,"parse_extended_value","","Parses extended header parameter values (`ext-value`), as defined in\n[RFC 5987](https://tools.ietf.org/html/rfc5987#section-3.2).",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[8,"Header","iron::headers","A trait for any object that will represent a header field and value.",null,null],[10,"header_name","","Returns the name of the header field this belongs to.",368,{"inputs":[{"name":"header"}],"output":{"name":"str"}}],[10,"parse_header","","Parse a header from a raw stream of bytes.",368,null],[8,"HeaderFormat","","A trait for any object that will represent a header field and value.",null,null],[10,"fmt_header","","Format a header to be output into a TcpStream.",369,{"inputs":[{"name":"headerformat"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Headers","","A map of header fields on requests and responses.",null,null],[3,"HeadersItems","","An `Iterator` over the fields in a `Headers` map.",null,null],[3,"HeaderView","","Returned with the `HeadersItems` iterator.",null,null],[3,"HeaderFormatter","","A wrapper around any Header with a Display impl that calls fmt_header.",null,null],[3,"ContentRange","","`Content-Range` header, defined in\n[RFC7233](http://tools.ietf.org/html/rfc7233#section-4.2)",null,null],[5,"q","","Convenience function to create a `Quality` from a float.",null,{"inputs":[{"name":"f32"}],"output":{"name":"quality"}}],[3,"AccessControlAllowMethods","","`Access-Control-Allow-Methods` header, part of\n[CORS](http://www.w3.org/TR/cors/#access-control-allow-methods-response-header)",null,null],[3,"QualityItem","","Represents an item with a quality value as defined in\n[RFC7231](https://tools.ietf.org/html/rfc7231#section-5.3.1).",null,null],[12,"item","","The actual contents of the field.",316,null],[12,"quality","","The quality (client or server preference) for the value.",316,null],[3,"Authorization","","`Authorization` header, defined in [RFC7235](https://tools.ietf.org/html/rfc7235#section-4.2)",null,null],[4,"ContentRangeSpec","","Content-Range, described in [RFC7233](https://tools.ietf.org/html/rfc7233#section-4.2)",null,null],[13,"Bytes","","Byte range",131,null],[12,"range","iron::headers::ContentRangeSpec","",131,null],[12,"instance_length","","",131,null],[13,"Unregistered","iron::headers","Custom range, with unit not registered at IANA",131,null],[12,"unit","iron::headers::ContentRangeSpec","",131,null],[12,"resp","","",131,null],[4,"IfNoneMatch","iron::headers","`If-None-Match` header, defined in\n[RFC7232](https://tools.ietf.org/html/rfc7232#section-3.2)",null,null],[13,"Any","","Any value is a match",147,null],[13,"Items","","Only the listed items are a match",147,null],[4,"IfMatch","","`If-Match` header, defined in\n[RFC7232](https://tools.ietf.org/html/rfc7232#section-3.1)",null,null],[13,"Any","","Any value is a match",145,null],[13,"Items","","Only the listed items are a match",145,null],[5,"qitem","","Convinience function to wrap a value in a `QualityItem`\nSets `q` to the default 1.0",null,{"inputs":[{"name":"t"}],"output":{"name":"qualityitem"}}],[3,"ContentType","","`Content-Type` header, defined in\n[RFC7231](http://tools.ietf.org/html/rfc7231#section-3.1.1.5)",null,null],[3,"AccessControlRequestHeaders","","`Access-Control-Request-Headers` header, part of\n[CORS](http://www.w3.org/TR/cors/#access-control-request-headers-request-header)",null,null],[3,"HttpDate","","A `time::Time` with HTTP formatting and parsing",null,null],[4,"ProtocolName","","A protocol name used to identify a spefic protocol. Names are case-sensitive\nexcept for the `WebSocket` value.",null,null],[13,"Http","","`HTTP` value, Hypertext Transfer Protocol",161,null],[13,"Tls","","`TLS` value, Transport Layer Security [RFC2817](http://tools.ietf.org/html/rfc2817)",161,null],[13,"WebSocket","","`WebSocket` value, matched case insensitively,Web Socket Protocol\n[RFC6455](http://tools.ietf.org/html/rfc6455)",161,null],[13,"H2c","","`h2c` value, HTTP/2 over cleartext TCP",161,null],[13,"Unregistered","","Any other protocol name not known to hyper",161,null],[3,"SetCookie","","`Set-Cookie` header, defined [RFC6265](http://tools.ietf.org/html/rfc6265#section-4.1)",null,null],[3,"Referer","","`Referer` header, defined in\n[RFC7231](http://tools.ietf.org/html/rfc7231#section-5.5.2)",null,null],[4,"DispositionParam","","A parameter to the disposition type",null,null],[13,"Filename","","A Filename consisting of a Charset, an optional LanguageTag, and finally a sequence of\nbytes representing the filename",125,null],[13,"Ext","","Extension type consisting of token and value.  Recipients should ignore unrecognized\nparameters.",125,null],[11,"new","cookie","",370,{"inputs":[{"name":"cookie"},{"name":"string"},{"name":"string"}],"output":{"name":"cookie"}}],[11,"parse","","",370,{"inputs":[{"name":"cookie"},{"name":"str"}],"output":{"name":"result"}}],[11,"pair","","",370,{"inputs":[{"name":"cookie"}],"output":{"name":"attrval"}}],[11,"new","cookie::jar","Creates a new empty cookie jar with the given signing key.",371,null],[11,"add_original","","Adds an original cookie from a request.",371,null],[11,"add","","Adds a new cookie to this cookie jar.",371,null],[11,"remove","","Removes a cookie from this cookie jar.",371,null],[11,"find","","Finds a cookie inside of this cookie jar.",371,{"inputs":[{"name":"cookiejar"},{"name":"str"}],"output":{"name":"option"}}],[11,"permanent","","Creates a child jar for permanent cookie storage.",371,{"inputs":[{"name":"cookiejar"}],"output":{"name":"cookiejar"}}],[11,"delta","","Calculates the changes that have occurred to this cookie jar over time,\nreturning a vector of `Set-Cookie` headers.",371,{"inputs":[{"name":"cookiejar"}],"output":{"name":"vec"}}],[11,"iter","","Return an iterator over the cookies in this jar.",371,{"inputs":[{"name":"cookiejar"}],"output":{"name":"iter"}}],[11,"next","","",372,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"fmt","cookie","",370,{"inputs":[{"name":"cookie"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",370,{"inputs":[{"name":"cookie"}],"output":{"name":"cookie"}}],[11,"eq","","",370,{"inputs":[{"name":"cookie"},{"name":"cookie"}],"output":{"name":"bool"}}],[11,"ne","","",370,{"inputs":[{"name":"cookie"},{"name":"cookie"}],"output":{"name":"bool"}}],[11,"fmt","","",373,{"inputs":[{"name":"attrval"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",370,{"inputs":[{"name":"cookie"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",370,{"inputs":[{"name":"cookie"},{"name":"str"}],"output":{"name":"result"}}],[3,"Cookie","iron::headers","",null,null],[12,"name","","",370,null],[12,"value","","",370,null],[12,"expires","","",370,null],[12,"max_age","","",370,null],[12,"domain","","",370,null],[12,"path","","",370,null],[12,"secure","","",370,null],[12,"httponly","","",370,null],[12,"custom","","",370,null],[3,"AccessControlAllowHeaders","","`Access-Control-Allow-Headers` header, part of\n[CORS](http://www.w3.org/TR/cors/#access-control-allow-headers-response-header)",null,null],[3,"Host","","The `Host` header.",null,null],[12,"hostname","","The hostname, such a example.domain.",144,null],[12,"port","","An optional port number.",144,null],[3,"Bearer","","Token holder for Bearer Authentication, most often seen with oauth",null,null],[12,"token","","Actual bearer token as a string",118,null],[3,"AccessControlAllowCredentials","","`Access-Control-Allow-Credentials` header, part of\n[CORS](http://www.w3.org/TR/cors/#access-control-allow-headers-response-header)",null,null],[3,"EntityTag","","An entity tag, defined in [RFC7232](https://tools.ietf.org/html/rfc7232#section-2.3)",null,null],[12,"weak","","Weakness indicator for the tag",140,null],[4,"Encoding","","A value to represent an encoding used in `Transfer-Encoding`\nor `Accept-Encoding` header.",null,null],[13,"Chunked","","The `chunked` encoding.",313,null],[13,"Gzip","","The `gzip` encoding.",313,null],[13,"Deflate","","The `deflate` encoding.",313,null],[13,"Compress","","The `compress` encoding.",313,null],[13,"Identity","","The `identity` encoding.",313,null],[13,"EncodingExt","","Some other encoding that is less common, can be any String.",313,null],[3,"CacheControl","","`Cache-Control` header, defined in [RFC7234](https://tools.ietf.org/html/rfc7234#section-5.2)",null,null],[3,"ContentEncoding","","`Content-Encoding` header, defined in\n[RFC7231](http://tools.ietf.org/html/rfc7231#section-3.1.2.2)",null,null],[3,"Expires","","`Expires` header, defined in [RFC7234](http://tools.ietf.org/html/rfc7234#section-5.3)",null,null],[4,"Range","","`Range` header, defined in [RFC7233](https://tools.ietf.org/html/rfc7233#section-3.1)",null,null],[13,"Bytes","","Byte range",153,null],[13,"Unregistered","","Custom range, with unit not registered at IANA\n(`other-range-unit`: String , `other-range-set`: String)",153,null],[3,"Location","","`Location` header, defined in\n[RFC7231](http://tools.ietf.org/html/rfc7231#section-7.1.2)",null,null],[3,"Accept","","`Accept` header, defined in [RFC7231](http://tools.ietf.org/html/rfc7231#section-5.3.2)",null,null],[3,"ContentDisposition","","A `Content-Disposition` header, (re)defined in [RFC6266](https://tools.ietf.org/html/rfc6266)",null,null],[12,"disposition","","The disposition",126,null],[12,"parameters","","Disposition parameters",126,null],[3,"Cookie","","`Cookie` header, defined in [RFC6265](http://tools.ietf.org/html/rfc6265#section-5.4)",null,null],[4,"Expect","","The `Expect` header.",null,null],[13,"Continue","","The value `100-continue`.",141,null],[3,"AcceptCharset","","`Accept-Charset` header, defined in\n[RFC7231](http://tools.ietf.org/html/rfc7231#section-5.3.3)",null,null],[4,"CacheDirective","","CacheControl contains a list of these directives.",null,null],[13,"NoCache","","\"no-cache\"",120,null],[13,"NoStore","","\"no-store\"",120,null],[13,"NoTransform","","\"no-transform\"",120,null],[13,"OnlyIfCached","","\"only-if-cached\"",120,null],[13,"MaxAge","","\"max-age=delta\"",120,null],[13,"MaxStale","","\"max-stale=delta\"",120,null],[13,"MinFresh","","\"min-fresh=delta\"",120,null],[13,"MustRevalidate","","\"must-revalidate\"",120,null],[13,"Public","","\"public\"",120,null],[13,"Private","","\"private\"",120,null],[13,"ProxyRevalidate","","\"proxy-revalidate\"",120,null],[13,"SMaxAge","","\"s-maxage=delta\"",120,null],[13,"Extension","","Extension directives. Optionally include an argument.",120,null],[4,"AccessControlAllowOrigin","","The `Access-Control-Allow-Origin` response header,\npart of [CORS](http://www.w3.org/TR/cors/#access-control-allow-origin-response-header)",null,null],[13,"Any","","Allow all origins",105,null],[13,"Null","","A hidden origin",105,null],[13,"Value","","Allow one particular origin",105,null],[3,"UserAgent","","`User-Agent` header, defined in\n[RFC7231](http://tools.ietf.org/html/rfc7231#section-5.5.3)",null,null],[4,"IfRange","","`If-Range` header, defined in [RFC7233](http://tools.ietf.org/html/rfc7233#section-3.2)",null,null],[13,"EntityTag","","The entity-tag the client has of the resource",148,null],[13,"Date","","The date when the client retrieved the resource",148,null],[4,"Vary","","`Vary` header, defined in [RFC7231](https://tools.ietf.org/html/rfc7231#section-7.1.4)",null,null],[13,"Any","","Any value is a match",164,null],[13,"Items","","Only the listed items are a match",164,null],[3,"ETag","","`ETag` header, defined in [RFC7232](http://tools.ietf.org/html/rfc7232#section-2.3)",null,null],[3,"StrictTransportSecurity","","`StrictTransportSecurity` header, defined in [RFC6797](https://tools.ietf.org/html/rfc6797)",null,null],[12,"include_subdomains","","Signals the UA that the HSTS Policy applies to this HSTS Host as well as\nany subdomains of the host's domain name.",158,null],[12,"max_age","","Specifies the number of seconds, after the reception of the STS header\nfield, during which the UA regards the host (from whom the message was\nreceived) as a Known HSTS Host.",158,null],[3,"From","","`From` header, defined in [RFC7231](http://tools.ietf.org/html/rfc7231#section-5.5.1)",null,null],[3,"Protocol","","Protocols that appear in the `Upgrade` header field",null,null],[12,"name","","The protocol identifier",162,null],[12,"version","","The optional version of the protocol, often in the format \"DIGIT.DIGIT\" (e.g.. \"1.2\")",162,null],[3,"AccessControlMaxAge","","`Access-Control-Max-Age` header, part of\n[CORS](http://www.w3.org/TR/cors/#access-control-max-age-response-header)",null,null],[3,"ContentLength","","`Content-Length` header, defined in\n[RFC7230](http://tools.ietf.org/html/rfc7230#section-3.3.2)",null,null],[3,"Basic","","Credential holder for Basic Authentication",null,null],[12,"username","","The username as a possibly empty string",117,null],[12,"password","","The password. `None` if the `:` delimiter character was not\npart of the parsed input.",117,null],[4,"Pragma","","The `Pragma` header defined by HTTP/1.0.",null,null],[13,"NoCache","","Corresponds to the `no-cache` value.",152,null],[13,"Ext","","Every value other than `no-cache`.",152,null],[3,"Quality","","Represents a quality used in quality values.",null,null],[3,"AcceptLanguage","","`Accept-Language` header, defined in\n[RFC7231](http://tools.ietf.org/html/rfc7231#section-5.3.5)",null,null],[3,"LastModified","","`Last-Modified` header, defined in\n[RFC7232](http://tools.ietf.org/html/rfc7232#section-2.2)",null,null],[3,"AccessControlRequestMethod","","`Access-Control-Request-Method` header, part of\n[CORS](http://www.w3.org/TR/cors/#access-control-request-method-request-header)",null,null],[3,"AccessControlExposeHeaders","","`Access-Control-Expose-Headers` header, part of\n[CORS](http://www.w3.org/TR/cors/#access-control-expose-headers-response-header)",null,null],[4,"DispositionType","","The implied disposition of the content of the HTTP body",null,null],[13,"Inline","","Inline implies default processing",124,null],[13,"Attachment","","Attachment implies that the recipient should prompt the user to save the response locally,\nrather than process it normally (as per its media type).",124,null],[13,"Ext","","Extension type.  Should be handled by recipients the same way as Attachment",124,null],[3,"IfModifiedSince","","`If-Modified-Since` header, defined in\n[RFC7232](http://tools.ietf.org/html/rfc7232#section-3.3)",null,null],[3,"AcceptRanges","","`Accept-Ranges` header, defined in\n[RFC7233](http://tools.ietf.org/html/rfc7233#section-2.3)",null,null],[3,"TransferEncoding","","`Transfer-Encoding` header, defined in\n[RFC7230](http://tools.ietf.org/html/rfc7230#section-3.3.1)",null,null],[3,"Allow","","`Allow` header, defined in [RFC7231](http://tools.ietf.org/html/rfc7231#section-7.4.1)",null,null],[4,"Charset","","A Mime charset.",null,null],[13,"Us_Ascii","","US ASCII",312,null],[13,"Iso_8859_1","","ISO-8859-1",312,null],[13,"Iso_8859_2","","ISO-8859-2",312,null],[13,"Iso_8859_3","","ISO-8859-3",312,null],[13,"Iso_8859_4","","ISO-8859-4",312,null],[13,"Iso_8859_5","","ISO-8859-5",312,null],[13,"Iso_8859_6","","ISO-8859-6",312,null],[13,"Iso_8859_7","","ISO-8859-7",312,null],[13,"Iso_8859_8","","ISO-8859-8",312,null],[13,"Iso_8859_9","","ISO-8859-9",312,null],[13,"Iso_8859_10","","ISO-8859-10",312,null],[13,"Shift_Jis","","Shift_JIS",312,null],[13,"Euc_Jp","","EUC-JP",312,null],[13,"Iso_2022_Kr","","ISO-2022-KR",312,null],[13,"Euc_Kr","","EUC-KR",312,null],[13,"Iso_2022_Jp","","ISO-2022-JP",312,null],[13,"Iso_2022_Jp_2","","ISO-2022-JP-2",312,null],[13,"Iso_8859_6_E","","ISO-8859-6-E",312,null],[13,"Iso_8859_6_I","","ISO-8859-6-I",312,null],[13,"Iso_8859_8_E","","ISO-8859-8-E",312,null],[13,"Iso_8859_8_I","","ISO-8859-8-I",312,null],[13,"Gb2312","","GB2312",312,null],[13,"Big5","","Big5",312,null],[13,"Koi8_R","","KOI8-R",312,null],[13,"Ext","","An arbitrary charset specified as a string",312,null],[3,"Connection","","`Connection` header, defined in\n[RFC7230](http://tools.ietf.org/html/rfc7230#section-6.1)",null,null],[4,"ConnectionOption","","Values that can be in the `Connection` header.",null,null],[13,"KeepAlive","","The `keep-alive` connection value.",122,null],[13,"Close","","The `close` connection value.",122,null],[13,"ConnectionHeader","","Values in the Connection header that are supposed to be names of other Headers.",122,null],[4,"ByteRangeSpec","","Each Range::Bytes header can contain one or more ByteRangeSpecs.\nEach ByteRangeSpec defines a range of bytes to fetch",null,null],[13,"FromTo","","Get all bytes between x and y (\"x-y\")",154,null],[13,"AllFrom","","Get all bytes starting from x (\"x-\")",154,null],[13,"Last","","Get last x bytes (\"-x\")",154,null],[8,"Scheme","","An Authorization scheme to be used in the header.",null,null],[10,"scheme","","An optional Scheme name.",374,{"inputs":[{"name":"scheme"}],"output":{"name":"option"}}],[10,"fmt_scheme","","Format the Scheme data into a header value.",374,{"inputs":[{"name":"scheme"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Upgrade","","`Upgrade` header, defined in [RFC7230](http://tools.ietf.org/html/rfc7230#section-6.7)",null,null],[3,"CookieJar","","A jar of cookies for managing a session",null,null],[3,"ContentLanguage","","`Content-Language` header, defined in\n[RFC7231](https://tools.ietf.org/html/rfc7231#section-3.1.3.2)",null,null],[3,"AcceptEncoding","","`Accept-Encoding` header, defined in\n[RFC7231](http://tools.ietf.org/html/rfc7231#section-5.3.4)",null,null],[3,"Server","","`Server` header, defined in [RFC7231](http://tools.ietf.org/html/rfc7231#section-7.4.2)",null,null],[3,"Date","","`Date` header, defined in [RFC7231](http://tools.ietf.org/html/rfc7231#section-7.1.1.2)",null,null],[3,"IfUnmodifiedSince","","`If-Unmodified-Since` header, defined in\n[RFC7232](http://tools.ietf.org/html/rfc7232#section-3.4)",null,null],[4,"RangeUnit","","Range Units, described in [RFC7233](http://tools.ietf.org/html/rfc7233#section-2)",null,null],[13,"Bytes","","Indicating byte-range requests are supported.",114,null],[13,"None","","Reserved as keyword, indicating no ranges are supported.",114,null],[13,"Unregistered","","The given range unit is not registered at IANA.",114,null],[3,"Headers","iron","A map of header fields on requests and responses.",null,null],[8,"Plugin","","An interface for plugins that cache values between calls.",null,null],[11,"get","","Return a copy of the plugin's produced value.",375,{"inputs":[{"name":"plugin"}],"output":{"name":"result"}}],[11,"get_ref","","Return a reference to the plugin's produced value.",375,{"inputs":[{"name":"plugin"}],"output":{"name":"result"}}],[11,"get_mut","","Return a mutable reference to the plugin's produced value.",375,{"inputs":[{"name":"plugin"}],"output":{"name":"result"}}],[11,"compute","","Create and evaluate a once-off instance of a plugin.",375,{"inputs":[{"name":"plugin"}],"output":{"name":"result"}}],[8,"Set","","A trait providing the set and set_mut methods for all types.",null,null],[11,"set","","Modify self using the provided modifier.",376,{"inputs":[{"name":"set"},{"name":"m"}],"output":{"name":"self"}}],[11,"set_mut","","Modify self through a mutable reference with the provided modifier.",376,{"inputs":[{"name":"set"},{"name":"m"}],"output":{"name":"self"}}],[8,"Error","","An extension to std::error::Error which provides dynamic downcasting of\nerrors for use in highly generic contexts.",null,null],[0,"mime","","Re-exporting the mime crate, for convenience.",null,null],[3,"Mime","iron::mime","Mime, or Media Type. Encapsulates common registers types.",null,null],[6,"Param","","",null,null],[4,"TopLevel","","",null,null],[13,"Star","","",134,null],[13,"Text","","",134,null],[13,"Image","","",134,null],[13,"Audio","","",134,null],[13,"Video","","",134,null],[13,"Application","","",134,null],[13,"Multipart","","",134,null],[13,"Message","","",134,null],[13,"Model","","",134,null],[13,"Ext","","",134,null],[4,"Value","","",null,null],[13,"Utf8","","",137,null],[13,"Ext","","",137,null],[4,"Attr","","",null,null],[13,"Charset","","",136,null],[13,"Boundary","","",136,null],[13,"Q","","",136,null],[13,"Ext","","",136,null],[4,"SubLevel","","",null,null],[13,"Star","","",135,null],[13,"Plain","","",135,null],[13,"Html","","",135,null],[13,"Xml","","",135,null],[13,"Javascript","","",135,null],[13,"Css","","",135,null],[13,"EventStream","","",135,null],[13,"Json","","",135,null],[13,"WwwFormUrlEncoded","","",135,null],[13,"Msgpack","","",135,null],[13,"FormData","","",135,null],[13,"Png","","",135,null],[13,"Gif","","",135,null],[13,"Bmp","","",135,null],[13,"Jpeg","","",135,null],[13,"Ext","","",135,null],[3,"Url","iron","HTTP/HTTPS URL type for Iron.",null,null],[12,"scheme","","The lower-cased scheme of the URL, typically \"http\" or \"https\".",377,null],[12,"host","","The host field of the URL, probably a domain.",377,null],[12,"port","","The connection port.",377,null],[12,"path","","The URL path, the resource to be accessed.",377,null],[12,"username","","The URL username field, from the userinfo section of the URL.",377,null],[12,"password","","The URL password field, from the userinfo section of the URL.",377,null],[12,"query","","The URL query string.",377,null],[12,"fragment","","The URL fragment.",377,null],[3,"Iron","","The primary entrance point to `Iron`, a `struct` to instantiate a new server.",null,null],[12,"handler","","Iron contains a `Handler`, which it uses to create responses for client\nrequests.",378,null],[3,"Timeouts","","A settings struct containing a set of timeouts which can be applied to a server.",null,null],[12,"keep_alive","","Controls the timeout for keep alive connections.",379,null],[12,"read","","Controls the timeout for reads on existing connections.",379,null],[12,"write","","Controls the timeout for writes on existing conncetions.",379,null],[4,"Protocol","","Protocol used to serve content. Future versions of Iron may add new protocols\nto this enum. Thus you should not exhaustively match on its variants.",null,null],[13,"Http","","Plaintext HTTP/1",380,null],[0,"error","","Iron's error type and associated utilities.",null,null],[8,"Error","iron::error","An extension to std::error::Error which provides dynamic downcasting of\nerrors for use in highly generic contexts.",null,null],[4,"HttpError","","A set of errors that can occur parsing HTTP streams.",null,null],[13,"Method","","An invalid `Method`, such as `GE,T`.",15,null],[13,"Uri","","An invalid `RequestUri`, such as `exam ple.domain`.",15,null],[13,"Version","","An invalid `HttpVersion`, such as `HTP/1.1`",15,null],[13,"Header","","An invalid `Header`.",15,null],[13,"TooLarge","","A message head is too large to be reasonable.",15,null],[13,"Status","","An invalid `Status`, such as `1337 ELITE`.",15,null],[13,"Io","","An `io::Error` that occurred while trying to read or write to a network stream.",15,null],[13,"Ssl","","An error from a SSL library.",15,null],[13,"Http2","","An HTTP/2-specific error, coming from the `solicit` library.",15,null],[13,"Utf8","","Parsing a field as string failed",15,null],[6,"HttpResult","","",null,null],[3,"IronError","","The type of Errors inside and when using Iron.",null,null],[12,"error","","The underlying error",381,null],[12,"response","","What to do about this error.",381,null],[11,"fmt","","",381,{"inputs":[{"name":"ironerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new IronError from an error and a modifier.",381,{"inputs":[{"name":"ironerror"},{"name":"e"},{"name":"m"}],"output":{"name":"ironerror"}}],[11,"fmt","","",381,{"inputs":[{"name":"ironerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",381,{"inputs":[{"name":"ironerror"}],"output":{"name":"str"}}],[11,"cause","","",381,{"inputs":[{"name":"ironerror"}],"output":{"name":"option"}}],[0,"prelude","iron","A module meant to be glob imported when using Iron.",null,null],[8,"Set","iron::prelude","A trait providing the set and set_mut methods for all types.",null,null],[11,"set","","Modify self using the provided modifier.",376,{"inputs":[{"name":"set"},{"name":"m"}],"output":{"name":"self"}}],[11,"set_mut","","Modify self through a mutable reference with the provided modifier.",376,{"inputs":[{"name":"set"},{"name":"m"}],"output":{"name":"self"}}],[8,"Pluggable","","An interface for plugins that cache values between calls.",null,null],[11,"get","","Return a copy of the plugin's produced value.",375,{"inputs":[{"name":"pluggable"}],"output":{"name":"result"}}],[11,"get_ref","","Return a reference to the plugin's produced value.",375,{"inputs":[{"name":"pluggable"}],"output":{"name":"result"}}],[11,"get_mut","","Return a mutable reference to the plugin's produced value.",375,{"inputs":[{"name":"pluggable"}],"output":{"name":"result"}}],[11,"compute","","Create and evaluate a once-off instance of a plugin.",375,{"inputs":[{"name":"pluggable"}],"output":{"name":"result"}}],[3,"Iron","","The primary entrance point to `Iron`, a `struct` to instantiate a new server.",null,null],[12,"handler","","Iron contains a `Handler`, which it uses to create responses for client\nrequests.",378,null],[0,"typemap","iron","Re-exports from the TypeMap crate.",null,null],[3,"TypeMap","iron::typemap","A map keyed by types.",null,null],[8,"Key","","This trait defines the relationship between keys and values in a TypeMap.",null,null],[16,"Value","","The value type associated with this key type.",382,null],[0,"modifier","iron","Re-exports from the Modifier crate.",null,null],[0,"status","","Status Codes",null,null],[4,"Status","iron::status","An HTTP status code (`status-code` in RFC 7230 et al.).",null,null],[13,"Continue","","100 Continue\n[[RFC7231, Section 6.2.1](https://tools.ietf.org/html/rfc7231#section-6.2.1)]",360,null],[13,"SwitchingProtocols","","101 Switching Protocols\n[[RFC7231, Section 6.2.2](https://tools.ietf.org/html/rfc7231#section-6.2.2)]",360,null],[13,"Processing","","102 Processing\n[[RFC2518](https://tools.ietf.org/html/rfc2518)]",360,null],[13,"Ok","","200 OK\n[[RFC7231, Section 6.3.1](https://tools.ietf.org/html/rfc7231#section-6.3.1)]",360,null],[13,"Created","","201 Created\n[[RFC7231, Section 6.3.2](https://tools.ietf.org/html/rfc7231#section-6.3.2)]",360,null],[13,"Accepted","","202 Accepted\n[[RFC7231, Section 6.3.3](https://tools.ietf.org/html/rfc7231#section-6.3.3)]",360,null],[13,"NonAuthoritativeInformation","","203 Non-Authoritative Information\n[[RFC7231, Section 6.3.4](https://tools.ietf.org/html/rfc7231#section-6.3.4)]",360,null],[13,"NoContent","","204 No Content\n[[RFC7231, Section 6.3.5](https://tools.ietf.org/html/rfc7231#section-6.3.5)]",360,null],[13,"ResetContent","","205 Reset Content\n[[RFC7231, Section 6.3.6](https://tools.ietf.org/html/rfc7231#section-6.3.6)]",360,null],[13,"PartialContent","","206 Partial Content\n[[RFC7233, Section 4.1](https://tools.ietf.org/html/rfc7233#section-4.1)]",360,null],[13,"MultiStatus","","207 Multi-Status\n[[RFC4918](https://tools.ietf.org/html/rfc4918)]",360,null],[13,"AlreadyReported","","208 Already Reported\n[[RFC5842](https://tools.ietf.org/html/rfc5842)]",360,null],[13,"ImUsed","","226 IM Used\n[[RFC3229](https://tools.ietf.org/html/rfc3229)]",360,null],[13,"MultipleChoices","","300 Multiple Choices\n[[RFC7231, Section 6.4.1](https://tools.ietf.org/html/rfc7231#section-6.4.1)]",360,null],[13,"MovedPermanently","","301 Moved Permanently\n[[RFC7231, Section 6.4.2](https://tools.ietf.org/html/rfc7231#section-6.4.2)]",360,null],[13,"Found","","302 Found\n[[RFC7231, Section 6.4.3](https://tools.ietf.org/html/rfc7231#section-6.4.3)]",360,null],[13,"SeeOther","","303 See Other\n[[RFC7231, Section 6.4.4](https://tools.ietf.org/html/rfc7231#section-6.4.4)]",360,null],[13,"NotModified","","304 Not Modified\n[[RFC7232, Section 4.1](https://tools.ietf.org/html/rfc7232#section-4.1)]",360,null],[13,"UseProxy","","305 Use Proxy\n[[RFC7231, Section 6.4.5](https://tools.ietf.org/html/rfc7231#section-6.4.5)]",360,null],[13,"TemporaryRedirect","","307 Temporary Redirect\n[[RFC7231, Section 6.4.7](https://tools.ietf.org/html/rfc7231#section-6.4.7)]",360,null],[13,"PermanentRedirect","","308 Permanent Redirect\n[[RFC7238](https://tools.ietf.org/html/rfc7238)]",360,null],[13,"BadRequest","","400 Bad Request\n[[RFC7231, Section 6.5.1](https://tools.ietf.org/html/rfc7231#section-6.5.1)]",360,null],[13,"Unauthorized","","401 Unauthorized\n[[RFC7235, Section 3.1](https://tools.ietf.org/html/rfc7235#section-3.1)]",360,null],[13,"PaymentRequired","","402 Payment Required\n[[RFC7231, Section 6.5.2](https://tools.ietf.org/html/rfc7231#section-6.5.2)]",360,null],[13,"Forbidden","","403 Forbidden\n[[RFC7231, Section 6.5.3](https://tools.ietf.org/html/rfc7231#section-6.5.3)]",360,null],[13,"NotFound","","404 Not Found\n[[RFC7231, Section 6.5.4](https://tools.ietf.org/html/rfc7231#section-6.5.4)]",360,null],[13,"MethodNotAllowed","","405 Method Not Allowed\n[[RFC7231, Section 6.5.5](https://tools.ietf.org/html/rfc7231#section-6.5.5)]",360,null],[13,"NotAcceptable","","406 Not Acceptable\n[[RFC7231, Section 6.5.6](https://tools.ietf.org/html/rfc7231#section-6.5.6)]",360,null],[13,"ProxyAuthenticationRequired","","407 Proxy Authentication Required\n[[RFC7235, Section 3.2](https://tools.ietf.org/html/rfc7235#section-3.2)]",360,null],[13,"RequestTimeout","","408 Request Timeout\n[[RFC7231, Section 6.5.7](https://tools.ietf.org/html/rfc7231#section-6.5.7)]",360,null],[13,"Conflict","","409 Conflict\n[[RFC7231, Section 6.5.8](https://tools.ietf.org/html/rfc7231#section-6.5.8)]",360,null],[13,"Gone","","410 Gone\n[[RFC7231, Section 6.5.9](https://tools.ietf.org/html/rfc7231#section-6.5.9)]",360,null],[13,"LengthRequired","","411 Length Required\n[[RFC7231, Section 6.5.10](https://tools.ietf.org/html/rfc7231#section-6.5.10)]",360,null],[13,"PreconditionFailed","","412 Precondition Failed\n[[RFC7232, Section 4.2](https://tools.ietf.org/html/rfc7232#section-4.2)]",360,null],[13,"PayloadTooLarge","","413 Payload Too Large\n[[RFC7231, Section 6.5.11](https://tools.ietf.org/html/rfc7231#section-6.5.11)]",360,null],[13,"UriTooLong","","414 URI Too Long\n[[RFC7231, Section 6.5.12](https://tools.ietf.org/html/rfc7231#section-6.5.12)]",360,null],[13,"UnsupportedMediaType","","415 Unsupported Media Type\n[[RFC7231, Section 6.5.13](https://tools.ietf.org/html/rfc7231#section-6.5.13)]",360,null],[13,"RangeNotSatisfiable","","416 Range Not Satisfiable\n[[RFC7233, Section 4.4](https://tools.ietf.org/html/rfc7233#section-4.4)]",360,null],[13,"ExpectationFailed","","417 Expectation Failed\n[[RFC7231, Section 6.5.14](https://tools.ietf.org/html/rfc7231#section-6.5.14)]",360,null],[13,"ImATeapot","","418 I'm a teapot\n[curiously, not registered by IANA, but [RFC2324](https://tools.ietf.org/html/rfc2324)]",360,null],[13,"MisdirectedRequest","","421 Misdirected Request\n[RFC7540, Section 9.1.2](http://tools.ietf.org/html/rfc7540#section-9.1.2)",360,null],[13,"UnprocessableEntity","","422 Unprocessable Entity\n[[RFC4918](https://tools.ietf.org/html/rfc4918)]",360,null],[13,"Locked","","423 Locked\n[[RFC4918](https://tools.ietf.org/html/rfc4918)]",360,null],[13,"FailedDependency","","424 Failed Dependency\n[[RFC4918](https://tools.ietf.org/html/rfc4918)]",360,null],[13,"UpgradeRequired","","426 Upgrade Required\n[[RFC7231, Section 6.5.15](https://tools.ietf.org/html/rfc7231#section-6.5.15)]",360,null],[13,"PreconditionRequired","","428 Precondition Required\n[[RFC6585](https://tools.ietf.org/html/rfc6585)]",360,null],[13,"TooManyRequests","","429 Too Many Requests\n[[RFC6585](https://tools.ietf.org/html/rfc6585)]",360,null],[13,"RequestHeaderFieldsTooLarge","","431 Request Header Fields Too Large\n[[RFC6585](https://tools.ietf.org/html/rfc6585)]",360,null],[13,"UnavailableForLegalReasons","","451 Unavailable For Legal Reasons\n[[RFC7725](http://tools.ietf.org/html/rfc7725)]",360,null],[13,"InternalServerError","","500 Internal Server Error\n[[RFC7231, Section 6.6.1](https://tools.ietf.org/html/rfc7231#section-6.6.1)]",360,null],[13,"NotImplemented","","501 Not Implemented\n[[RFC7231, Section 6.6.2](https://tools.ietf.org/html/rfc7231#section-6.6.2)]",360,null],[13,"BadGateway","","502 Bad Gateway\n[[RFC7231, Section 6.6.3](https://tools.ietf.org/html/rfc7231#section-6.6.3)]",360,null],[13,"ServiceUnavailable","","503 Service Unavailable\n[[RFC7231, Section 6.6.4](https://tools.ietf.org/html/rfc7231#section-6.6.4)]",360,null],[13,"GatewayTimeout","","504 Gateway Timeout\n[[RFC7231, Section 6.6.5](https://tools.ietf.org/html/rfc7231#section-6.6.5)]",360,null],[13,"HttpVersionNotSupported","","505 HTTP Version Not Supported\n[[RFC7231, Section 6.6.6](https://tools.ietf.org/html/rfc7231#section-6.6.6)]",360,null],[13,"VariantAlsoNegotiates","","506 Variant Also Negotiates\n[[RFC2295](https://tools.ietf.org/html/rfc2295)]",360,null],[13,"InsufficientStorage","","507 Insufficient Storage\n[[RFC4918](https://tools.ietf.org/html/rfc4918)]",360,null],[13,"LoopDetected","","508 Loop Detected\n[[RFC5842](https://tools.ietf.org/html/rfc5842)]",360,null],[13,"NotExtended","","510 Not Extended\n[[RFC2774](https://tools.ietf.org/html/rfc2774)]",360,null],[13,"NetworkAuthenticationRequired","","511 Network Authentication Required\n[[RFC6585](https://tools.ietf.org/html/rfc6585)]",360,null],[13,"Unregistered","","A status code not in the IANA HTTP status code registry or very well known",360,null],[4,"StatusClass","","The class of an HTTP `status-code`.",null,null],[13,"Informational","","1xx (Informational): The request was received, continuing process",361,null],[13,"Success","","2xx (Success): The request was successfully received, understood, and accepted",361,null],[13,"Redirection","","3xx (Redirection): Further action needs to be taken in order to complete the request",361,null],[13,"ClientError","","4xx (Client Error): The request contains bad syntax or cannot be fulfilled",361,null],[13,"ServerError","","5xx (Server Error): The server failed to fulfill an apparently valid request",361,null],[13,"NoClass","","A status code lower than 100 or higher than 599. These codes do no belong to any class.",361,null],[0,"method","iron","HTTP Methods",null,null],[4,"Method","iron::method","The Request Method (VERB)",null,null],[13,"Options","","OPTIONS",17,null],[13,"Get","","GET",17,null],[13,"Post","","POST",17,null],[13,"Put","","PUT",17,null],[13,"Delete","","DELETE",17,null],[13,"Head","","HEAD",17,null],[13,"Trace","","TRACE",17,null],[13,"Connect","","CONNECT",17,null],[13,"Patch","","PATCH",17,null],[13,"Extension","","Method extensions. An example would be `let m = Extension(\"FOO\".to_string())`.",17,null],[0,"middleware","iron","Iron's Middleware and Handler System",null,null],[3,"Chain","iron::middleware","The middleware chain used in Iron.",null,null],[8,"Handler","","`Handler`s are responsible for handling requests by creating Responses from Requests.",null,null],[10,"handle","","Produce a `Response` from a Request, with the possibility of error.",383,{"inputs":[{"name":"handler"},{"name":"request"}],"output":{"name":"ironresult"}}],[8,"BeforeMiddleware","","`BeforeMiddleware` are fired before a `Handler` is called inside of a Chain.",null,null],[11,"before","","Do whatever work this middleware should do with a `Request` object.",384,{"inputs":[{"name":"beforemiddleware"},{"name":"request"}],"output":{"name":"ironresult"}}],[11,"catch","","Respond to an error thrown by a previous `BeforeMiddleware`.",384,{"inputs":[{"name":"beforemiddleware"},{"name":"request"},{"name":"ironerror"}],"output":{"name":"ironresult"}}],[8,"AfterMiddleware","","`AfterMiddleware` are fired after a `Handler` is called inside of a Chain.",null,null],[11,"after","","Do whatever post-processing this middleware should do.",385,{"inputs":[{"name":"aftermiddleware"},{"name":"request"},{"name":"response"}],"output":{"name":"ironresult"}}],[11,"catch","","Respond to an error thrown by previous `AfterMiddleware`, the `Handler`,\nor a `BeforeMiddleware`.",385,{"inputs":[{"name":"aftermiddleware"},{"name":"request"},{"name":"ironerror"}],"output":{"name":"ironresult"}}],[8,"AroundMiddleware","","AroundMiddleware are used to wrap and replace the `Handler` in a `Chain`.",null,null],[10,"around","","Produce a `Handler` from this `AroundMiddleware` given another `Handler`.",386,{"inputs":[{"name":"aroundmiddleware"},{"name":"box"}],"output":{"name":"box"}}],[11,"new","","Construct a new ChainBuilder from a `Handler`.",387,{"inputs":[{"name":"chain"},{"name":"h"}],"output":{"name":"chain"}}],[11,"link","","Link both a before and after middleware to the chain at once.",387,null],[11,"link_before","","Link a `BeforeMiddleware` to the `Chain`, after all previously linked\n`BeforeMiddleware`.",387,{"inputs":[{"name":"chain"},{"name":"b"}],"output":{"name":"chain"}}],[11,"link_after","","Link a `AfterMiddleware` to the `Chain`, after all previously linked\n`AfterMiddleware`.",387,{"inputs":[{"name":"chain"},{"name":"a"}],"output":{"name":"chain"}}],[11,"around","","Apply an `AroundMiddleware` to the `Handler` in this `Chain`.",387,{"inputs":[{"name":"chain"},{"name":"a"}],"output":{"name":"chain"}}],[11,"link_around","","Apply an `AroundMiddleware` to the `Handler` in this `Chain`.",387,{"inputs":[{"name":"chain"},{"name":"a"}],"output":{"name":"chain"}}],[11,"handle","","",387,{"inputs":[{"name":"chain"},{"name":"request"}],"output":{"name":"ironresult"}}],[11,"handle","alloc::boxed","",101,{"inputs":[{"name":"box"},{"name":"request"}],"output":{"name":"ironresult"}}],[11,"before","","",101,{"inputs":[{"name":"box"},{"name":"request"}],"output":{"name":"ironresult"}}],[11,"catch","","",101,{"inputs":[{"name":"box"},{"name":"request"},{"name":"ironerror"}],"output":{"name":"ironresult"}}],[11,"before","alloc::arc","",388,{"inputs":[{"name":"arc"},{"name":"request"}],"output":{"name":"ironresult"}}],[11,"catch","","",388,{"inputs":[{"name":"arc"},{"name":"request"},{"name":"ironerror"}],"output":{"name":"ironresult"}}],[11,"after","alloc::boxed","",101,{"inputs":[{"name":"box"},{"name":"request"},{"name":"response"}],"output":{"name":"ironresult"}}],[11,"catch","","",101,{"inputs":[{"name":"box"},{"name":"request"},{"name":"ironerror"}],"output":{"name":"ironresult"}}],[11,"after","alloc::arc","",388,{"inputs":[{"name":"arc"},{"name":"request"},{"name":"response"}],"output":{"name":"ironresult"}}],[11,"catch","","",388,{"inputs":[{"name":"arc"},{"name":"request"},{"name":"ironerror"}],"output":{"name":"ironresult"}}],[0,"response","iron","Iron's HTTP Response representation and associated methods.",null,null],[3,"HttpResponse","iron::response","The outgoing half for a Tcp connection, created by a `Server` and given to a `Handler`.",null,null],[12,"version","","The HTTP version of this response.",354,null],[3,"ResponseBody","","A `Write`r of HTTP response bodies.",null,null],[3,"BodyReader","","Wrapper type to set `Read`ers as response bodies",null,null],[3,"Response","","The response representation given to `Middleware`",null,null],[12,"status","","The response status-code.",389,null],[12,"headers","","The headers of the response.",389,null],[12,"extensions","","A TypeMap to be used as an extensible storage for data\nassociated with this Response.",389,null],[12,"body","","The body of the response.",389,null],[8,"WriteBody","","A trait which writes the body of an HTTP response.",null,null],[10,"write_body","","Writes the body to the provided `ResponseBody`.",390,{"inputs":[{"name":"writebody"},{"name":"responsebody"}],"output":{"name":"result"}}],[11,"new","","Create a new ResponseBody, mostly for use in mocking.",391,{"inputs":[{"name":"responsebody"},{"name":"w"}],"output":{"name":"responsebody"}}],[11,"write","","",391,null],[11,"flush","","",391,{"inputs":[{"name":"responsebody"}],"output":{"name":"result"}}],[11,"write_body","collections::string","",74,{"inputs":[{"name":"string"},{"name":"responsebody"}],"output":{"name":"result"}}],[11,"write_body","collections::vec","",19,{"inputs":[{"name":"vec"},{"name":"responsebody"}],"output":{"name":"result"}}],[11,"write_body","std::fs","",392,{"inputs":[{"name":"file"},{"name":"responsebody"}],"output":{"name":"result"}}],[11,"write_body","alloc::boxed","",101,{"inputs":[{"name":"box"},{"name":"responsebody"}],"output":{"name":"result"}}],[11,"write_body","iron::response","",393,{"inputs":[{"name":"bodyreader"},{"name":"responsebody"}],"output":{"name":"result"}}],[11,"new","","Construct a blank Response",389,{"inputs":[{"name":"response"}],"output":{"name":"response"}}],[11,"with","","Construct a Response with the specified modifier pre-applied.",389,{"inputs":[{"name":"response"},{"name":"m"}],"output":{"name":"response"}}],[11,"fmt","","",389,{"inputs":[{"name":"response"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",389,{"inputs":[{"name":"response"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"extensions","","",389,{"inputs":[{"name":"response"}],"output":{"name":"typemap"}}],[11,"extensions_mut","","",389,{"inputs":[{"name":"response"}],"output":{"name":"typemap"}}],[0,"request","iron","Iron's HTTP Request representation and associated methods.",null,null],[3,"HttpRequest","iron::request","A request bundles several parts of an incoming `NetworkStream`, given to a `Handler`.",null,null],[12,"remote_addr","","The IP address of the remote connection.",353,null],[12,"method","","The `Method`, such as `Get`, `Post`, etc.",353,null],[12,"headers","","The headers of the incoming request.",353,null],[12,"uri","","The target request-uri for this request.",353,null],[12,"version","","The version of HTTP for this request.",353,null],[3,"Url","","HTTP/HTTPS URL type for Iron.",null,null],[12,"scheme","","The lower-cased scheme of the URL, typically \"http\" or \"https\".",377,null],[12,"host","","The host field of the URL, probably a domain.",377,null],[12,"port","","The connection port.",377,null],[12,"path","","The URL path, the resource to be accessed.",377,null],[12,"username","","The URL username field, from the userinfo section of the URL.",377,null],[12,"password","","The URL password field, from the userinfo section of the URL.",377,null],[12,"query","","The URL query string.",377,null],[12,"fragment","","The URL fragment.",377,null],[3,"Request","","The `Request` given to all `Middleware`.",null,null],[12,"url","","The requested URL.",394,null],[12,"remote_addr","","The originating address of the request.",394,null],[12,"local_addr","","The local address of the request.",394,null],[12,"headers","","The request headers.",394,null],[12,"body","","The request body as a reader.",394,null],[12,"method","","The request method.",394,null],[12,"extensions","","Extensible storage for data passed between middleware.",394,null],[3,"Body","","The body of an Iron request,",null,null],[11,"fmt","iron","",377,{"inputs":[{"name":"url"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",377,{"inputs":[{"name":"url"}],"output":{"name":"url"}}],[11,"eq","","",377,{"inputs":[{"name":"url"},{"name":"url"}],"output":{"name":"bool"}}],[11,"ne","","",377,{"inputs":[{"name":"url"},{"name":"url"}],"output":{"name":"bool"}}],[11,"parse","","Create a URL from a string.",377,{"inputs":[{"name":"url"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_generic_url","","Create a `Url` from a `rust-url` `Url`.",377,{"inputs":[{"name":"url"},{"name":"url"}],"output":{"name":"result"}}],[11,"into_generic_url","","Create a `rust-url` `Url` from a `Url`.",377,{"inputs":[{"name":"url"}],"output":{"name":"url"}}],[11,"fmt","","",377,{"inputs":[{"name":"url"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","iron::request","",394,{"inputs":[{"name":"request"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_http","","Create a request from an HttpRequest.",394,{"inputs":[{"name":"request"},{"name":"httprequest"},{"name":"socketaddr"},{"name":"protocol"}],"output":{"name":"result"}}],[11,"new","","Create a new reader for use in an Iron request from a hyper HttpReader.",395,{"inputs":[{"name":"body"},{"name":"httpreader"}],"output":{"name":"body"}}],[11,"read","","",395,null],[11,"extensions","","",394,{"inputs":[{"name":"request"}],"output":{"name":"typemap"}}],[11,"extensions_mut","","",394,{"inputs":[{"name":"request"}],"output":{"name":"typemap"}}],[0,"modifiers","iron","This module defines a series of convenience modifiers for changing\nResponses.",null,null],[3,"Header","iron::modifiers","A modifier for changing headers on requests and responses.",null,null],[3,"Redirect","","A modifier for creating redirect responses.",null,null],[3,"RedirectRaw","","A modifier for creating redirect responses.",null,null],[11,"new","conduit_mime_types","",396,{"inputs":[{"name":"types"}],"output":{"name":"result"}}],[11,"get_extension","","",396,{"inputs":[{"name":"types"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_mime_type","","",396,{"inputs":[{"name":"types"},{"name":"str"}],"output":{"name":"option"}}],[11,"mime_for_path","","",396,{"inputs":[{"name":"types"},{"name":"path"}],"output":{"name":"str"}}],[11,"eq","","",396,{"inputs":[{"name":"types"},{"name":"types"}],"output":{"name":"bool"}}],[11,"ne","","",396,{"inputs":[{"name":"types"},{"name":"types"}],"output":{"name":"bool"}}],[11,"clone","","",396,{"inputs":[{"name":"types"}],"output":{"name":"types"}}],[11,"fmt","","",396,{"inputs":[{"name":"types"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"modify","iron::mime","",133,{"inputs":[{"name":"mime"},{"name":"response"}],"output":null}],[11,"modify","alloc::boxed","",101,{"inputs":[{"name":"box"},{"name":"response"}],"output":null}],[11,"modify","iron::response","",393,{"inputs":[{"name":"bodyreader"},{"name":"response"}],"output":null}],[11,"modify","collections::string","",74,{"inputs":[{"name":"string"},{"name":"response"}],"output":null}],[11,"modify","collections::vec","",19,{"inputs":[{"name":"vec"},{"name":"response"}],"output":null}],[11,"modify","std::fs","",392,{"inputs":[{"name":"file"},{"name":"response"}],"output":null}],[11,"modify","std::path","Set the body to the contents of the File at this path.",397,{"inputs":[{"name":"pathbuf"},{"name":"response"}],"output":null}],[11,"modify","iron::status","",360,{"inputs":[{"name":"status"},{"name":"response"}],"output":null}],[11,"modify","iron::modifiers","",398,{"inputs":[{"name":"header"},{"name":"response"}],"output":null}],[11,"modify","","",398,{"inputs":[{"name":"header"},{"name":"request"}],"output":null}],[11,"modify","","",399,{"inputs":[{"name":"redirect"},{"name":"response"}],"output":null}],[11,"modify","","",400,{"inputs":[{"name":"redirectraw"},{"name":"response"}],"output":null}],[11,"clone","iron","",379,{"inputs":[{"name":"timeouts"}],"output":{"name":"timeouts"}}],[11,"eq","","",379,{"inputs":[{"name":"timeouts"},{"name":"timeouts"}],"output":{"name":"bool"}}],[11,"ne","","",379,{"inputs":[{"name":"timeouts"},{"name":"timeouts"}],"output":{"name":"bool"}}],[11,"fmt","","",379,{"inputs":[{"name":"timeouts"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",379,{"inputs":[{"name":"timeouts"}],"output":{"name":"self"}}],[11,"clone","","",380,{"inputs":[{"name":"protocol"}],"output":{"name":"protocol"}}],[11,"name","","Return the name used for this protocol in a URI's scheme part.",380,{"inputs":[{"name":"protocol"}],"output":{"name":"str"}}],[11,"http","","Kick off the server process using the HTTP protocol.",378,{"inputs":[{"name":"iron"},{"name":"a"}],"output":{"name":"httpresult"}}],[11,"listen_with","","Kick off the server process with X threads.",378,{"inputs":[{"name":"iron"},{"name":"a"},{"name":"usize"},{"name":"protocol"},{"name":"option"}],"output":{"name":"httpresult"}}],[11,"new","","Instantiate a new instance of `Iron`.",378,{"inputs":[{"name":"iron"},{"name":"h"}],"output":{"name":"iron"}}],[11,"handle","","",378,{"inputs":[{"name":"iron"},{"name":"httprequest"},{"name":"httpresponse"}],"output":null}],[6,"IronResult","","The Result alias used throughout Iron and in clients of Iron.",null,null],[14,"itry!","","Like `try!()`, but wraps the error value in `IronError`. To be used in\nrequest handlers.",null,null],[14,"iexpect!","","Unwrap the given `Option` or return a `Ok(Response::new())` with the given\nmodifier. The default modifier is `status::BadRequest`.",null,null]],"paths":[[3,"Listening"],[3,"BufReader"],[3,"Config"],[3,"PoolImpl"],[4,"Scheme"],[3,"Pool"],[3,"PooledStreamInner"],[3,"PooledStream"],[3,"Request"],[3,"Response"],[3,"Client"],[3,"RequestBuilder"],[4,"Body"],[3,"Url"],[4,"RedirectPolicy"],[4,"HttpError"],[4,"Void"],[4,"Method"],[3,"Accept"],[3,"Vec"],[3,"BinaryHeap"],[3,"Hole"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"RawItems"],[3,"Node"],[3,"Handle"],[3,"ElemsAndEdges"],[3,"MoveTraversalImpl"],[3,"AbsTraversal"],[3,"NodeSlice"],[3,"MutNodeSlice"],[3,"BTreeMap"],[3,"AbsIter"],[3,"IdRef"],[3,"PartialSearchStack"],[3,"Pusher"],[3,"SearchStack"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"Range"],[3,"RangeMut"],[4,"Entry"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"BTreeSet"],[3,"Iter"],[3,"IntoIter"],[3,"Range"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Intersection"],[3,"Union"],[4,"Cow"],[3,"EnumSet"],[3,"Iter"],[3,"Argument"],[3,"FormatSpec"],[4,"Alignment"],[4,"Count"],[4,"Position"],[3,"Iter"],[3,"IntoIter"],[3,"Rawlink"],[3,"LinkedList"],[3,"IterMut"],[3,"RangeFrom"],[3,"RangeTo"],[3,"Range"],[3,"Utf16Units"],[3,"String"],[4,"SearchStep"],[3,"CharEqSearcher"],[3,"CharEqPattern"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[4,"StrSearcherImpl"],[3,"EmptyNeedle"],[3,"TwoWaySearcher"],[4,"MatchOnly"],[4,"RejectAndMatch"],[3,"FromUtf8Error"],[3,"FromUtf16Error"],[4,"ParseError"],[3,"Drain"],[3,"IntoIter"],[3,"Drain"],[3,"VecDeque"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[4,"Bound"],[3,"ExchangeHeapSingleton"],[3,"IntermediateBox"],[3,"Box"],[3,"AccessControlAllowCredentials"],[3,"AccessControlAllowHeaders"],[3,"AccessControlAllowMethods"],[4,"AccessControlAllowOrigin"],[3,"AccessControlExposeHeaders"],[3,"AccessControlMaxAge"],[3,"AccessControlRequestHeaders"],[3,"AccessControlRequestMethod"],[3,"AcceptCharset"],[3,"AcceptEncoding"],[3,"AcceptLanguage"],[3,"AcceptRanges"],[4,"RangeUnit"],[3,"Allow"],[3,"Authorization"],[3,"Basic"],[3,"Bearer"],[3,"CacheControl"],[4,"CacheDirective"],[3,"Cookie"],[4,"ConnectionOption"],[3,"Connection"],[4,"DispositionType"],[4,"DispositionParam"],[3,"ContentDisposition"],[3,"ContentEncoding"],[3,"ContentLanguage"],[3,"ContentLength"],[3,"ContentRange"],[4,"ContentRangeSpec"],[3,"ContentType"],[3,"Mime"],[4,"TopLevel"],[4,"SubLevel"],[4,"Attr"],[4,"Value"],[3,"Date"],[3,"ETag"],[3,"EntityTag"],[4,"Expect"],[3,"Expires"],[3,"From"],[3,"Host"],[4,"IfMatch"],[3,"IfModifiedSince"],[4,"IfNoneMatch"],[4,"IfRange"],[3,"IfUnmodifiedSince"],[3,"LastModified"],[3,"Location"],[4,"Pragma"],[4,"Range"],[4,"ByteRangeSpec"],[3,"Referer"],[3,"Server"],[3,"SetCookie"],[3,"StrictTransportSecurity"],[3,"TransferEncoding"],[3,"Upgrade"],[4,"ProtocolName"],[3,"Protocol"],[3,"UserAgent"],[4,"Vary"],[3,"OptCell"],[4,"Option"],[3,"Wrapping"],[3,"Decoded"],[4,"FullDecoded"],[4,"Part"],[3,"Formatted"],[4,"Sign"],[3,"Unpacked"],[4,"Sign"],[3,"Decimal"],[4,"ParseResult"],[3,"ParseFloatError"],[4,"FloatErrorKind"],[3,"Big32x40"],[3,"Big8x3"],[3,"Fp"],[4,"FpCategory"],[3,"ParseIntError"],[4,"IntErrorKind"],[3,"NonZero"],[3,"Unique"],[3,"Shared"],[3,"PhantomData"],[3,"RangeFull"],[4,"Ordering"],[8,"Any"],[3,"TypeId"],[3,"AtomicBool"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"AtomicPtr"],[4,"Ordering"],[3,"Cell"],[4,"BorrowState"],[3,"RefCell"],[3,"BorrowRef"],[3,"Ref"],[3,"RefMut"],[3,"BorrowRefMut"],[3,"UnsafeCell"],[3,"EscapeUnicode"],[4,"EscapeUnicodeState"],[3,"EscapeDefault"],[4,"EscapeDefaultState"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[4,"ChainState"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[3,"StepBy"],[3,"RangeInclusive"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[3,"Item"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Slice"],[3,"TraitObject"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"i8x16"],[3,"i16x8"],[3,"i32x4"],[3,"i64x2"],[3,"u8x16"],[3,"u16x8"],[3,"u32x4"],[3,"u64x2"],[3,"f32x4"],[3,"f64x2"],[3,"Iter"],[3,"IterMut"],[3,"Split"],[3,"SplitMut"],[3,"GenericSplitN"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"Windows"],[3,"Chunks"],[3,"ChunksMut"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"SplitInternal"],[3,"Split"],[3,"RSplit"],[3,"SplitTerminator"],[3,"RSplitTerminator"],[3,"SplitNInternal"],[3,"SplitN"],[3,"RSplitN"],[3,"MatchIndicesInternal"],[3,"MatchIndices"],[3,"RMatchIndices"],[3,"MatchesInternal"],[3,"Matches"],[3,"RMatches"],[3,"Lines"],[3,"LinesAny"],[3,"LinesAnyMap"],[3,"CharRange"],[3,"SipHasher"],[3,"Binary"],[3,"Octal"],[3,"Decimal"],[3,"LowerHex"],[3,"UpperHex"],[3,"Radix"],[3,"RadixFmt"],[3,"PadAdapter"],[3,"DebugStruct"],[3,"DebugTuple"],[3,"DebugInner"],[3,"DebugSet"],[3,"DebugList"],[3,"DebugMap"],[3,"Error"],[3,"ArgumentV1"],[4,"FlagV1"],[3,"Arguments"],[3,"Formatter"],[4,"PtrMap"],[3,"PtrMapCell"],[3,"Item"],[4,"Charset"],[4,"Encoding"],[3,"HttpDate"],[3,"Quality"],[3,"QualityItem"],[3,"ExtendedValue"],[3,"Headers"],[3,"HeadersItems"],[3,"HeaderView"],[3,"HeaderFormatter"],[3,"CowStr"],[3,"Wrapper"],[4,"Stream"],[3,"Http11Message"],[3,"Http11Protocol"],[3,"ConnAdapter"],[3,"Connector"],[4,"HttpReader"],[4,"HttpWriter"],[3,"EndError"],[3,"Error"],[3,"Incoming"],[3,"Http2Stream"],[3,"Http2ConnectError"],[3,"Http2Connector"],[3,"Http2Protocol"],[3,"Http2Request"],[3,"Http2Response"],[3,"Http2Message"],[3,"RequestHead"],[3,"ResponseHead"],[8,"HttpMessage"],[3,"RawStatus"],[3,"NetworkConnections"],[8,"NetworkStream"],[3,"HttpListener"],[3,"HttpStream"],[3,"HttpConnector"],[4,"HttpsStream"],[3,"HttpsListener"],[3,"HttpsConnector"],[3,"HttpRequest"],[3,"HttpResponse"],[4,"Body"],[3,"ListenerPool"],[3,"Sentinel"],[3,"Server"],[3,"Timeouts"],[4,"Status"],[4,"StatusClass"],[4,"RequestUri"],[4,"HttpVersion"],[3,"TypeMap"],[4,"Entry"],[3,"OccupiedEntry"],[3,"VacantEntry"],[8,"Header"],[8,"HeaderFormat"],[3,"Cookie"],[3,"CookieJar"],[3,"Iter"],[3,"AttrVal"],[8,"Scheme"],[8,"Pluggable"],[8,"Set"],[3,"Url"],[3,"Iron"],[3,"Timeouts"],[4,"Protocol"],[3,"IronError"],[8,"Key"],[8,"Handler"],[8,"BeforeMiddleware"],[8,"AfterMiddleware"],[8,"AroundMiddleware"],[3,"Chain"],[3,"Arc"],[3,"Response"],[8,"WriteBody"],[3,"ResponseBody"],[3,"File"],[3,"BodyReader"],[3,"Request"],[3,"Body"],[3,"Types"],[3,"PathBuf"],[3,"Header"],[3,"Redirect"],[3,"RedirectRaw"]]};
searchIndex['hyper'] = {"items":[[0,"","hyper","# Hyper",null,null],[11,"parse","url","Parse an URL with the default `UrlParser` parameters.",0,{"inputs":[{"name":"url"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_file_path","","Convert a file name as `std::path::Path` into an URL in the `file` scheme.",0,{"inputs":[{"name":"url"},{"name":"p"}],"output":{"name":"result"}}],[11,"from_directory_path","","Convert a directory name as `std::path::Path` into an URL in the `file` scheme.",0,{"inputs":[{"name":"url"},{"name":"p"}],"output":{"name":"result"}}],[11,"to_file_path","","Assuming the URL is in the `file` scheme or similar,\nconvert its path to an absolute `std::path::Path`.",0,{"inputs":[{"name":"url"}],"output":{"name":"result"}}],[11,"serialize","","Return the serialization of this URL as a string.",0,{"inputs":[{"name":"url"}],"output":{"name":"string"}}],[11,"origin","","Return the origin of this URL (https://url.spec.whatwg.org/#origin)",0,{"inputs":[{"name":"url"}],"output":{"name":"origin"}}],[11,"serialize_no_fragment","","Return the serialization of this URL, without the fragment identifier, as a string",0,{"inputs":[{"name":"url"}],"output":{"name":"string"}}],[11,"non_relative_scheme_data","","If the URL is *non-relative*, return the string scheme data.",0,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"non_relative_scheme_data_mut","","If the URL is *non-relative*, return a mutable reference to the string scheme data.",0,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"relative_scheme_data","","If the URL is in a *relative scheme*, return the structured scheme data.",0,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"relative_scheme_data_mut","","If the URL is in a *relative scheme*,\nreturn a mutable reference to the structured scheme data.",0,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"username","","If the URL is in a *relative scheme*, return its username.",0,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"username_mut","","If the URL is in a *relative scheme*, return a mutable reference to its username.",0,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"lossy_percent_decode_username","","Percent-decode the URL’s username, if any.",0,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"password","","If the URL is in a *relative scheme*, return its password, if any.",0,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"password_mut","","If the URL is in a *relative scheme*, return a mutable reference to its password, if any.",0,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"lossy_percent_decode_password","","Percent-decode the URL’s password, if any.",0,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"serialize_userinfo","","Serialize the URL's username and password, if any.",0,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"host","","If the URL is in a *relative scheme*, return its structured host.",0,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"host_mut","","If the URL is in a *relative scheme*, return a mutable reference to its structured host.",0,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"domain","","If the URL is in a *relative scheme* and its host is a domain,\nreturn the domain as a string.",0,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"domain_mut","","If the URL is in a *relative scheme* and its host is a domain,\nreturn a mutable reference to the domain string.",0,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"serialize_host","","If the URL is in a *relative scheme*, serialize its host as a string.",0,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"port","","If the URL is in a *relative scheme* and has a port number, return it.",0,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"port_mut","","If the URL is in a *relative scheme*, return a mutable reference to its port.",0,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"port_or_default","","If the URL is in a *relative scheme* that is not a file-like,\nreturn its port number, even if it is the default.",0,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"path","","If the URL is in a *relative scheme*, return its path components.",0,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"path_mut","","If the URL is in a *relative scheme*, return a mutable reference to its path components.",0,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"serialize_path","","If the URL is in a *relative scheme*, serialize its path as a string.",0,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"query_pairs","","Parse the URL’s query string, if any, as `application/x-www-form-urlencoded`\nand return a vector of (key, value) pairs.",0,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"set_query_from_pairs","","Serialize an iterator of (key, value) pairs as `application/x-www-form-urlencoded`\nand set it as the URL’s query string.",0,null],[11,"lossy_percent_decode_query","","Percent-decode the URL’s query string, if any.",0,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"lossy_percent_decode_fragment","","Percent-decode the URL’s fragment identifier, if any.",0,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"join","","Join a path with a base URL.",0,{"inputs":[{"name":"url"},{"name":"str"}],"output":{"name":"result"}}],[11,"clone","url::encoding","",1,{"inputs":[{"name":"encodingoverride"}],"output":{"name":"encodingoverride"}}],[11,"utf8","","",1,{"inputs":[{"name":"encodingoverride"}],"output":{"name":"encodingoverride"}}],[11,"lookup","","",1,null],[11,"is_utf8","","",1,{"inputs":[{"name":"encodingoverride"}],"output":{"name":"bool"}}],[11,"decode","","",1,null],[11,"encode","","",1,{"inputs":[{"name":"encodingoverride"},{"name":"str"}],"output":{"name":"cow"}}],[11,"cmp","url::host","",2,{"inputs":[{"name":"host"},{"name":"host"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"host"},{"name":"host"}],"output":{"name":"option"}}],[11,"lt","","",2,{"inputs":[{"name":"host"},{"name":"host"}],"output":{"name":"bool"}}],[11,"le","","",2,{"inputs":[{"name":"host"},{"name":"host"}],"output":{"name":"bool"}}],[11,"gt","","",2,{"inputs":[{"name":"host"},{"name":"host"}],"output":{"name":"bool"}}],[11,"ge","","",2,{"inputs":[{"name":"host"},{"name":"host"}],"output":{"name":"bool"}}],[11,"hash","","",2,null],[11,"fmt","","",2,{"inputs":[{"name":"host"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"host"}],"output":{"name":"host"}}],[11,"eq","","",2,{"inputs":[{"name":"host"},{"name":"host"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"host"},{"name":"host"}],"output":{"name":"bool"}}],[11,"parse","","Parse a host: either an IPv6 address in [] square brackets, or a domain.",2,{"inputs":[{"name":"host"},{"name":"str"}],"output":{"name":"result"}}],[11,"serialize","","Serialize the host as a string.",2,{"inputs":[{"name":"host"}],"output":{"name":"string"}}],[11,"fmt","","",2,{"inputs":[{"name":"host"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","url::parser","",3,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"parseerror"}],"output":{"name":"parseerror"}}],[11,"eq","","",3,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"description","","",3,{"inputs":[{"name":"parseerror"}],"output":{"name":"str"}}],[11,"fmt","","",3,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"context"},{"name":"context"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"context"},{"name":"context"}],"output":{"name":"bool"}}],[11,"next","","",5,{"inputs":[{"name":"charranges"}],"output":{"name":"option"}}],[11,"clone","url::percent_encoding","",6,{"inputs":[{"name":"encodeset"}],"output":{"name":"encodeset"}}],[11,"fmt","url::format","",7,{"inputs":[{"name":"pathformatter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"userinfoformatter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"urlnofragmentformatter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","url::idna","",10,{"inputs":[{"name":"mapping"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"uts46flags"}],"output":{"name":"uts46flags"}}],[11,"fmt","","",12,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"eq","","",12,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"cmp","url","",0,{"inputs":[{"name":"url"},{"name":"url"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"url"},{"name":"url"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"url"},{"name":"url"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"url"},{"name":"url"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"url"},{"name":"url"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"url"},{"name":"url"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"url"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"url"}],"output":{"name":"url"}}],[11,"eq","","",0,{"inputs":[{"name":"url"},{"name":"url"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"url"},{"name":"url"}],"output":{"name":"bool"}}],[11,"fmt","","",13,{"inputs":[{"name":"opaqueorigin"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"opaqueorigin"}],"output":{"name":"opaqueorigin"}}],[11,"eq","","",13,{"inputs":[{"name":"opaqueorigin"},{"name":"opaqueorigin"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"opaqueorigin"},{"name":"opaqueorigin"}],"output":{"name":"bool"}}],[11,"new","","Creates a new opaque origin with a random UUID.",13,{"inputs":[{"name":"opaqueorigin"}],"output":{"name":"opaqueorigin"}}],[11,"fmt","","",14,{"inputs":[{"name":"origin"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"origin"}],"output":{"name":"origin"}}],[11,"eq","","",14,{"inputs":[{"name":"origin"},{"name":"origin"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"origin"},{"name":"origin"}],"output":{"name":"bool"}}],[11,"cmp","","",15,{"inputs":[{"name":"schemedata"},{"name":"schemedata"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",15,{"inputs":[{"name":"schemedata"},{"name":"schemedata"}],"output":{"name":"option"}}],[11,"lt","","",15,{"inputs":[{"name":"schemedata"},{"name":"schemedata"}],"output":{"name":"bool"}}],[11,"le","","",15,{"inputs":[{"name":"schemedata"},{"name":"schemedata"}],"output":{"name":"bool"}}],[11,"gt","","",15,{"inputs":[{"name":"schemedata"},{"name":"schemedata"}],"output":{"name":"bool"}}],[11,"ge","","",15,{"inputs":[{"name":"schemedata"},{"name":"schemedata"}],"output":{"name":"bool"}}],[11,"hash","","",15,null],[11,"fmt","","",15,{"inputs":[{"name":"schemedata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"schemedata"}],"output":{"name":"schemedata"}}],[11,"eq","","",15,{"inputs":[{"name":"schemedata"},{"name":"schemedata"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"schemedata"},{"name":"schemedata"}],"output":{"name":"bool"}}],[11,"fmt","","",16,{"inputs":[{"name":"relativeschemedata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"relativeschemedata"}],"output":{"name":"relativeschemedata"}}],[11,"eq","","",16,{"inputs":[{"name":"relativeschemedata"},{"name":"relativeschemedata"}],"output":{"name":"bool"}}],[11,"hash","","",16,null],[11,"partial_cmp","","",16,{"inputs":[{"name":"relativeschemedata"},{"name":"relativeschemedata"}],"output":{"name":"option"}}],[11,"cmp","","",16,{"inputs":[{"name":"relativeschemedata"},{"name":"relativeschemedata"}],"output":{"name":"ordering"}}],[11,"from_str","","",0,{"inputs":[{"name":"url"},{"name":"str"}],"output":{"name":"result"}}],[11,"new","","Return a new UrlParser with default parameters.",17,{"inputs":[{"name":"urlparser"}],"output":{"name":"urlparser"}}],[11,"base_url","","Set the base URL used for resolving relative URL references, and return the `UrlParser`.\nThe default is no base URL, so that relative URLs references fail to parse.",17,{"inputs":[{"name":"urlparser"},{"name":"url"}],"output":{"name":"urlparser"}}],[11,"error_handler","","Set an error handler for non-fatal parse errors, and return the `UrlParser`.",17,null],[11,"scheme_type_mapper","","Set a *scheme type mapper*, and return the `UrlParser`.",17,null],[11,"parse","","Parse `input` as an URL, with all the parameters previously set in the `UrlParser`.",17,{"inputs":[{"name":"urlparser"},{"name":"str"}],"output":{"name":"result"}}],[11,"parse_path","","Parse `input` as a “standalone” URL path,\nwith an optional query string and fragment identifier.",17,{"inputs":[{"name":"urlparser"},{"name":"str"}],"output":{"name":"result"}}],[11,"cmp","","",18,{"inputs":[{"name":"schemetype"},{"name":"schemetype"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",18,{"inputs":[{"name":"schemetype"},{"name":"schemetype"}],"output":{"name":"option"}}],[11,"lt","","",18,{"inputs":[{"name":"schemetype"},{"name":"schemetype"}],"output":{"name":"bool"}}],[11,"le","","",18,{"inputs":[{"name":"schemetype"},{"name":"schemetype"}],"output":{"name":"bool"}}],[11,"gt","","",18,{"inputs":[{"name":"schemetype"},{"name":"schemetype"}],"output":{"name":"bool"}}],[11,"ge","","",18,{"inputs":[{"name":"schemetype"},{"name":"schemetype"}],"output":{"name":"bool"}}],[11,"hash","","",18,null],[11,"clone","","",18,{"inputs":[{"name":"schemetype"}],"output":{"name":"schemetype"}}],[11,"fmt","","",18,{"inputs":[{"name":"schemetype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",18,{"inputs":[{"name":"schemetype"},{"name":"schemetype"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"schemetype"},{"name":"schemetype"}],"output":{"name":"bool"}}],[11,"default_port","","",18,{"inputs":[{"name":"schemetype"}],"output":{"name":"option"}}],[11,"same_as","","",18,{"inputs":[{"name":"schemetype"},{"name":"schemetype"}],"output":{"name":"bool"}}],[11,"encode","","",0,{"inputs":[{"name":"url"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",0,{"inputs":[{"name":"url"},{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"url"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"schemedata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"lossy_percent_decode_username","","Percent-decode the URL’s username.",16,{"inputs":[{"name":"relativeschemedata"}],"output":{"name":"string"}}],[11,"lossy_percent_decode_password","","Percent-decode the URL’s password, if any.",16,{"inputs":[{"name":"relativeschemedata"}],"output":{"name":"option"}}],[11,"to_file_path","","Assuming the URL is in the `file` scheme or similar,\nconvert its path to an absolute `std::path::Path`.",16,{"inputs":[{"name":"relativeschemedata"}],"output":{"name":"result"}}],[11,"domain","","If the host is a domain, return the domain as a string.",16,{"inputs":[{"name":"relativeschemedata"}],"output":{"name":"option"}}],[11,"domain_mut","","If the host is a domain, return a mutable reference to the domain string.",16,{"inputs":[{"name":"relativeschemedata"}],"output":{"name":"option"}}],[11,"port_or_default","","Return the port number of the URL, even if it is the default.\nReturn `None` for file-like URLs.",16,{"inputs":[{"name":"relativeschemedata"}],"output":{"name":"option"}}],[11,"serialize_path","","Serialize the path as a string.",16,{"inputs":[{"name":"relativeschemedata"}],"output":{"name":"string"}}],[11,"serialize_userinfo","","Serialize the userinfo as a string.",16,{"inputs":[{"name":"relativeschemedata"}],"output":{"name":"string"}}],[11,"fmt","","",16,{"inputs":[{"name":"relativeschemedata"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Url","hyper","The parsed representation of an absolute URL.",null,null],[12,"scheme","","The scheme (a.k.a. protocol) of the URL, in ASCII lower case.",0,null],[12,"scheme_data","","The components of the URL whose representation depends on where the scheme is *relative*.",0,null],[12,"query","","The query string of the URL.",0,null],[12,"fragment","","The fragment identifier of the URL.",0,null],[11,"matches","language_tags","Matches language tags. The first language acts as a language range, the second one is used\nas a normal language tag. None fields in the language range are ignored. If the language\ntag has more extlangs than the range these extlangs are ignored. Matches are\ncase-insensitive. `*` in language ranges are represented using `None` values. The language\nrange `*` that matches language tags is created by the default language tag:\n`let wildcard: LanguageTag = Default::default();.`",19,{"inputs":[{"name":"languagetag"},{"name":"languagetag"}],"output":{"name":"bool"}}],[11,"is_language_range","","Checks if it is a language range, meaning that there are no extension and privateuse tags.",19,{"inputs":[{"name":"languagetag"}],"output":{"name":"bool"}}],[11,"canonicalize","","Returns the canonical version of the language tag.",19,{"inputs":[{"name":"languagetag"}],"output":{"name":"languagetag"}}],[11,"eq","","",20,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",20,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",20,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"fmt","","",20,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"languagetag"}],"output":{"name":"languagetag"}}],[11,"default","","",19,{"inputs":[{"name":"languagetag"}],"output":{"name":"languagetag"}}],[11,"fmt","","",19,{"inputs":[{"name":"languagetag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",19,{"inputs":[{"name":"languagetag"},{"name":"languagetag"}],"output":{"name":"bool"}}],[11,"from_str","","",19,{"inputs":[{"name":"languagetag"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"languagetag"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"LanguageTag","hyper","A language tag as described in [BCP47](http://tools.ietf.org/html/bcp47).",null,null],[12,"language","","Language subtags are used to indicate the language, ignoring all\nother aspects such as script, region or spefic invariants.",19,null],[12,"extlangs","","Extended language subtags are used to identify certain specially\nselected languages that, for various historical and compatibility\nreasons, are closely identified with or tagged using an existing\nprimary language subtag.",19,null],[12,"script","","Script subtags are used to indicate the script or writing system\nvariations that distinguish the written forms of a language or its\ndialects.",19,null],[12,"region","","Region subtags are used to indicate linguistic variations associated\nwith or appropriate to a specific country, territory, or region.\nTypically, a region subtag is used to indicate variations such as\nregional dialects or usage, or region-specific spelling conventions.\nIt can also be used to indicate that content is expressed in a way\nthat is appropriate for use throughout a region, for instance,\nSpanish content tailored to be useful throughout Latin America.",19,null],[12,"variants","","Variant subtags are used to indicate additional, well-recognized\nvariations that define a language or its dialects that are not\ncovered by other available subtags.",19,null],[12,"extensions","","Extensions provide a mechanism for extending language tags for use in\nvarious applications.  They are intended to identify information that\nis commonly used in association with languages or language tags but\nthat is not part of language identification.",19,null],[12,"privateuse","","Private use subtags are used to indicate distinctions in language\nthat are important in a given context by private agreement.",19,null],[0,"client","","HTTP Client",null,null],[3,"Client","hyper::client","A Client to use additional features with Requests.",null,null],[3,"RequestBuilder","","Options for an individual Request.",null,null],[4,"Body","","An enum of possible body types for a Request.",null,null],[13,"ChunkedBody","","A Reader does not necessarily know it's size, so it is chunked.",21,null],[13,"SizedBody","","For Readers that can know their size, like a `File`.",21,null],[13,"BufBody","","A String has a size, and uses Content-Length.",21,null],[4,"RedirectPolicy","","Behavior regarding how to handle redirects within a Client.",null,null],[13,"FollowNone","","Don't follow any redirects.",22,null],[13,"FollowAll","","Follow all redirects.",22,null],[13,"FollowIf","","Follow a redirect if the contained function returns true.",22,null],[0,"pool","","Client Connection Pooling",null,null],[3,"Pool","hyper::client::pool","The `NetworkConnector` that behaves as a connection pool used by hyper's `Client`.",null,null],[3,"Config","","Config options for the `Pool`.",null,null],[12,"max_idle","","The maximum idle connections *per host*.",23,null],[3,"PooledStream","","A Stream that will try to be returned to the Pool when dropped.",null,null],[11,"fmt","","",23,{"inputs":[{"name":"config"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",23,{"inputs":[{"name":"config"}],"output":{"name":"config"}}],[11,"new","","Creates a `Pool` with a `DefaultConnector`.",24,{"inputs":[{"name":"pool"},{"name":"config"}],"output":{"name":"pool"}}],[11,"with_connector","","Creates a `Pool` with a specified `NetworkConnector`.",24,{"inputs":[{"name":"pool"},{"name":"config"},{"name":"c"}],"output":{"name":"pool"}}],[11,"clear_idle","","Clear all idle connections from the Pool, closing them.",24,{"inputs":[{"name":"pool"}],"output":null}],[11,"connect","","",24,{"inputs":[{"name":"pool"},{"name":"str"},{"name":"u16"},{"name":"str"}],"output":{"name":"result"}}],[11,"read","","",25,null],[11,"write","","",25,null],[11,"flush","","",25,{"inputs":[{"name":"pooledstream"}],"output":{"name":"result"}}],[11,"peer_addr","","",25,{"inputs":[{"name":"pooledstream"}],"output":{"name":"result"}}],[11,"set_read_timeout","","",25,{"inputs":[{"name":"pooledstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_write_timeout","","",25,{"inputs":[{"name":"pooledstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"close","","",25,{"inputs":[{"name":"pooledstream"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"set_previous_response_expected_no_content","","",25,{"inputs":[{"name":"pooledstream"},{"name":"bool"}],"output":null}],[11,"previous_response_expected_no_content","","",25,{"inputs":[{"name":"pooledstream"}],"output":{"name":"bool"}}],[11,"drop","","",25,{"inputs":[{"name":"pooledstream"}],"output":null}],[0,"request","hyper::client","Client Requests",null,null],[3,"Request","hyper::client::request","A client request to a remote server.\nThe W type tracks the state of the request, Fresh vs Streaming.",null,null],[12,"url","","The target URI for this request.",26,null],[12,"version","","The HTTP version of this request.",26,null],[11,"headers","","Read the Request headers.",26,{"inputs":[{"name":"request"}],"output":{"name":"headers"}}],[11,"method","","Read the Request method.",26,{"inputs":[{"name":"request"}],"output":{"name":"method"}}],[11,"set_write_timeout","","Set the write timeout.",26,{"inputs":[{"name":"request"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_read_timeout","","Set the read timeout.",26,{"inputs":[{"name":"request"},{"name":"option"}],"output":{"name":"result"}}],[11,"with_message","","Create a new `Request<Fresh>` that will use the given `HttpMessage` for its communication\nwith the server. This implies that the given `HttpMessage` instance has already been\nproperly initialized by the caller (e.g. a TCP connection's already established).",26,{"inputs":[{"name":"request"},{"name":"method"},{"name":"url"},{"name":"box"}],"output":{"name":"result"}}],[11,"new","","Create a new client request.",26,{"inputs":[{"name":"request"},{"name":"method"},{"name":"url"}],"output":{"name":"result"}}],[11,"with_connector","","Create a new client request with a specific underlying NetworkStream.",26,{"inputs":[{"name":"request"},{"name":"method"},{"name":"url"},{"name":"c"}],"output":{"name":"result"}}],[11,"start","","Consume a Fresh Request, writing the headers and method,\nreturning a Streaming Request.",26,{"inputs":[{"name":"request"}],"output":{"name":"result"}}],[11,"headers_mut","","Get a mutable reference to the Request headers.",26,{"inputs":[{"name":"request"}],"output":{"name":"headers"}}],[11,"send","","Completes writing the request, and returns a response to read from.",26,{"inputs":[{"name":"request"}],"output":{"name":"result"}}],[11,"write","","",26,null],[11,"flush","","",26,{"inputs":[{"name":"request"}],"output":{"name":"result"}}],[0,"response","hyper::client","Client Responses",null,null],[3,"Response","hyper::client::response","A response for a client request to a remote server.",null,null],[12,"status","","The status from the server.",27,null],[12,"headers","","The headers from the server.",27,null],[12,"version","","The HTTP version of this response from the server.",27,null],[12,"url","","The final URL of this response.",27,null],[11,"fmt","","",27,{"inputs":[{"name":"response"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new response from a server.",27,{"inputs":[{"name":"response"},{"name":"url"},{"name":"box"}],"output":{"name":"result"}}],[11,"with_message","","Creates a new response received from the server on the given `HttpMessage`.",27,{"inputs":[{"name":"response"},{"name":"url"},{"name":"box"}],"output":{"name":"result"}}],[11,"status_raw","","Get the raw status code and reason.",27,{"inputs":[{"name":"response"}],"output":{"name":"rawstatus"}}],[11,"read","","",27,null],[11,"drop","","",27,{"inputs":[{"name":"response"}],"output":null}],[8,"IntoUrl","hyper::client","A helper trait to convert common objects into a Url.",null,null],[10,"into_url","","Consumes the object, trying to return a Url.",28,{"inputs":[{"name":"intourl"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"client"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new Client.",29,{"inputs":[{"name":"client"}],"output":{"name":"client"}}],[11,"with_pool_config","","Create a new Client with a configured Pool Config.",29,{"inputs":[{"name":"client"},{"name":"config"}],"output":{"name":"client"}}],[11,"with_connector","","Create a new client with a specific connector.",29,{"inputs":[{"name":"client"},{"name":"c"}],"output":{"name":"client"}}],[11,"with_protocol","","Create a new client with a specific `Protocol`.",29,{"inputs":[{"name":"client"},{"name":"p"}],"output":{"name":"client"}}],[11,"set_redirect_policy","","Set the RedirectPolicy.",29,{"inputs":[{"name":"client"},{"name":"redirectpolicy"}],"output":null}],[11,"set_read_timeout","","Set the read timeout value for all requests.",29,{"inputs":[{"name":"client"},{"name":"option"}],"output":null}],[11,"set_write_timeout","","Set the write timeout value for all requests.",29,{"inputs":[{"name":"client"},{"name":"option"}],"output":null}],[11,"get","","Build a Get request.",29,{"inputs":[{"name":"client"},{"name":"u"}],"output":{"name":"requestbuilder"}}],[11,"head","","Build a Head request.",29,{"inputs":[{"name":"client"},{"name":"u"}],"output":{"name":"requestbuilder"}}],[11,"patch","","Build a Patch request.",29,{"inputs":[{"name":"client"},{"name":"u"}],"output":{"name":"requestbuilder"}}],[11,"post","","Build a Post request.",29,{"inputs":[{"name":"client"},{"name":"u"}],"output":{"name":"requestbuilder"}}],[11,"put","","Build a Put request.",29,{"inputs":[{"name":"client"},{"name":"u"}],"output":{"name":"requestbuilder"}}],[11,"delete","","Build a Delete request.",29,{"inputs":[{"name":"client"},{"name":"u"}],"output":{"name":"requestbuilder"}}],[11,"request","","Build a new request using this Client.",29,{"inputs":[{"name":"client"},{"name":"method"},{"name":"u"}],"output":{"name":"requestbuilder"}}],[11,"default","","",29,{"inputs":[{"name":"client"}],"output":{"name":"client"}}],[11,"body","","Set a request body to be sent.",30,{"inputs":[{"name":"requestbuilder"},{"name":"b"}],"output":{"name":"requestbuilder"}}],[11,"headers","","Add additional headers to the request.",30,{"inputs":[{"name":"requestbuilder"},{"name":"headers"}],"output":{"name":"requestbuilder"}}],[11,"header","","Add an individual new header to the request.",30,{"inputs":[{"name":"requestbuilder"},{"name":"h"}],"output":{"name":"requestbuilder"}}],[11,"send","","Execute this request and receive a Response back.",30,{"inputs":[{"name":"requestbuilder"}],"output":{"name":"result"}}],[11,"read","","",21,null],[11,"from","","",21,{"inputs":[{"name":"body"},{"name":"r"}],"output":{"name":"body"}}],[11,"into_url","hyper","",0,{"inputs":[{"name":"url"}],"output":{"name":"result"}}],[11,"fmt","hyper::client","",22,{"inputs":[{"name":"redirectpolicy"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",22,{"inputs":[{"name":"redirectpolicy"}],"output":{"name":"redirectpolicy"}}],[11,"default","","",22,{"inputs":[{"name":"redirectpolicy"}],"output":{"name":"redirectpolicy"}}],[0,"error","hyper","Error and Result module.",null,null],[4,"Error","hyper::error","A set of errors that can occur parsing HTTP streams.",null,null],[13,"Method","","An invalid `Method`, such as `GE,T`.",31,null],[13,"Uri","","An invalid `RequestUri`, such as `exam ple.domain`.",31,null],[13,"Version","","An invalid `HttpVersion`, such as `HTP/1.1`",31,null],[13,"Header","","An invalid `Header`.",31,null],[13,"TooLarge","","A message head is too large to be reasonable.",31,null],[13,"Status","","An invalid `Status`, such as `1337 ELITE`.",31,null],[13,"Io","","An `io::Error` that occurred while trying to read or write to a network stream.",31,null],[13,"Ssl","","An error from a SSL library.",31,null],[13,"Http2","","An HTTP/2-specific error, coming from the `solicit` library.",31,null],[13,"Utf8","","Parsing a field as string failed",31,null],[6,"Result","","Result type often returned from methods that can have hyper `Error`s.",null,null],[11,"fmt","","",31,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",31,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",31,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",31,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"from","","",31,{"inputs":[{"name":"error"},{"name":"ioerror"}],"output":{"name":"error"}}],[11,"from","","",31,{"inputs":[{"name":"error"},{"name":"parseerror"}],"output":{"name":"error"}}],[11,"from","","",31,{"inputs":[{"name":"error"},{"name":"utf8error"}],"output":{"name":"error"}}],[11,"from","","",31,{"inputs":[{"name":"error"},{"name":"fromutf8error"}],"output":{"name":"error"}}],[11,"from","","",31,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"error"}}],[11,"from","","",31,{"inputs":[{"name":"error"},{"name":"http2error"}],"output":{"name":"error"}}],[0,"method","hyper","The HTTP request method",null,null],[4,"Method","hyper::method","The Request Method (VERB)",null,null],[13,"Options","","OPTIONS",32,null],[13,"Get","","GET",32,null],[13,"Post","","POST",32,null],[13,"Put","","PUT",32,null],[13,"Delete","","DELETE",32,null],[13,"Head","","HEAD",32,null],[13,"Trace","","TRACE",32,null],[13,"Connect","","CONNECT",32,null],[13,"Patch","","PATCH",32,null],[13,"Extension","","Method extensions. An example would be `let m = Extension(\"FOO\".to_string())`.",32,null],[11,"fmt","","",32,{"inputs":[{"name":"method"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",32,null],[11,"eq","","",32,{"inputs":[{"name":"method"},{"name":"method"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"method"},{"name":"method"}],"output":{"name":"bool"}}],[11,"clone","","",32,{"inputs":[{"name":"method"}],"output":{"name":"method"}}],[11,"as_ref","","",32,{"inputs":[{"name":"method"}],"output":{"name":"str"}}],[11,"safe","","Whether a method is considered \"safe\", meaning the request is\nessentially read-only.",32,{"inputs":[{"name":"method"}],"output":{"name":"bool"}}],[11,"idempotent","","Whether a method is considered \"idempotent\", meaning the request has\nthe same result is executed multiple times.",32,{"inputs":[{"name":"method"}],"output":{"name":"bool"}}],[11,"from_str","","",32,{"inputs":[{"name":"method"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",32,{"inputs":[{"name":"method"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"header","hyper","Headers container, and common header fields.",null,null],[11,"new","cookie","",33,{"inputs":[{"name":"cookie"},{"name":"string"},{"name":"string"}],"output":{"name":"cookie"}}],[11,"parse","","",33,{"inputs":[{"name":"cookie"},{"name":"str"}],"output":{"name":"result"}}],[11,"pair","","",33,{"inputs":[{"name":"cookie"}],"output":{"name":"attrval"}}],[11,"new","cookie::jar","Creates a new empty cookie jar with the given signing key.",34,null],[11,"add_original","","Adds an original cookie from a request.",34,null],[11,"add","","Adds a new cookie to this cookie jar.",34,null],[11,"remove","","Removes a cookie from this cookie jar.",34,null],[11,"find","","Finds a cookie inside of this cookie jar.",34,{"inputs":[{"name":"cookiejar"},{"name":"str"}],"output":{"name":"option"}}],[11,"permanent","","Creates a child jar for permanent cookie storage.",34,{"inputs":[{"name":"cookiejar"}],"output":{"name":"cookiejar"}}],[11,"delta","","Calculates the changes that have occurred to this cookie jar over time,\nreturning a vector of `Set-Cookie` headers.",34,{"inputs":[{"name":"cookiejar"}],"output":{"name":"vec"}}],[11,"iter","","Return an iterator over the cookies in this jar.",34,{"inputs":[{"name":"cookiejar"}],"output":{"name":"iter"}}],[11,"next","","",35,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"fmt","cookie","",33,{"inputs":[{"name":"cookie"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"cookie"}],"output":{"name":"cookie"}}],[11,"eq","","",33,{"inputs":[{"name":"cookie"},{"name":"cookie"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"cookie"},{"name":"cookie"}],"output":{"name":"bool"}}],[11,"fmt","","",36,{"inputs":[{"name":"attrval"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",33,{"inputs":[{"name":"cookie"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",33,{"inputs":[{"name":"cookie"},{"name":"str"}],"output":{"name":"result"}}],[3,"CookiePair","hyper::header","",null,null],[12,"name","","",33,null],[12,"value","","",33,null],[12,"expires","","",33,null],[12,"max_age","","",33,null],[12,"domain","","",33,null],[12,"path","","",33,null],[12,"secure","","",33,null],[12,"httponly","","",33,null],[12,"custom","","",33,null],[3,"CookieJar","","A jar of cookies for managing a session",null,null],[3,"EntityTag","","An entity tag, defined in [RFC7232](https://tools.ietf.org/html/rfc7232#section-2.3)",null,null],[12,"weak","","Weakness indicator for the tag",37,null],[3,"HttpDate","","A `time::Time` with HTTP formatting and parsing",null,null],[3,"Quality","","Represents a quality used in quality values.",null,null],[3,"QualityItem","","Represents an item with a quality value as defined in\n[RFC7231](https://tools.ietf.org/html/rfc7231#section-5.3.1).",null,null],[12,"item","","The actual contents of the field.",38,null],[12,"quality","","The quality (client or server preference) for the value.",38,null],[3,"Accept","","`Accept` header, defined in [RFC7231](http://tools.ietf.org/html/rfc7231#section-5.3.2)",null,null],[3,"AccessControlAllowCredentials","","`Access-Control-Allow-Credentials` header, part of\n[CORS](http://www.w3.org/TR/cors/#access-control-allow-headers-response-header)",null,null],[3,"AccessControlAllowHeaders","","`Access-Control-Allow-Headers` header, part of\n[CORS](http://www.w3.org/TR/cors/#access-control-allow-headers-response-header)",null,null],[3,"AccessControlAllowMethods","","`Access-Control-Allow-Methods` header, part of\n[CORS](http://www.w3.org/TR/cors/#access-control-allow-methods-response-header)",null,null],[3,"AccessControlExposeHeaders","","`Access-Control-Expose-Headers` header, part of\n[CORS](http://www.w3.org/TR/cors/#access-control-expose-headers-response-header)",null,null],[3,"AccessControlMaxAge","","`Access-Control-Max-Age` header, part of\n[CORS](http://www.w3.org/TR/cors/#access-control-max-age-response-header)",null,null],[3,"AccessControlRequestHeaders","","`Access-Control-Request-Headers` header, part of\n[CORS](http://www.w3.org/TR/cors/#access-control-request-headers-request-header)",null,null],[3,"AccessControlRequestMethod","","`Access-Control-Request-Method` header, part of\n[CORS](http://www.w3.org/TR/cors/#access-control-request-method-request-header)",null,null],[3,"AcceptCharset","","`Accept-Charset` header, defined in\n[RFC7231](http://tools.ietf.org/html/rfc7231#section-5.3.3)",null,null],[3,"AcceptEncoding","","`Accept-Encoding` header, defined in\n[RFC7231](http://tools.ietf.org/html/rfc7231#section-5.3.4)",null,null],[3,"AcceptLanguage","","`Accept-Language` header, defined in\n[RFC7231](http://tools.ietf.org/html/rfc7231#section-5.3.5)",null,null],[3,"AcceptRanges","","`Accept-Ranges` header, defined in\n[RFC7233](http://tools.ietf.org/html/rfc7233#section-2.3)",null,null],[3,"Allow","","`Allow` header, defined in [RFC7231](http://tools.ietf.org/html/rfc7231#section-7.4.1)",null,null],[3,"Authorization","","`Authorization` header, defined in [RFC7235](https://tools.ietf.org/html/rfc7235#section-4.2)",null,null],[3,"Basic","","Credential holder for Basic Authentication",null,null],[12,"username","","The username as a possibly empty string",39,null],[12,"password","","The password. `None` if the `:` delimiter character was not\npart of the parsed input.",39,null],[3,"Bearer","","Token holder for Bearer Authentication, most often seen with oauth",null,null],[12,"token","","Actual bearer token as a string",40,null],[3,"CacheControl","","`Cache-Control` header, defined in [RFC7234](https://tools.ietf.org/html/rfc7234#section-5.2)",null,null],[3,"Connection","","`Connection` header, defined in\n[RFC7230](http://tools.ietf.org/html/rfc7230#section-6.1)",null,null],[3,"ContentDisposition","","A `Content-Disposition` header, (re)defined in [RFC6266](https://tools.ietf.org/html/rfc6266)",null,null],[12,"disposition","","The disposition",41,null],[12,"parameters","","Disposition parameters",41,null],[3,"ContentLength","","`Content-Length` header, defined in\n[RFC7230](http://tools.ietf.org/html/rfc7230#section-3.3.2)",null,null],[3,"ContentEncoding","","`Content-Encoding` header, defined in\n[RFC7231](http://tools.ietf.org/html/rfc7231#section-3.1.2.2)",null,null],[3,"ContentLanguage","","`Content-Language` header, defined in\n[RFC7231](https://tools.ietf.org/html/rfc7231#section-3.1.3.2)",null,null],[3,"ContentRange","","`Content-Range` header, defined in\n[RFC7233](http://tools.ietf.org/html/rfc7233#section-4.2)",null,null],[3,"ContentType","","`Content-Type` header, defined in\n[RFC7231](http://tools.ietf.org/html/rfc7231#section-3.1.1.5)",null,null],[3,"Cookie","","`Cookie` header, defined in [RFC6265](http://tools.ietf.org/html/rfc6265#section-5.4)",null,null],[3,"Date","","`Date` header, defined in [RFC7231](http://tools.ietf.org/html/rfc7231#section-7.1.1.2)",null,null],[3,"ETag","","`ETag` header, defined in [RFC7232](http://tools.ietf.org/html/rfc7232#section-2.3)",null,null],[3,"Expires","","`Expires` header, defined in [RFC7234](http://tools.ietf.org/html/rfc7234#section-5.3)",null,null],[3,"From","","`From` header, defined in [RFC7231](http://tools.ietf.org/html/rfc7231#section-5.5.1)",null,null],[3,"Host","","The `Host` header.",null,null],[12,"hostname","","The hostname, such a example.domain.",42,null],[12,"port","","An optional port number.",42,null],[3,"IfModifiedSince","","`If-Modified-Since` header, defined in\n[RFC7232](http://tools.ietf.org/html/rfc7232#section-3.3)",null,null],[3,"IfUnmodifiedSince","","`If-Unmodified-Since` header, defined in\n[RFC7232](http://tools.ietf.org/html/rfc7232#section-3.4)",null,null],[3,"LastModified","","`Last-Modified` header, defined in\n[RFC7232](http://tools.ietf.org/html/rfc7232#section-2.2)",null,null],[3,"Location","","`Location` header, defined in\n[RFC7231](http://tools.ietf.org/html/rfc7231#section-7.1.2)",null,null],[3,"Referer","","`Referer` header, defined in\n[RFC7231](http://tools.ietf.org/html/rfc7231#section-5.5.2)",null,null],[3,"Server","","`Server` header, defined in [RFC7231](http://tools.ietf.org/html/rfc7231#section-7.4.2)",null,null],[3,"SetCookie","","`Set-Cookie` header, defined [RFC6265](http://tools.ietf.org/html/rfc6265#section-4.1)",null,null],[3,"StrictTransportSecurity","","`StrictTransportSecurity` header, defined in [RFC6797](https://tools.ietf.org/html/rfc6797)",null,null],[12,"include_subdomains","","Signals the UA that the HSTS Policy applies to this HSTS Host as well as\nany subdomains of the host's domain name.",43,null],[12,"max_age","","Specifies the number of seconds, after the reception of the STS header\nfield, during which the UA regards the host (from whom the message was\nreceived) as a Known HSTS Host.",43,null],[3,"TransferEncoding","","`Transfer-Encoding` header, defined in\n[RFC7230](http://tools.ietf.org/html/rfc7230#section-3.3.1)",null,null],[3,"Upgrade","","`Upgrade` header, defined in [RFC7230](http://tools.ietf.org/html/rfc7230#section-6.7)",null,null],[3,"Protocol","","Protocols that appear in the `Upgrade` header field",null,null],[12,"name","","The protocol identifier",44,null],[12,"version","","The optional version of the protocol, often in the format \"DIGIT.DIGIT\" (e.g.. \"1.2\")",44,null],[3,"UserAgent","","`User-Agent` header, defined in\n[RFC7231](http://tools.ietf.org/html/rfc7231#section-5.5.3)",null,null],[3,"Headers","","A map of header fields on requests and responses.",null,null],[3,"HeadersItems","","An `Iterator` over the fields in a `Headers` map.",null,null],[3,"HeaderView","","Returned with the `HeadersItems` iterator.",null,null],[3,"HeaderFormatter","","A wrapper around any Header with a Display impl that calls fmt_header.",null,null],[4,"Charset","","A Mime charset.",null,null],[13,"Us_Ascii","","US ASCII",45,null],[13,"Iso_8859_1","","ISO-8859-1",45,null],[13,"Iso_8859_2","","ISO-8859-2",45,null],[13,"Iso_8859_3","","ISO-8859-3",45,null],[13,"Iso_8859_4","","ISO-8859-4",45,null],[13,"Iso_8859_5","","ISO-8859-5",45,null],[13,"Iso_8859_6","","ISO-8859-6",45,null],[13,"Iso_8859_7","","ISO-8859-7",45,null],[13,"Iso_8859_8","","ISO-8859-8",45,null],[13,"Iso_8859_9","","ISO-8859-9",45,null],[13,"Iso_8859_10","","ISO-8859-10",45,null],[13,"Shift_Jis","","Shift_JIS",45,null],[13,"Euc_Jp","","EUC-JP",45,null],[13,"Iso_2022_Kr","","ISO-2022-KR",45,null],[13,"Euc_Kr","","EUC-KR",45,null],[13,"Iso_2022_Jp","","ISO-2022-JP",45,null],[13,"Iso_2022_Jp_2","","ISO-2022-JP-2",45,null],[13,"Iso_8859_6_E","","ISO-8859-6-E",45,null],[13,"Iso_8859_6_I","","ISO-8859-6-I",45,null],[13,"Iso_8859_8_E","","ISO-8859-8-E",45,null],[13,"Iso_8859_8_I","","ISO-8859-8-I",45,null],[13,"Gb2312","","GB2312",45,null],[13,"Big5","","Big5",45,null],[13,"Koi8_R","","KOI8-R",45,null],[13,"Ext","","An arbitrary charset specified as a string",45,null],[4,"Encoding","","A value to represent an encoding used in `Transfer-Encoding`\nor `Accept-Encoding` header.",null,null],[13,"Chunked","","The `chunked` encoding.",46,null],[13,"Gzip","","The `gzip` encoding.",46,null],[13,"Deflate","","The `deflate` encoding.",46,null],[13,"Compress","","The `compress` encoding.",46,null],[13,"Identity","","The `identity` encoding.",46,null],[13,"EncodingExt","","Some other encoding that is less common, can be any String.",46,null],[4,"AccessControlAllowOrigin","","The `Access-Control-Allow-Origin` response header,\npart of [CORS](http://www.w3.org/TR/cors/#access-control-allow-origin-response-header)",null,null],[13,"Any","","Allow all origins",47,null],[13,"Null","","A hidden origin",47,null],[13,"Value","","Allow one particular origin",47,null],[4,"RangeUnit","","Range Units, described in [RFC7233](http://tools.ietf.org/html/rfc7233#section-2)",null,null],[13,"Bytes","","Indicating byte-range requests are supported.",48,null],[13,"None","","Reserved as keyword, indicating no ranges are supported.",48,null],[13,"Unregistered","","The given range unit is not registered at IANA.",48,null],[4,"CacheDirective","","CacheControl contains a list of these directives.",null,null],[13,"NoCache","","\"no-cache\"",49,null],[13,"NoStore","","\"no-store\"",49,null],[13,"NoTransform","","\"no-transform\"",49,null],[13,"OnlyIfCached","","\"only-if-cached\"",49,null],[13,"MaxAge","","\"max-age=delta\"",49,null],[13,"MaxStale","","\"max-stale=delta\"",49,null],[13,"MinFresh","","\"min-fresh=delta\"",49,null],[13,"MustRevalidate","","\"must-revalidate\"",49,null],[13,"Public","","\"public\"",49,null],[13,"Private","","\"private\"",49,null],[13,"ProxyRevalidate","","\"proxy-revalidate\"",49,null],[13,"SMaxAge","","\"s-maxage=delta\"",49,null],[13,"Extension","","Extension directives. Optionally include an argument.",49,null],[4,"ConnectionOption","","Values that can be in the `Connection` header.",null,null],[13,"KeepAlive","","The `keep-alive` connection value.",50,null],[13,"Close","","The `close` connection value.",50,null],[13,"ConnectionHeader","","Values in the Connection header that are supposed to be names of other Headers.",50,null],[4,"DispositionType","","The implied disposition of the content of the HTTP body",null,null],[13,"Inline","","Inline implies default processing",51,null],[13,"Attachment","","Attachment implies that the recipient should prompt the user to save the response locally,\nrather than process it normally (as per its media type).",51,null],[13,"Ext","","Extension type.  Should be handled by recipients the same way as Attachment",51,null],[4,"DispositionParam","","A parameter to the disposition type",null,null],[13,"Filename","","A Filename consisting of a Charset, an optional LanguageTag, and finally a sequence of\nbytes representing the filename",52,null],[13,"Ext","","Extension type consisting of token and value.  Recipients should ignore unrecognized\nparameters.",52,null],[4,"ContentRangeSpec","","Content-Range, described in [RFC7233](https://tools.ietf.org/html/rfc7233#section-4.2)",null,null],[13,"Bytes","","Byte range",53,null],[12,"range","hyper::header::ContentRangeSpec","First and last bytes of the range, omitted if request could not be\nsatisfied",53,null],[12,"instance_length","","Total length of the instance, can be omitted if unknown",53,null],[13,"Unregistered","hyper::header","Custom range, with unit not registered at IANA",53,null],[12,"unit","hyper::header::ContentRangeSpec","other-range-unit",53,null],[12,"resp","","other-range-resp",53,null],[4,"Expect","hyper::header","The `Expect` header.",null,null],[13,"Continue","","The value `100-continue`.",54,null],[4,"IfMatch","","`If-Match` header, defined in\n[RFC7232](https://tools.ietf.org/html/rfc7232#section-3.1)",null,null],[13,"Any","","Any value is a match",55,null],[13,"Items","","Only the listed items are a match",55,null],[4,"IfNoneMatch","","`If-None-Match` header, defined in\n[RFC7232](https://tools.ietf.org/html/rfc7232#section-3.2)",null,null],[13,"Any","","Any value is a match",56,null],[13,"Items","","Only the listed items are a match",56,null],[4,"IfRange","","`If-Range` header, defined in [RFC7233](http://tools.ietf.org/html/rfc7233#section-3.2)",null,null],[13,"EntityTag","","The entity-tag the client has of the resource",57,null],[13,"Date","","The date when the client retrieved the resource",57,null],[4,"Pragma","","The `Pragma` header defined by HTTP/1.0.",null,null],[13,"NoCache","","Corresponds to the `no-cache` value.",58,null],[13,"Ext","","Every value other than `no-cache`.",58,null],[4,"Range","","`Range` header, defined in [RFC7233](https://tools.ietf.org/html/rfc7233#section-3.1)",null,null],[13,"Bytes","","Byte range",59,null],[13,"Unregistered","","Custom range, with unit not registered at IANA\n(`other-range-unit`: String , `other-range-set`: String)",59,null],[4,"ByteRangeSpec","","Each Range::Bytes header can contain one or more ByteRangeSpecs.\nEach ByteRangeSpec defines a range of bytes to fetch",null,null],[13,"FromTo","","Get all bytes between x and y (\"x-y\")",60,null],[13,"AllFrom","","Get all bytes starting from x (\"x-\")",60,null],[13,"Last","","Get last x bytes (\"-x\")",60,null],[4,"ProtocolName","","A protocol name used to identify a spefic protocol. Names are case-sensitive\nexcept for the `WebSocket` value.",null,null],[13,"Http","","`HTTP` value, Hypertext Transfer Protocol",61,null],[13,"Tls","","`TLS` value, Transport Layer Security [RFC2817](http://tools.ietf.org/html/rfc2817)",61,null],[13,"WebSocket","","`WebSocket` value, matched case insensitively,Web Socket Protocol\n[RFC6455](http://tools.ietf.org/html/rfc6455)",61,null],[13,"H2c","","`h2c` value, HTTP/2 over cleartext TCP",61,null],[13,"Unregistered","","Any other protocol name not known to hyper",61,null],[4,"Vary","","`Vary` header, defined in [RFC7231](https://tools.ietf.org/html/rfc7231#section-7.1.4)",null,null],[13,"Any","","Any value is a match",62,null],[13,"Items","","Only the listed items are a match",62,null],[5,"qitem","","Convinience function to wrap a value in a `QualityItem`\nSets `q` to the default 1.0",null,{"inputs":[{"name":"t"}],"output":{"name":"qualityitem"}}],[5,"q","","Convenience function to create a `Quality` from a float.",null,{"inputs":[{"name":"f32"}],"output":{"name":"quality"}}],[11,"eq","","",63,{"inputs":[{"name":"accept"},{"name":"accept"}],"output":{"name":"bool"}}],[11,"ne","","",63,{"inputs":[{"name":"accept"},{"name":"accept"}],"output":{"name":"bool"}}],[11,"fmt","","",63,{"inputs":[{"name":"accept"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",63,{"inputs":[{"name":"accept"}],"output":{"name":"accept"}}],[11,"new","collections::vec","Constructs a new, empty `Vec<T>`.",64,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"with_capacity","","Constructs a new, empty `Vec<T>` with the specified capacity.",64,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"from_raw_parts","","Creates a `Vec<T>` directly from the raw components of another vector.",64,null],[11,"capacity","","Returns the number of elements the vector can hold without\nreallocating.",64,{"inputs":[{"name":"vec"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the given `Vec<T>`. The collection may reserve more space to avoid\nfrequent reallocations.",64,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to\nbe inserted in the given `Vec<T>`. Does nothing if the capacity is already\nsufficient.",64,null],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",64,null],[11,"into_boxed_slice","","Converts the vector into Box<[T]>.",64,{"inputs":[{"name":"vec"}],"output":{"name":"box"}}],[11,"truncate","","Shorten a vector to be `len` elements long, dropping excess elements.",64,null],[11,"as_slice","","Extracts a slice containing the entire vector.",64,null],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",64,null],[11,"set_len","","Sets the length of a vector.",64,null],[11,"swap_remove","","Removes an element from anywhere in the vector and return it, replacing\nit with the last element.",64,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"insert","","Inserts an element at position `index` within the vector, shifting all\nelements after position `i` one position to the right.",64,null],[11,"remove","","Removes and returns the element at position `index` within the vector,\nshifting all elements after position `index` one position to the left.",64,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"retain","","Retains only the elements specified by the predicate.",64,null],[11,"push","","Appends an element to the back of a collection.",64,null],[11,"pop","","Removes the last element from a vector and returns it, or `None` if it\nis empty.",64,{"inputs":[{"name":"vec"}],"output":{"name":"option"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",64,null],[11,"drain","","Create a draining iterator that removes the specified range in the vector\nand yields the removed items from start to end. The element range is\nremoved even if the iterator is not consumed until the end.",64,{"inputs":[{"name":"vec"},{"name":"r"}],"output":{"name":"drain"}}],[11,"clear","","Clears the vector, removing all values.",64,null],[11,"len","","Returns the number of elements in the vector.",64,{"inputs":[{"name":"vec"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the vector contains no elements.",64,{"inputs":[{"name":"vec"}],"output":{"name":"bool"}}],[11,"split_off","","Splits the collection into two at the given index.",64,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"resize","","Resizes the `Vec` in-place so that `len()` is equal to `new_len`.",64,null],[11,"push_all","","",64,null],[11,"extend_from_slice","","Appends all elements in a slice to the `Vec`.",64,null],[11,"dedup","","Removes consecutive repeated elements in the vector.",64,null],[11,"clone","collections::binary_heap","",65,{"inputs":[{"name":"binaryheap"}],"output":{"name":"binaryheap"}}],[11,"clone_from","","",65,null],[11,"default","","",65,{"inputs":[{"name":"binaryheap"}],"output":{"name":"binaryheap"}}],[11,"fmt","","",65,{"inputs":[{"name":"binaryheap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates an empty `BinaryHeap` as a max-heap.",65,{"inputs":[{"name":"binaryheap"}],"output":{"name":"binaryheap"}}],[11,"with_capacity","","Creates an empty `BinaryHeap` with a specific capacity.\nThis preallocates enough memory for `capacity` elements,\nso that the `BinaryHeap` does not have to be reallocated\nuntil it contains at least that many values.",65,{"inputs":[{"name":"binaryheap"},{"name":"usize"}],"output":{"name":"binaryheap"}}],[11,"from_vec","","Creates a `BinaryHeap` from a vector. This is sometimes called\n`heapifying` the vector.",65,{"inputs":[{"name":"binaryheap"},{"name":"vec"}],"output":{"name":"binaryheap"}}],[11,"iter","","Returns an iterator visiting all values in the underlying vector, in\narbitrary order.",65,{"inputs":[{"name":"binaryheap"}],"output":{"name":"iter"}}],[11,"peek","","Returns the greatest item in the binary heap, or `None` if it is empty.",65,{"inputs":[{"name":"binaryheap"}],"output":{"name":"option"}}],[11,"capacity","","Returns the number of elements the binary heap can hold without reallocating.",65,{"inputs":[{"name":"binaryheap"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `BinaryHeap`. Does nothing if the capacity is already sufficient.",65,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the\n`BinaryHeap`. The collection may reserve more space to avoid frequent reallocations.",65,null],[11,"shrink_to_fit","","Discards as much additional capacity as possible.",65,null],[11,"pop","","Removes the greatest item from the binary heap and returns it, or `None` if it\nis empty.",65,{"inputs":[{"name":"binaryheap"}],"output":{"name":"option"}}],[11,"push","","Pushes an item onto the binary heap.",65,null],[11,"push_pop","","Pushes an item onto the binary heap, then pops the greatest item off the queue in\nan optimized fashion.",65,{"inputs":[{"name":"binaryheap"},{"name":"t"}],"output":{"name":"t"}}],[11,"replace","","Pops the greatest item off the binary heap, then pushes an item onto the queue in\nan optimized fashion. The push is done regardless of whether the binary heap\nwas empty.",65,{"inputs":[{"name":"binaryheap"},{"name":"t"}],"output":{"name":"option"}}],[11,"into_vec","","Consumes the `BinaryHeap` and returns the underlying vector\nin arbitrary order.",65,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"into_sorted_vec","","Consumes the `BinaryHeap` and returns a vector in sorted\n(ascending) order.",65,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"len","","Returns the length of the binary heap.",65,{"inputs":[{"name":"binaryheap"}],"output":{"name":"usize"}}],[11,"is_empty","","Checks if the binary heap is empty.",65,{"inputs":[{"name":"binaryheap"}],"output":{"name":"bool"}}],[11,"drain","","Clears the binary heap, returning an iterator over the removed elements.",65,{"inputs":[{"name":"binaryheap"}],"output":{"name":"drain"}}],[11,"clear","","Drops all items from the binary heap.",65,null],[11,"drop","","",66,null],[11,"clone","","",67,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",67,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",67,null],[11,"next_back","","",67,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",68,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",68,null],[11,"next_back","","",68,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"next","","",69,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",69,null],[11,"next_back","","",69,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"from","","",65,{"inputs":[{"name":"binaryheap"},{"name":"vec"}],"output":{"name":"binaryheap"}}],[11,"from","collections::vec","",64,{"inputs":[{"name":"vec"},{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"from_iter","collections::binary_heap","",65,{"inputs":[{"name":"binaryheap"},{"name":"i"}],"output":{"name":"binaryheap"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe binary heap in arbitrary order. The binary heap cannot be used\nafter calling this.",65,{"inputs":[{"name":"binaryheap"}],"output":{"name":"intoiter"}}],[11,"extend","","",65,null],[11,"extend","","",65,null],[11,"next","collections::btree::node","",70,{"inputs":[{"name":"rawitems"}],"output":{"name":"option"}}],[11,"next_back","","",70,{"inputs":[{"name":"rawitems"}],"output":{"name":"option"}}],[11,"drop","","",70,null],[11,"drop","","",71,null],[11,"as_slices","","",71,null],[11,"as_slices_mut","","",71,null],[11,"as_slices_internal","","",71,{"inputs":[{"name":"node"}],"output":{"name":"nodeslice"}}],[11,"as_slices_internal_mut","","",71,{"inputs":[{"name":"node"}],"output":{"name":"mutnodeslice"}}],[11,"keys","","",71,null],[11,"keys_mut","","",71,null],[11,"vals","","",71,null],[11,"vals_mut","","",71,null],[11,"edges","","",71,null],[11,"edges_mut","","",71,null],[11,"clone","","",71,{"inputs":[{"name":"node"}],"output":{"name":"node"}}],[11,"clone","","",72,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"search","","Searches for the given key in the node. If it finds an exact match,\n`Found` will be yielded with the matching index. If it doesn't find an exact match,\n`GoDown` will be yielded with the index of the subtree the key must lie in.",71,{"inputs":[{"name":"node"},{"name":"noderef"},{"name":"q"}],"output":{"name":"searchresult"}}],[11,"make_leaf_root","","Make a leaf root from scratch",71,{"inputs":[{"name":"node"},{"name":"usize"}],"output":{"name":"node"}}],[11,"make_internal_root","","Make an internal root and swap it with an old root",71,null],[11,"len","","How many key-value pairs the node contains",71,{"inputs":[{"name":"node"}],"output":{"name":"usize"}}],[11,"is_empty","","Does the node not contain any key-value pairs",71,{"inputs":[{"name":"node"}],"output":{"name":"bool"}}],[11,"capacity","","How many key-value pairs the node can fit",71,{"inputs":[{"name":"node"}],"output":{"name":"usize"}}],[11,"is_leaf","","If the node has any children",71,{"inputs":[{"name":"node"}],"output":{"name":"bool"}}],[11,"is_underfull","","if the node has too few elements",71,{"inputs":[{"name":"node"}],"output":{"name":"bool"}}],[11,"is_full","","if the node cannot fit any more elements",71,{"inputs":[{"name":"node"}],"output":{"name":"bool"}}],[11,"node","","Returns a reference to the node that contains the pointed-to edge or key/value pair. This\nis very different from `edge` and `edge_mut` because those return children of the node\nreturned by `node`.",72,{"inputs":[{"name":"handle"}],"output":{"name":"node"}}],[11,"as_raw","","Converts a handle into one that stores the same information using a raw pointer. This can\nbe useful in conjunction with `from_raw` when the type system is insufficient for\ndetermining the lifetimes of the nodes.",72,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"from_raw","","Converts from a handle stored with a raw pointer, which isn't directly usable, to a handle\nstored with a reference. This is an unsafe inverse of `as_raw`, and together they allow\nunsafely extending the lifetime of the reference to the `Node`.",72,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"from_raw_mut","","Converts from a handle stored with a raw pointer, which isn't directly usable, to a handle\nstored with a mutable reference. This is an unsafe inverse of `as_raw`, and together they\nallow unsafely extending the lifetime of the reference to the `Node`.",72,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"into_edge","","Turns the handle into a reference to the edge it points at. This is necessary because the\nreturned pointer has a larger lifetime than what would be returned by `edge` or `edge_mut`,\nmaking it more suitable for moving down a chain of nodes.",72,{"inputs":[{"name":"handle"}],"output":{"name":"node"}}],[11,"into_edge_mut","","Turns the handle into a mutable reference to the edge it points at. This is necessary\nbecause the returned pointer has a larger lifetime than what would be returned by\n`edge_mut`, making it more suitable for moving down a chain of nodes.",72,{"inputs":[{"name":"handle"}],"output":{"name":"node"}}],[11,"force","","Figure out whether this handle is pointing to something in a leaf node or to something in\nan internal node, clarifying the type according to the result.",72,{"inputs":[{"name":"handle"}],"output":{"name":"forceresult"}}],[11,"insert_as_leaf","","Tries to insert this key-value pair at the given index in this leaf node\nIf the node is full, we have to split it.",72,null],[11,"edge_mut","","Returns a mutable reference to the edge pointed-to by this handle. This should not be\nconfused with `node`, which references the parent node of what is returned here.",72,{"inputs":[{"name":"handle"}],"output":{"name":"node"}}],[11,"insert_as_internal","","Tries to insert this key-value pair at the given index in this internal node\nIf the node is full, we have to split it.",72,{"inputs":[{"name":"handle"},{"name":"k"},{"name":"v"},{"name":"node"}],"output":{"name":"insertionresult"}}],[11,"handle_underflow","","Handle an underflow in this node's child. We favor handling \"to the left\" because we know\nwe're empty, but our neighbour can be full. Handling to the left means when we choose to\nsteal, we pop off the end of our neighbour (always fast) and \"unshift\" ourselves\n(always slow, but at least faster since we know we're half-empty).\nHandling \"to the right\" reverses these roles. Of course, we merge whenever possible\nbecause we want dense nodes, and merging is about equal work regardless of direction.",72,null],[11,"into_kv","","Turns the handle into references to the key and value it points at. This is necessary\nbecause the returned pointers have larger lifetimes than what would be returned by `key`\nor `val`.",72,null],[11,"into_kv_mut","","Turns the handle into mutable references to the key and value it points at. This is\nnecessary because the returned pointers have larger lifetimes than what would be returned\nby `key_mut` or `val_mut`.",72,null],[11,"into_left_edge","","Convert this handle into one pointing at the edge immediately to the left of the key/value\npair pointed-to by this handle. This is useful because it returns a reference with larger\nlifetime than `left_edge`.",72,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"key_mut","","Returns a mutable reference to the key pointed-to by this handle. This doesn't return a\nreference with a lifetime as large as `into_kv_mut`, but it also does not consume the\nhandle.",72,{"inputs":[{"name":"handle"}],"output":{"name":"k"}}],[11,"val_mut","","Returns a mutable reference to the value pointed-to by this handle. This doesn't return a\nreference with a lifetime as large as `into_kv_mut`, but it also does not consume the\nhandle.",72,{"inputs":[{"name":"handle"}],"output":{"name":"v"}}],[11,"left_edge","","Gets the handle pointing to the edge immediately to the left of the key/value pair pointed\nto by this handle.",72,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"right_edge","","Gets the handle pointing to the edge immediately to the right of the key/value pair pointed\nto by this handle.",72,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"remove_as_leaf","","Removes the key/value pair at the handle's location.",72,null],[11,"kv_handle","","Returns the mutable handle pointing to the key/value pair at a given index.",71,{"inputs":[{"name":"node"},{"name":"usize"}],"output":{"name":"handle"}}],[11,"iter","","",71,{"inputs":[{"name":"node"}],"output":{"name":"abstraversal"}}],[11,"iter_mut","","",71,{"inputs":[{"name":"node"}],"output":{"name":"abstraversal"}}],[11,"into_iter","","",71,{"inputs":[{"name":"node"}],"output":{"name":"abstraversal"}}],[11,"hoist_lone_child","","When a node has no keys or values and only a single edge, extract that edge.",71,null],[11,"clone","","",73,{"inputs":[{"name":"elemsandedges"}],"output":{"name":"elemsandedges"}}],[11,"next_kv","","",73,{"inputs":[{"name":"elemsandedges"}],"output":{"name":"option"}}],[11,"next_kv_back","","",73,{"inputs":[{"name":"elemsandedges"}],"output":{"name":"option"}}],[11,"next_edge","","",73,{"inputs":[{"name":"elemsandedges"}],"output":{"name":"option"}}],[11,"next_edge_back","","",73,{"inputs":[{"name":"elemsandedges"}],"output":{"name":"option"}}],[11,"next_kv","","",74,{"inputs":[{"name":"movetraversalimpl"}],"output":{"name":"option"}}],[11,"next_kv_back","","",74,{"inputs":[{"name":"movetraversalimpl"}],"output":{"name":"option"}}],[11,"next_edge","","",74,{"inputs":[{"name":"movetraversalimpl"}],"output":{"name":"option"}}],[11,"next_edge_back","","",74,{"inputs":[{"name":"movetraversalimpl"}],"output":{"name":"option"}}],[11,"drop","","",74,null],[11,"clone","","",75,{"inputs":[{"name":"abstraversal"}],"output":{"name":"abstraversal"}}],[11,"next","","",75,{"inputs":[{"name":"abstraversal"}],"output":{"name":"option"}}],[11,"next_back","","",75,{"inputs":[{"name":"abstraversal"}],"output":{"name":"option"}}],[11,"next_edge_item","","Advances the iterator and returns the item if it's an edge. Returns None\nand does nothing if the first item is not an edge.",75,{"inputs":[{"name":"abstraversal"}],"output":{"name":"option"}}],[11,"next_edge_item_back","","Advances the iterator and returns the item if it's an edge. Returns None\nand does nothing if the last item is not an edge.",75,{"inputs":[{"name":"abstraversal"}],"output":{"name":"option"}}],[11,"next_kv_item","","Advances the iterator and returns the item if it's a key-value pair. Returns None\nand does nothing if the first item is not a key-value pair.",75,{"inputs":[{"name":"abstraversal"}],"output":{"name":"option"}}],[11,"next_kv_item_back","","Advances the iterator and returns the item if it's a key-value pair. Returns None\nand does nothing if the last item is not a key-value pair.",75,{"inputs":[{"name":"abstraversal"}],"output":{"name":"option"}}],[11,"slice_from","","Returns a sub-slice with elements starting with `min_key`.",76,{"inputs":[{"name":"nodeslice"},{"name":"q"}],"output":{"name":"nodeslice"}}],[11,"slice_to","","Returns a sub-slice with elements up to and including `max_key`.",76,{"inputs":[{"name":"nodeslice"},{"name":"q"}],"output":{"name":"nodeslice"}}],[11,"iter","","Returns an iterator over key/value pairs and edges in a slice.",76,{"inputs":[{"name":"nodeslice"}],"output":{"name":"abstraversal"}}],[11,"slice_from","","Returns a sub-slice with elements starting with `min_key`.",77,{"inputs":[{"name":"mutnodeslice"},{"name":"q"}],"output":{"name":"mutnodeslice"}}],[11,"slice_to","","Returns a sub-slice with elements up to and including `max_key`.",77,{"inputs":[{"name":"mutnodeslice"},{"name":"q"}],"output":{"name":"mutnodeslice"}}],[11,"iter_mut","","Returns an iterator over key/value pairs and edges in a slice.",77,{"inputs":[{"name":"mutnodeslice"}],"output":{"name":"abstraversal"}}],[11,"clone","collections::btree::map","",78,{"inputs":[{"name":"btreemap"}],"output":{"name":"btreemap"}}],[11,"clone","","",79,{"inputs":[{"name":"absiter"}],"output":{"name":"absiter"}}],[11,"new","","Makes a new empty BTreeMap with a reasonable choice for B.",78,{"inputs":[{"name":"btreemap"}],"output":{"name":"btreemap"}}],[11,"with_b","","Makes a new empty BTreeMap with the given B.",78,{"inputs":[{"name":"btreemap"},{"name":"usize"}],"output":{"name":"btreemap"}}],[11,"clear","","Clears the map, removing all values.",78,null],[11,"get","","Returns a reference to the value corresponding to the key.",78,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",78,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",78,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair into the map.",78,{"inputs":[{"name":"btreemap"},{"name":"k"},{"name":"v"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",78,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"option"}}],[11,"into_iter","","Gets an owning iterator over the entries of the map.",78,{"inputs":[{"name":"btreemap"}],"output":{"name":"intoiter"}}],[11,"deref","collections::btree::map::stack","",80,{"inputs":[{"name":"idref"}],"output":{"name":"t"}}],[11,"deref_mut","","",80,{"inputs":[{"name":"idref"}],"output":{"name":"t"}}],[11,"new","","Creates a new PartialSearchStack from a BTreeMap by initializing the stack with the\nroot of the tree.",81,{"inputs":[{"name":"partialsearchstack"},{"name":"btreemap"}],"output":{"name":"partialsearchstack"}}],[11,"with","","Breaks up the stack into a `Pusher` and the next `Node`, allowing the given closure\nto interact with, search, and finally push the `Node` onto the stack. The passed in\nclosure must be polymorphic on the `'id` lifetime parameter, as this statically\nensures that only `Handle`s from the correct `Node` can be pushed.",81,{"inputs":[{"name":"partialsearchstack"},{"name":"f"}],"output":{"name":"t"}}],[11,"push","","Pushes the requested child of the stack's current top on top of the stack. If the child\nexists, then a new PartialSearchStack is yielded. Otherwise, a VacantSearchStack is\nyielded.",82,{"inputs":[{"name":"pusher"},{"name":"handle"}],"output":{"name":"partialsearchstack"}}],[11,"seal","","Converts the PartialSearchStack into a SearchStack.",82,{"inputs":[{"name":"pusher"},{"name":"handle"}],"output":{"name":"searchstack"}}],[11,"peek","","Gets a reference to the value the stack points to.",83,{"inputs":[{"name":"searchstack"}],"output":{"name":"v"}}],[11,"peek_mut","","Gets a mutable reference to the value the stack points to.",83,{"inputs":[{"name":"searchstack"}],"output":{"name":"v"}}],[11,"into_top","","Converts the stack into a mutable reference to the value it points to, with a lifetime\ntied to the original tree.",83,{"inputs":[{"name":"searchstack"}],"output":{"name":"v"}}],[11,"remove","","Removes the key and value in the top element of the stack, then handles underflows as\ndescribed in BTree's pop function.",83,null],[11,"insert","","Inserts the key and value into the top element in the stack, and if that node has to\nsplit recursively inserts the split contents into the next element stack until\nsplits stop.",83,{"inputs":[{"name":"searchstack"},{"name":"k"},{"name":"v"}],"output":{"name":"v"}}],[11,"from_iter","collections::btree::map","",78,{"inputs":[{"name":"btreemap"},{"name":"t"}],"output":{"name":"btreemap"}}],[11,"extend","","",78,null],[11,"extend","","",78,null],[11,"hash","","",78,null],[11,"default","","",78,{"inputs":[{"name":"btreemap"}],"output":{"name":"btreemap"}}],[11,"eq","","",78,{"inputs":[{"name":"btreemap"},{"name":"btreemap"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",78,{"inputs":[{"name":"btreemap"},{"name":"btreemap"}],"output":{"name":"option"}}],[11,"cmp","","",78,{"inputs":[{"name":"btreemap"},{"name":"btreemap"}],"output":{"name":"ordering"}}],[11,"fmt","","",78,{"inputs":[{"name":"btreemap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",78,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"v"}}],[11,"traverse","collections::btree::node","",75,{"inputs":[{"name":"abstraversal"},{"name":"node"}],"output":{"name":"abstraversal"}}],[11,"traverse","","",75,{"inputs":[{"name":"abstraversal"},{"name":"node"}],"output":{"name":"abstraversal"}}],[11,"traverse","","",75,{"inputs":[{"name":"abstraversal"},{"name":"node"}],"output":{"name":"abstraversal"}}],[11,"next","collections::btree::map","",79,{"inputs":[{"name":"absiter"}],"output":{"name":"option"}}],[11,"size_hint","","",79,null],[11,"next_back","","",79,{"inputs":[{"name":"absiter"}],"output":{"name":"option"}}],[11,"clone","","",84,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",84,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",84,null],[11,"next_back","","",84,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",85,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",85,null],[11,"next_back","","",85,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",86,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",86,null],[11,"next_back","","",86,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"clone","","",87,{"inputs":[{"name":"keys"}],"output":{"name":"keys"}}],[11,"next","","",87,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"size_hint","","",87,null],[11,"next_back","","",87,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"clone","","",88,{"inputs":[{"name":"values"}],"output":{"name":"values"}}],[11,"next","","",88,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"size_hint","","",88,null],[11,"next_back","","",88,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"clone","","",89,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"next","","",89,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next_back","","",89,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next","","",90,{"inputs":[{"name":"rangemut"}],"output":{"name":"option"}}],[11,"next_back","","",90,{"inputs":[{"name":"rangemut"}],"output":{"name":"option"}}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns\na mutable reference to the value in the entry.",91,{"inputs":[{"name":"entry"},{"name":"v"}],"output":{"name":"v"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty,\nand returns a mutable reference to the value in the entry.",91,{"inputs":[{"name":"entry"},{"name":"f"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the VacantEntry's key,\nand returns a mutable reference to it.",92,{"inputs":[{"name":"vacantentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"get","","Gets a reference to the value in the entry.",93,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",93,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"into_mut","","Converts the entry into a mutable reference to its value.",93,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the OccupiedEntry's key,\nand returns the entry's old value.",93,{"inputs":[{"name":"occupiedentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"remove","","Takes the value of the entry out of the map, and returns it.",93,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"iter","","Gets an iterator over the entries of the map.",78,{"inputs":[{"name":"btreemap"}],"output":{"name":"iter"}}],[11,"iter_mut","","Gets a mutable iterator over the entries of the map.",78,{"inputs":[{"name":"btreemap"}],"output":{"name":"itermut"}}],[11,"keys","","Gets an iterator over the keys of the map.",78,{"inputs":[{"name":"btreemap"}],"output":{"name":"keys"}}],[11,"values","","Gets an iterator over the values of the map.",78,{"inputs":[{"name":"btreemap"}],"output":{"name":"values"}}],[11,"len","","Returns the number of elements in the map.",78,{"inputs":[{"name":"btreemap"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",78,{"inputs":[{"name":"btreemap"}],"output":{"name":"bool"}}],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as \"negative\ninfinity\", and if max is `Unbounded`, then it will be treated as \"positive infinity\".\nThus range(Unbounded, Unbounded) will yield the whole collection.",78,{"inputs":[{"name":"btreemap"},{"name":"bound"},{"name":"bound"}],"output":{"name":"range"}}],[11,"range_mut","","Constructs a mutable double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as \"negative\ninfinity\", and if max is `Unbounded`, then it will be treated as \"positive infinity\".\nThus range(Unbounded, Unbounded) will yield the whole collection.",78,{"inputs":[{"name":"btreemap"},{"name":"bound"},{"name":"bound"}],"output":{"name":"rangemut"}}],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",78,{"inputs":[{"name":"btreemap"},{"name":"k"}],"output":{"name":"entry"}}],[11,"partial_cmp","collections::btree::set","",94,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"option"}}],[11,"lt","","",94,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"le","","",94,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"gt","","",94,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"ge","","",94,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"cmp","","",94,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"ordering"}}],[11,"eq","","",94,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"ne","","",94,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"hash","","",94,null],[11,"clone","","",94,{"inputs":[{"name":"btreeset"}],"output":{"name":"btreeset"}}],[11,"new","","Makes a new BTreeSet with a reasonable choice of B.",94,{"inputs":[{"name":"btreeset"}],"output":{"name":"btreeset"}}],[11,"with_b","","Makes a new BTreeSet with the given B.",94,{"inputs":[{"name":"btreeset"},{"name":"usize"}],"output":{"name":"btreeset"}}],[11,"iter","","Gets an iterator over the BTreeSet's contents.",94,{"inputs":[{"name":"btreeset"}],"output":{"name":"iter"}}],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the set, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as \"negative\ninfinity\", and if max is `Unbounded`, then it will be treated as \"positive infinity\".\nThus range(Unbounded, Unbounded) will yield the whole collection.",94,{"inputs":[{"name":"btreeset"},{"name":"bound"},{"name":"bound"}],"output":{"name":"range"}}],[11,"difference","","Visits the values representing the difference, in ascending order.",94,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"difference"}}],[11,"symmetric_difference","","Visits the values representing the symmetric difference, in ascending order.",94,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"symmetricdifference"}}],[11,"intersection","","Visits the values representing the intersection, in ascending order.",94,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"intersection"}}],[11,"union","","Visits the values representing the union, in ascending order.",94,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"union"}}],[11,"len","","Returns the number of elements in the set.",94,{"inputs":[{"name":"btreeset"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the set contains no elements.",94,{"inputs":[{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"clear","","Clears the set, removing all values.",94,null],[11,"contains","","Returns `true` if the set contains a value.",94,{"inputs":[{"name":"btreeset"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get","","Returns a reference to the value in the set, if any, that is equal to the given value.",94,{"inputs":[{"name":"btreeset"},{"name":"q"}],"output":{"name":"option"}}],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",94,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns `true` if the set is a subset of another.",94,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns `true` if the set is a superset of another.",94,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"insert","","Adds a value to the set.",94,{"inputs":[{"name":"btreeset"},{"name":"t"}],"output":{"name":"bool"}}],[11,"replace","","Adds a value to the set, replacing the existing value, if any, that is equal to the given\none. Returns the replaced value.",94,{"inputs":[{"name":"btreeset"},{"name":"t"}],"output":{"name":"option"}}],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",94,{"inputs":[{"name":"btreeset"},{"name":"q"}],"output":{"name":"bool"}}],[11,"take","","Removes and returns the value in the set, if any, that is equal to the given one.",94,{"inputs":[{"name":"btreeset"},{"name":"q"}],"output":{"name":"option"}}],[11,"from_iter","","",94,{"inputs":[{"name":"btreeset"},{"name":"i"}],"output":{"name":"btreeset"}}],[11,"into_iter","","Gets an iterator for moving out the BtreeSet's contents.",94,{"inputs":[{"name":"btreeset"}],"output":{"name":"intoiter"}}],[11,"extend","","",94,null],[11,"extend","","",94,null],[11,"default","","",94,{"inputs":[{"name":"btreeset"}],"output":{"name":"btreeset"}}],[11,"fmt","","",94,{"inputs":[{"name":"btreeset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",95,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",95,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",95,null],[11,"next_back","","",95,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",96,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",96,null],[11,"next_back","","",96,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"clone","","",97,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"next","","",97,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next_back","","",97,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"clone","","",98,{"inputs":[{"name":"difference"}],"output":{"name":"difference"}}],[11,"next","","",98,{"inputs":[{"name":"difference"}],"output":{"name":"option"}}],[11,"clone","","",99,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"symmetricdifference"}}],[11,"next","","",99,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"option"}}],[11,"clone","","",100,{"inputs":[{"name":"intersection"}],"output":{"name":"intersection"}}],[11,"next","","",100,{"inputs":[{"name":"intersection"}],"output":{"name":"option"}}],[11,"clone","","",101,{"inputs":[{"name":"union"}],"output":{"name":"union"}}],[11,"next","","",101,{"inputs":[{"name":"union"}],"output":{"name":"option"}}],[11,"borrow","collections::borrow","",102,{"inputs":[{"name":"cow"}],"output":{"name":"b"}}],[11,"clone","","",102,{"inputs":[{"name":"cow"}],"output":{"name":"cow"}}],[11,"to_mut","","Acquires a mutable reference to the owned form of the data.",102,null],[11,"into_owned","","Extracts the owned data.",102,null],[11,"deref","","",102,{"inputs":[{"name":"cow"}],"output":{"name":"b"}}],[11,"cmp","","",102,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"ordering"}}],[11,"eq","","",102,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",102,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"option"}}],[11,"fmt","","",102,{"inputs":[{"name":"cow"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",102,{"inputs":[{"name":"cow"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",102,null],[11,"into_cow","","",102,{"inputs":[{"name":"cow"}],"output":{"name":"cow"}}],[11,"as_ref","","",102,{"inputs":[{"name":"cow"}],"output":{"name":"t"}}],[11,"hash","collections::enum_set","",103,null],[11,"cmp","","",103,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",103,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"option"}}],[11,"lt","","",103,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"le","","",103,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"gt","","",103,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"ge","","",103,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"eq","","",103,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"ne","","",103,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"clone","","",103,{"inputs":[{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"fmt","","",103,{"inputs":[{"name":"enumset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Returns an empty `EnumSet`.",103,{"inputs":[{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"len","","Returns the number of elements in the given `EnumSet`.",103,{"inputs":[{"name":"enumset"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the `EnumSet` is empty.",103,{"inputs":[{"name":"enumset"}],"output":{"name":"bool"}}],[11,"clear","","",103,null],[11,"is_disjoint","","Returns `false` if the `EnumSet` contains any enum of the given `EnumSet`.",103,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns `true` if a given `EnumSet` is included in this `EnumSet`.",103,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns `true` if this `EnumSet` is included in the given `EnumSet`.",103,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"union","","Returns the union of both `EnumSets`.",103,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"intersection","","Returns the intersection of both `EnumSets`.",103,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"insert","","Adds an enum to the `EnumSet`, and returns `true` if it wasn't there before",103,{"inputs":[{"name":"enumset"},{"name":"e"}],"output":{"name":"bool"}}],[11,"remove","","Removes an enum from the EnumSet",103,{"inputs":[{"name":"enumset"},{"name":"e"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` if an `EnumSet` contains a given enum.",103,{"inputs":[{"name":"enumset"},{"name":"e"}],"output":{"name":"bool"}}],[11,"iter","","Returns an iterator over an `EnumSet`.",103,{"inputs":[{"name":"enumset"}],"output":{"name":"iter"}}],[11,"sub","","",103,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"bitor","","",103,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"bitand","","",103,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"bitxor","","",103,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"clone","","",104,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",104,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",104,null],[11,"from_iter","","",103,{"inputs":[{"name":"enumset"},{"name":"i"}],"output":{"name":"enumset"}}],[11,"extend","","",103,null],[11,"extend","","",103,null],[11,"clone","core::fmt::rt::v1","",105,{"inputs":[{"name":"argument"}],"output":{"name":"argument"}}],[11,"clone","","",106,{"inputs":[{"name":"formatspec"}],"output":{"name":"formatspec"}}],[11,"eq","","",107,{"inputs":[{"name":"alignment"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"ne","","",107,{"inputs":[{"name":"alignment"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"clone","","",107,{"inputs":[{"name":"alignment"}],"output":{"name":"alignment"}}],[11,"clone","","",108,{"inputs":[{"name":"count"}],"output":{"name":"count"}}],[11,"clone","","",109,{"inputs":[{"name":"position"}],"output":{"name":"position"}}],[11,"clone","collections::linked_list","",110,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"clone","","",111,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"from","","",112,{"inputs":[{"name":"rawlink"},{"name":"option"}],"output":{"name":"rawlink"}}],[11,"clone","","",112,{"inputs":[{"name":"rawlink"}],"output":{"name":"rawlink"}}],[11,"default","","",113,{"inputs":[{"name":"linkedlist"}],"output":{"name":"linkedlist"}}],[11,"new","","Creates an empty `LinkedList`.",113,{"inputs":[{"name":"linkedlist"}],"output":{"name":"linkedlist"}}],[11,"append","","Moves all elements from `other` to the end of the list.",113,null],[11,"iter","","Provides a forward iterator.",113,{"inputs":[{"name":"linkedlist"}],"output":{"name":"iter"}}],[11,"iter_mut","","Provides a forward iterator with mutable references.",113,{"inputs":[{"name":"linkedlist"}],"output":{"name":"itermut"}}],[11,"is_empty","","Returns `true` if the `LinkedList` is empty.",113,{"inputs":[{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"len","","Returns the length of the `LinkedList`.",113,{"inputs":[{"name":"linkedlist"}],"output":{"name":"usize"}}],[11,"clear","","Removes all elements from the `LinkedList`.",113,null],[11,"front","","Provides a reference to the front element, or `None` if the list is\nempty.",113,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the list\nis empty.",113,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the list is\nempty.",113,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the list\nis empty.",113,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"push_front","","Adds an element first in the list.",113,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the list is\nempty.",113,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"push_back","","Appends an element to the back of a list",113,null],[11,"pop_back","","Removes the last element from a list and returns it, or `None` if\nit is empty.",113,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"split_off","","Splits the list into two at the given index. Returns everything after the given index,\nincluding the index.",113,{"inputs":[{"name":"linkedlist"},{"name":"usize"}],"output":{"name":"linkedlist"}}],[11,"drop","","",113,null],[11,"next","","",110,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",110,null],[11,"next_back","","",110,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",114,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",114,null],[11,"next_back","","",114,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"insert_next","","Inserts `elt` just after the element most recently returned by `.next()`.\nThe inserted element does not appear in the iteration.",114,null],[11,"peek_next","","Provides a reference to the next element, without changing the iterator.",114,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",111,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",111,null],[11,"next_back","","",111,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","",113,{"inputs":[{"name":"linkedlist"},{"name":"t"}],"output":{"name":"linkedlist"}}],[11,"into_iter","","Consumes the list into an iterator yielding elements by value.",113,{"inputs":[{"name":"linkedlist"}],"output":{"name":"intoiter"}}],[11,"extend","","",113,null],[11,"extend","","",113,null],[11,"eq","","",113,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"ne","","",113,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",113,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"cmp","","",113,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"ordering"}}],[11,"clone","","",113,{"inputs":[{"name":"linkedlist"}],"output":{"name":"linkedlist"}}],[11,"fmt","","",113,{"inputs":[{"name":"linkedlist"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",113,null],[11,"start","core::ops","",115,{"inputs":[{"name":"rangefrom"}],"output":{"name":"option"}}],[11,"end","","",116,{"inputs":[{"name":"rangeto"}],"output":{"name":"option"}}],[11,"start","","",117,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"end","","",117,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"borrow","collections::vec","",64,null],[11,"borrow_mut","","",64,null],[11,"clone","collections::str","",118,{"inputs":[{"name":"utf16units"}],"output":{"name":"utf16units"}}],[11,"next","","",118,{"inputs":[{"name":"utf16units"}],"output":{"name":"option"}}],[11,"size_hint","","",118,null],[11,"borrow","collections::string","",119,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"fmt","core::str::pattern","",120,{"inputs":[{"name":"searchstep"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",120,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"ne","","",120,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"clone","","",120,{"inputs":[{"name":"searchstep"}],"output":{"name":"searchstep"}}],[11,"clone","","",121,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"chareqsearcher"}}],[11,"into_searcher","","",122,{"inputs":[{"name":"chareqpattern"},{"name":"str"}],"output":{"name":"chareqsearcher"}}],[11,"haystack","","",121,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"str"}}],[11,"next","","",121,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"next_back","","",121,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"clone","","",123,{"inputs":[{"name":"charsearcher"}],"output":{"name":"charsearcher"}}],[11,"haystack","","",123,{"inputs":[{"name":"charsearcher"}],"output":{"name":"str"}}],[11,"next","","",123,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",123,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",123,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",123,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",123,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",123,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"clone","","",124,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"charslicesearcher"}}],[11,"haystack","","",124,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"str"}}],[11,"next","","",124,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",124,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",124,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",124,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",124,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",124,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"clone","","",125,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"charpredicatesearcher"}}],[11,"haystack","","",125,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"str"}}],[11,"next","","",125,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",125,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",125,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",125,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",125,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",125,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"fmt","","",126,{"inputs":[{"name":"strsearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",126,{"inputs":[{"name":"strsearcher"}],"output":{"name":"strsearcher"}}],[11,"fmt","","",127,{"inputs":[{"name":"strsearcherimpl"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",127,{"inputs":[{"name":"strsearcherimpl"}],"output":{"name":"strsearcherimpl"}}],[11,"fmt","","",128,{"inputs":[{"name":"emptyneedle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",128,{"inputs":[{"name":"emptyneedle"}],"output":{"name":"emptyneedle"}}],[11,"haystack","","",126,{"inputs":[{"name":"strsearcher"}],"output":{"name":"str"}}],[11,"next","","",126,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",126,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",126,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",126,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"fmt","","",129,{"inputs":[{"name":"twowaysearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",129,{"inputs":[{"name":"twowaysearcher"}],"output":{"name":"twowaysearcher"}}],[11,"use_early_reject","","",130,{"inputs":[{"name":"matchonly"}],"output":{"name":"bool"}}],[11,"rejecting","","",130,null],[11,"matching","","",130,null],[11,"use_early_reject","","",131,{"inputs":[{"name":"rejectandmatch"}],"output":{"name":"bool"}}],[11,"rejecting","","",131,null],[11,"matching","","",131,null],[11,"cmp","collections::string","",119,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",119,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"option"}}],[11,"lt","","",119,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"le","","",119,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"gt","","",119,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ge","","",119,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"fmt","","",132,{"inputs":[{"name":"fromutf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",133,{"inputs":[{"name":"fromutf16error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new string buffer initialized with the empty string.",119,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"with_capacity","","Creates a new string buffer with the given capacity.\nThe string will be able to hold exactly `capacity` bytes without\nreallocating. If `capacity` is 0, the string will not allocate.",119,{"inputs":[{"name":"string"},{"name":"usize"}],"output":{"name":"string"}}],[11,"from_utf8","","Converts a vector of bytes to a `String`.",119,{"inputs":[{"name":"string"},{"name":"vec"}],"output":{"name":"result"}}],[11,"from_utf8_lossy","","Converts a slice of bytes to a `String`, including invalid characters.",119,null],[11,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`, returning `None`\nif `v` contains any invalid data.",119,null],[11,"from_utf16_lossy","","Decode a UTF-16 encoded vector `v` into a string, replacing\ninvalid data with the replacement character (U+FFFD).",119,null],[11,"from_raw_parts","","Creates a new `String` from a length, capacity, and pointer.",119,null],[11,"from_utf8_unchecked","","Converts a vector of bytes to a `String` without checking that the\nstring contains valid UTF-8.",119,{"inputs":[{"name":"string"},{"name":"vec"}],"output":{"name":"string"}}],[11,"into_bytes","","Returns the underlying byte buffer, encoded as UTF-8.",119,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"as_str","","Extracts a string slice containing the entire string.",119,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"push_str","","Pushes the given string onto this string buffer.",119,null],[11,"capacity","","Returns the number of bytes that this string buffer can hold without\nreallocating.",119,{"inputs":[{"name":"string"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more bytes to be inserted\nin the given `String`. The collection may reserve more space to avoid\nfrequent reallocations.",119,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more bytes to be\ninserted in the given `String`. Does nothing if the capacity is already\nsufficient.",119,null],[11,"shrink_to_fit","","Shrinks the capacity of this string buffer to match its length.",119,null],[11,"push","","Adds the given character to the end of the string.",119,null],[11,"as_bytes","","Works with the underlying buffer as a byte slice.",119,null],[11,"truncate","","Shortens a string to the specified length.",119,null],[11,"pop","","Removes the last character from the string buffer and returns it.\nReturns `None` if this string buffer is empty.",119,{"inputs":[{"name":"string"}],"output":{"name":"option"}}],[11,"remove","","Removes the character from the string buffer at byte position `idx` and\nreturns it.",119,{"inputs":[{"name":"string"},{"name":"usize"}],"output":{"name":"char"}}],[11,"insert","","Inserts a character into the string buffer at byte position `idx`.",119,null],[11,"as_mut_vec","","Views the string buffer as a mutable sequence of bytes.",119,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"len","","Returns the number of bytes in this string.",119,{"inputs":[{"name":"string"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the string contains no bytes",119,{"inputs":[{"name":"string"}],"output":{"name":"bool"}}],[11,"clear","","Truncates the string, returning it to 0 length.",119,null],[11,"drain","","Create a draining iterator that removes the specified range in the string\nand yields the removed chars from start to end. The element range is\nremoved even if the iterator is not consumed until the end.",119,{"inputs":[{"name":"string"},{"name":"r"}],"output":{"name":"drain"}}],[11,"into_boxed_str","","Converts the string into `Box<str>`.",119,{"inputs":[{"name":"string"}],"output":{"name":"box"}}],[11,"into_boxed_slice","","Converts the string into `Box<str>`.",119,{"inputs":[{"name":"string"}],"output":{"name":"box"}}],[11,"into_bytes","","Returns the bytes that were attempted to convert to a `String`.",132,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"vec"}}],[11,"utf8_error","","Fetch a `Utf8Error` to get more details about the conversion failure.",132,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"utf8error"}}],[11,"fmt","","",132,{"inputs":[{"name":"fromutf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",133,{"inputs":[{"name":"fromutf16error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",119,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"clone_from","","",119,null],[11,"from_iter","","",119,{"inputs":[{"name":"string"},{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",119,{"inputs":[{"name":"string"},{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",119,{"inputs":[{"name":"string"},{"name":"i"}],"output":{"name":"string"}}],[11,"extend","","",119,null],[11,"extend","","",119,null],[11,"extend","","",119,null],[11,"extend","","",119,null],[11,"eq","","",119,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",119,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",119,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",119,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",119,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",119,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","collections::borrow","",102,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",102,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",102,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",102,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",102,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",102,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","collections::string","",119,{"inputs":[{"name":"string"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"ne","","",119,{"inputs":[{"name":"string"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"default","","",119,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"fmt","","",119,{"inputs":[{"name":"string"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",119,{"inputs":[{"name":"string"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",119,null],[11,"add","","",119,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"string"}}],[11,"index","","",119,{"inputs":[{"name":"string"},{"name":"range"}],"output":{"name":"str"}}],[11,"index","","",119,{"inputs":[{"name":"string"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index","","",119,{"inputs":[{"name":"string"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index","","",119,{"inputs":[{"name":"string"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"index_mut","","",119,{"inputs":[{"name":"string"},{"name":"range"}],"output":{"name":"str"}}],[11,"index_mut","","",119,{"inputs":[{"name":"string"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index_mut","","",119,{"inputs":[{"name":"string"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index_mut","","",119,{"inputs":[{"name":"string"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"deref","","",119,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"deref_mut","","",119,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"from_str","","",119,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",134,{"inputs":[{"name":"parseerror"}],"output":{"name":"parseerror"}}],[11,"fmt","","",134,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",134,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"as_ref","","",119,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"as_ref","","",119,null],[11,"from","","",119,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"string"}}],[11,"from","collections::borrow","",102,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"cow"}}],[11,"from","","",102,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"cow"}}],[11,"into","collections::string","",119,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"into_cow","","",119,{"inputs":[{"name":"string"}],"output":{"name":"cow"}}],[11,"write_str","","",119,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",119,{"inputs":[{"name":"string"},{"name":"char"}],"output":{"name":"result"}}],[11,"drop","","",135,null],[11,"next","","",135,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",135,null],[11,"next_back","","",135,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"clone","collections::vec","",64,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"clone_from","","",64,null],[11,"hash","","",64,null],[11,"index","","",64,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",64,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index","","",64,null],[11,"index","","",64,null],[11,"index","","",64,null],[11,"index","","",64,null],[11,"index_mut","","",64,null],[11,"index_mut","","",64,null],[11,"index_mut","","",64,null],[11,"index_mut","","",64,null],[11,"deref","","",64,null],[11,"deref_mut","","",64,null],[11,"from_iter","","",64,{"inputs":[{"name":"vec"},{"name":"i"}],"output":{"name":"vec"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe vector (from start to end). The vector cannot be used after calling\nthis.",64,{"inputs":[{"name":"vec"}],"output":{"name":"intoiter"}}],[11,"extend","","",64,null],[11,"extend","","",64,null],[11,"eq","","",64,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",64,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","collections::borrow","",102,null],[11,"ne","","",102,null],[11,"eq","","",102,null],[11,"ne","","",102,null],[11,"eq","","",102,{"inputs":[{"name":"cow"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",102,{"inputs":[{"name":"cow"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","collections::vec","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"partial_cmp","","",64,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"option"}}],[11,"cmp","","",64,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"ordering"}}],[11,"drop","","",64,null],[11,"default","","",64,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"fmt","","",64,{"inputs":[{"name":"vec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",64,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"as_mut","","",64,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"as_ref","","",64,null],[11,"as_mut","","",64,null],[11,"from","","",64,null],[11,"from","","",64,{"inputs":[{"name":"vec"},{"name":"str"}],"output":{"name":"vec"}}],[11,"from_iter","collections::borrow","",102,{"inputs":[{"name":"cow"},{"name":"i"}],"output":{"name":"cow"}}],[11,"into_cow","collections::vec","",64,{"inputs":[{"name":"vec"}],"output":{"name":"cow"}}],[11,"next","","",136,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",136,null],[11,"count","","",136,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next_back","","",136,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"drop","","",136,null],[11,"next","","",137,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",137,null],[11,"next_back","","",137,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"drop","","",137,null],[11,"clone","collections::vec_deque","",138,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vecdeque"}}],[11,"drop","","",138,null],[11,"default","","",138,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vecdeque"}}],[11,"new","","Creates an empty `VecDeque`.",138,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vecdeque"}}],[11,"with_capacity","","Creates an empty `VecDeque` with space for at least `n` elements.",138,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"get","","Retrieves an element in the `VecDeque` by index.",138,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_mut","","Retrieves an element in the `VecDeque` mutably by index.",138,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap","","Swaps elements at indices `i` and `j`.",138,null],[11,"capacity","","Returns the number of elements the `VecDeque` can hold without\nreallocating.",138,{"inputs":[{"name":"vecdeque"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `VecDeque`. Does nothing if the capacity is already sufficient.",138,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given\n`VecDeque`. The collection may reserve more space to avoid frequent reallocations.",138,null],[11,"shrink_to_fit","","Shrinks the capacity of the `VecDeque` as much as possible.",138,null],[11,"truncate","","Shortens a `VecDeque`, dropping excess elements from the back.",138,null],[11,"iter","","Returns a front-to-back iterator.",138,{"inputs":[{"name":"vecdeque"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a front-to-back iterator that returns mutable references.",138,{"inputs":[{"name":"vecdeque"}],"output":{"name":"itermut"}}],[11,"as_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",138,null],[11,"as_mut_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",138,null],[11,"len","","Returns the number of elements in the `VecDeque`.",138,{"inputs":[{"name":"vecdeque"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the buffer contains no elements",138,{"inputs":[{"name":"vecdeque"}],"output":{"name":"bool"}}],[11,"drain","","Create a draining iterator that removes the specified range in the\n`VecDeque` and yields the removed items from start to end. The element\nrange is removed even if the iterator is not consumed until the end.",138,{"inputs":[{"name":"vecdeque"},{"name":"r"}],"output":{"name":"drain"}}],[11,"clear","","Clears the buffer, removing all values.",138,null],[11,"front","","Provides a reference to the front element, or `None` if the sequence is\nempty.",138,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the\nsequence is empty.",138,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the sequence is\nempty.",138,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the\nsequence is empty.",138,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"pop_front","","Removes the first element and returns it, or `None` if the sequence is\nempty.",138,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"push_front","","Inserts an element first in the sequence.",138,null],[11,"push_back","","Appends an element to the back of a buffer",138,null],[11,"pop_back","","Removes the last element from a buffer and returns it, or `None` if\nit is empty.",138,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"swap_remove_back","","Removes an element from anywhere in the `VecDeque` and returns it, replacing it with the\nlast element.",138,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap_back_remove","","deprecated",138,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap_remove_front","","Removes an element from anywhere in the `VecDeque` and returns it,\nreplacing it with the first element.",138,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap_front_remove","","deprecated",138,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"insert","","Inserts an element at `index` within the `VecDeque`. Whichever\nend is closer to the insertion point will be moved to make room,\nand all the affected elements will be moved to new positions.",138,null],[11,"remove","","Removes and returns the element at `index` from the `VecDeque`.\nWhichever end is closer to the removal point will be moved to make\nroom, and all the affected elements will be moved to new positions.\nReturns `None` if `index` is out of bounds.",138,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"split_off","","Splits the collection into two at the given index.",138,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",138,null],[11,"retain","","Retains only the elements specified by the predicate.",138,null],[11,"resize","","Modifies the `VecDeque` in-place so that `len()` is equal to new_len,\neither by removing excess elements or by appending copies of a value to the back.",138,null],[11,"clone","","",139,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",139,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",139,null],[11,"next_back","","",139,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",140,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",140,null],[11,"next_back","","",140,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",141,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"next","","",141,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",141,null],[11,"next_back","","",141,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"drop","","",142,null],[11,"next","","",142,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",142,null],[11,"next_back","","",142,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"eq","","",138,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",138,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"cmp","","",138,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"ordering"}}],[11,"hash","","",138,null],[11,"index","","",138,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"a"}}],[11,"index_mut","","",138,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"a"}}],[11,"from_iter","","",138,{"inputs":[{"name":"vecdeque"},{"name":"t"}],"output":{"name":"vecdeque"}}],[11,"into_iter","","Consumes the list into a front-to-back iterator yielding elements by\nvalue.",138,{"inputs":[{"name":"vecdeque"}],"output":{"name":"intoiter"}}],[11,"extend","","",138,null],[11,"extend","","",138,null],[11,"fmt","","",138,{"inputs":[{"name":"vecdeque"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","collections","",143,{"inputs":[{"name":"bound"},{"name":"bound"}],"output":{"name":"bool"}}],[11,"ne","","",143,{"inputs":[{"name":"bound"},{"name":"bound"}],"output":{"name":"bool"}}],[11,"hash","","",143,null],[11,"fmt","","",143,{"inputs":[{"name":"bound"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",143,{"inputs":[{"name":"bound"}],"output":{"name":"bound"}}],[11,"clone","alloc::boxed","",144,{"inputs":[{"name":"exchangeheapsingleton"}],"output":{"name":"exchangeheapsingleton"}}],[11,"pointer","","",145,null],[11,"make_place","","",145,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"intermediatebox"}}],[11,"finalize","","",145,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"finalize","","",146,{"inputs":[{"name":"box"},{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"make_place","","",144,{"inputs":[{"name":"exchangeheapsingleton"}],"output":{"name":"intermediatebox"}}],[11,"drop","","",145,null],[11,"new","","Allocates memory on the heap and then moves `x` into it.",146,{"inputs":[{"name":"box"},{"name":"t"}],"output":{"name":"box"}}],[11,"from_raw","","Constructs a box from the raw pointer.",146,null],[11,"into_raw","","Consumes the `Box`, returning the wrapped raw pointer.",146,null],[11,"default","","",146,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"default","","",146,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"clone","","Returns a new box with a `clone()` of this box's contents.",146,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"clone_from","","Copies `source`'s contents into `self` without creating a new allocation.",146,null],[11,"clone","","",146,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"eq","","",146,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ne","","",146,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",146,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"option"}}],[11,"lt","","",146,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"le","","",146,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ge","","",146,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"gt","","",146,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"cmp","","",146,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"ordering"}}],[11,"hash","","",146,null],[11,"from","","",146,{"inputs":[{"name":"box"},{"name":"t"}],"output":{"name":"box"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",146,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",146,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"fmt","","",146,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",146,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",146,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",146,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"deref_mut","","",146,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"next","","",146,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"size_hint","","",146,null],[11,"next_back","","",146,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"call_once","","",146,{"inputs":[{"name":"box"},{"name":"a"}],"output":{"name":"r"}}],[11,"call_once","","",146,{"inputs":[{"name":"box"},{"name":"a"}],"output":{"name":"r"}}],[11,"clone","","",146,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"borrow","","",146,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"borrow_mut","","",146,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"as_ref","","",146,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"as_mut","","",146,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"deref","hyper::header","",63,{"inputs":[{"name":"accept"}],"output":{"name":"vec"}}],[11,"deref_mut","","",63,{"inputs":[{"name":"accept"}],"output":{"name":"vec"}}],[11,"header_name","","",63,{"inputs":[{"name":"accept"}],"output":{"name":"str"}}],[11,"parse_header","","",63,null],[11,"fmt_header","","",63,{"inputs":[{"name":"accept"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",63,{"inputs":[{"name":"accept"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",147,{"inputs":[{"name":"accesscontrolallowcredentials"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",147,{"inputs":[{"name":"accesscontrolallowcredentials"},{"name":"accesscontrolallowcredentials"}],"output":{"name":"bool"}}],[11,"ne","","",147,{"inputs":[{"name":"accesscontrolallowcredentials"},{"name":"accesscontrolallowcredentials"}],"output":{"name":"bool"}}],[11,"clone","","",147,{"inputs":[{"name":"accesscontrolallowcredentials"}],"output":{"name":"accesscontrolallowcredentials"}}],[11,"header_name","","",147,{"inputs":[{"name":"accesscontrolallowcredentials"}],"output":{"name":"str"}}],[11,"parse_header","","",147,null],[11,"fmt_header","","",147,{"inputs":[{"name":"accesscontrolallowcredentials"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",147,{"inputs":[{"name":"accesscontrolallowcredentials"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",148,{"inputs":[{"name":"accesscontrolallowheaders"},{"name":"accesscontrolallowheaders"}],"output":{"name":"bool"}}],[11,"ne","","",148,{"inputs":[{"name":"accesscontrolallowheaders"},{"name":"accesscontrolallowheaders"}],"output":{"name":"bool"}}],[11,"fmt","","",148,{"inputs":[{"name":"accesscontrolallowheaders"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",148,{"inputs":[{"name":"accesscontrolallowheaders"}],"output":{"name":"accesscontrolallowheaders"}}],[11,"deref","","",148,{"inputs":[{"name":"accesscontrolallowheaders"}],"output":{"name":"vec"}}],[11,"deref_mut","","",148,{"inputs":[{"name":"accesscontrolallowheaders"}],"output":{"name":"vec"}}],[11,"header_name","","",148,{"inputs":[{"name":"accesscontrolallowheaders"}],"output":{"name":"str"}}],[11,"parse_header","","",148,null],[11,"fmt_header","","",148,{"inputs":[{"name":"accesscontrolallowheaders"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",148,{"inputs":[{"name":"accesscontrolallowheaders"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",149,{"inputs":[{"name":"accesscontrolallowmethods"},{"name":"accesscontrolallowmethods"}],"output":{"name":"bool"}}],[11,"ne","","",149,{"inputs":[{"name":"accesscontrolallowmethods"},{"name":"accesscontrolallowmethods"}],"output":{"name":"bool"}}],[11,"fmt","","",149,{"inputs":[{"name":"accesscontrolallowmethods"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",149,{"inputs":[{"name":"accesscontrolallowmethods"}],"output":{"name":"accesscontrolallowmethods"}}],[11,"deref","","",149,{"inputs":[{"name":"accesscontrolallowmethods"}],"output":{"name":"vec"}}],[11,"deref_mut","","",149,{"inputs":[{"name":"accesscontrolallowmethods"}],"output":{"name":"vec"}}],[11,"header_name","","",149,{"inputs":[{"name":"accesscontrolallowmethods"}],"output":{"name":"str"}}],[11,"parse_header","","",149,null],[11,"fmt_header","","",149,{"inputs":[{"name":"accesscontrolallowmethods"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",149,{"inputs":[{"name":"accesscontrolallowmethods"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",47,{"inputs":[{"name":"accesscontrolalloworigin"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",47,{"inputs":[{"name":"accesscontrolalloworigin"},{"name":"accesscontrolalloworigin"}],"output":{"name":"bool"}}],[11,"ne","","",47,{"inputs":[{"name":"accesscontrolalloworigin"},{"name":"accesscontrolalloworigin"}],"output":{"name":"bool"}}],[11,"clone","","",47,{"inputs":[{"name":"accesscontrolalloworigin"}],"output":{"name":"accesscontrolalloworigin"}}],[11,"header_name","","",47,{"inputs":[{"name":"accesscontrolalloworigin"}],"output":{"name":"str"}}],[11,"parse_header","","",47,null],[11,"fmt_header","","",47,{"inputs":[{"name":"accesscontrolalloworigin"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",47,{"inputs":[{"name":"accesscontrolalloworigin"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",150,{"inputs":[{"name":"accesscontrolexposeheaders"},{"name":"accesscontrolexposeheaders"}],"output":{"name":"bool"}}],[11,"ne","","",150,{"inputs":[{"name":"accesscontrolexposeheaders"},{"name":"accesscontrolexposeheaders"}],"output":{"name":"bool"}}],[11,"fmt","","",150,{"inputs":[{"name":"accesscontrolexposeheaders"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",150,{"inputs":[{"name":"accesscontrolexposeheaders"}],"output":{"name":"accesscontrolexposeheaders"}}],[11,"deref","","",150,{"inputs":[{"name":"accesscontrolexposeheaders"}],"output":{"name":"vec"}}],[11,"deref_mut","","",150,{"inputs":[{"name":"accesscontrolexposeheaders"}],"output":{"name":"vec"}}],[11,"header_name","","",150,{"inputs":[{"name":"accesscontrolexposeheaders"}],"output":{"name":"str"}}],[11,"parse_header","","",150,null],[11,"fmt_header","","",150,{"inputs":[{"name":"accesscontrolexposeheaders"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",150,{"inputs":[{"name":"accesscontrolexposeheaders"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",151,{"inputs":[{"name":"accesscontrolmaxage"},{"name":"accesscontrolmaxage"}],"output":{"name":"bool"}}],[11,"ne","","",151,{"inputs":[{"name":"accesscontrolmaxage"},{"name":"accesscontrolmaxage"}],"output":{"name":"bool"}}],[11,"fmt","","",151,{"inputs":[{"name":"accesscontrolmaxage"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",151,{"inputs":[{"name":"accesscontrolmaxage"}],"output":{"name":"accesscontrolmaxage"}}],[11,"deref","","",151,{"inputs":[{"name":"accesscontrolmaxage"}],"output":{"name":"u32"}}],[11,"deref_mut","","",151,{"inputs":[{"name":"accesscontrolmaxage"}],"output":{"name":"u32"}}],[11,"header_name","","",151,{"inputs":[{"name":"accesscontrolmaxage"}],"output":{"name":"str"}}],[11,"parse_header","","",151,null],[11,"fmt_header","","",151,{"inputs":[{"name":"accesscontrolmaxage"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",151,{"inputs":[{"name":"accesscontrolmaxage"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",152,{"inputs":[{"name":"accesscontrolrequestheaders"},{"name":"accesscontrolrequestheaders"}],"output":{"name":"bool"}}],[11,"ne","","",152,{"inputs":[{"name":"accesscontrolrequestheaders"},{"name":"accesscontrolrequestheaders"}],"output":{"name":"bool"}}],[11,"fmt","","",152,{"inputs":[{"name":"accesscontrolrequestheaders"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",152,{"inputs":[{"name":"accesscontrolrequestheaders"}],"output":{"name":"accesscontrolrequestheaders"}}],[11,"deref","","",152,{"inputs":[{"name":"accesscontrolrequestheaders"}],"output":{"name":"vec"}}],[11,"deref_mut","","",152,{"inputs":[{"name":"accesscontrolrequestheaders"}],"output":{"name":"vec"}}],[11,"header_name","","",152,{"inputs":[{"name":"accesscontrolrequestheaders"}],"output":{"name":"str"}}],[11,"parse_header","","",152,null],[11,"fmt_header","","",152,{"inputs":[{"name":"accesscontrolrequestheaders"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",152,{"inputs":[{"name":"accesscontrolrequestheaders"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",153,{"inputs":[{"name":"accesscontrolrequestmethod"},{"name":"accesscontrolrequestmethod"}],"output":{"name":"bool"}}],[11,"ne","","",153,{"inputs":[{"name":"accesscontrolrequestmethod"},{"name":"accesscontrolrequestmethod"}],"output":{"name":"bool"}}],[11,"fmt","","",153,{"inputs":[{"name":"accesscontrolrequestmethod"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",153,{"inputs":[{"name":"accesscontrolrequestmethod"}],"output":{"name":"accesscontrolrequestmethod"}}],[11,"deref","","",153,{"inputs":[{"name":"accesscontrolrequestmethod"}],"output":{"name":"method"}}],[11,"deref_mut","","",153,{"inputs":[{"name":"accesscontrolrequestmethod"}],"output":{"name":"method"}}],[11,"header_name","","",153,{"inputs":[{"name":"accesscontrolrequestmethod"}],"output":{"name":"str"}}],[11,"parse_header","","",153,null],[11,"fmt_header","","",153,{"inputs":[{"name":"accesscontrolrequestmethod"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",153,{"inputs":[{"name":"accesscontrolrequestmethod"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",154,{"inputs":[{"name":"acceptcharset"},{"name":"acceptcharset"}],"output":{"name":"bool"}}],[11,"ne","","",154,{"inputs":[{"name":"acceptcharset"},{"name":"acceptcharset"}],"output":{"name":"bool"}}],[11,"fmt","","",154,{"inputs":[{"name":"acceptcharset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",154,{"inputs":[{"name":"acceptcharset"}],"output":{"name":"acceptcharset"}}],[11,"deref","","",154,{"inputs":[{"name":"acceptcharset"}],"output":{"name":"vec"}}],[11,"deref_mut","","",154,{"inputs":[{"name":"acceptcharset"}],"output":{"name":"vec"}}],[11,"header_name","","",154,{"inputs":[{"name":"acceptcharset"}],"output":{"name":"str"}}],[11,"parse_header","","",154,null],[11,"fmt_header","","",154,{"inputs":[{"name":"acceptcharset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",154,{"inputs":[{"name":"acceptcharset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",155,{"inputs":[{"name":"acceptencoding"},{"name":"acceptencoding"}],"output":{"name":"bool"}}],[11,"ne","","",155,{"inputs":[{"name":"acceptencoding"},{"name":"acceptencoding"}],"output":{"name":"bool"}}],[11,"fmt","","",155,{"inputs":[{"name":"acceptencoding"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",155,{"inputs":[{"name":"acceptencoding"}],"output":{"name":"acceptencoding"}}],[11,"deref","","",155,{"inputs":[{"name":"acceptencoding"}],"output":{"name":"vec"}}],[11,"deref_mut","","",155,{"inputs":[{"name":"acceptencoding"}],"output":{"name":"vec"}}],[11,"header_name","","",155,{"inputs":[{"name":"acceptencoding"}],"output":{"name":"str"}}],[11,"parse_header","","",155,null],[11,"fmt_header","","",155,{"inputs":[{"name":"acceptencoding"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",155,{"inputs":[{"name":"acceptencoding"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",156,{"inputs":[{"name":"acceptlanguage"},{"name":"acceptlanguage"}],"output":{"name":"bool"}}],[11,"ne","","",156,{"inputs":[{"name":"acceptlanguage"},{"name":"acceptlanguage"}],"output":{"name":"bool"}}],[11,"fmt","","",156,{"inputs":[{"name":"acceptlanguage"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",156,{"inputs":[{"name":"acceptlanguage"}],"output":{"name":"acceptlanguage"}}],[11,"deref","","",156,{"inputs":[{"name":"acceptlanguage"}],"output":{"name":"vec"}}],[11,"deref_mut","","",156,{"inputs":[{"name":"acceptlanguage"}],"output":{"name":"vec"}}],[11,"header_name","","",156,{"inputs":[{"name":"acceptlanguage"}],"output":{"name":"str"}}],[11,"parse_header","","",156,null],[11,"fmt_header","","",156,{"inputs":[{"name":"acceptlanguage"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",156,{"inputs":[{"name":"acceptlanguage"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",157,{"inputs":[{"name":"acceptranges"},{"name":"acceptranges"}],"output":{"name":"bool"}}],[11,"ne","","",157,{"inputs":[{"name":"acceptranges"},{"name":"acceptranges"}],"output":{"name":"bool"}}],[11,"fmt","","",157,{"inputs":[{"name":"acceptranges"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",157,{"inputs":[{"name":"acceptranges"}],"output":{"name":"acceptranges"}}],[11,"deref","","",157,{"inputs":[{"name":"acceptranges"}],"output":{"name":"vec"}}],[11,"deref_mut","","",157,{"inputs":[{"name":"acceptranges"}],"output":{"name":"vec"}}],[11,"header_name","","",157,{"inputs":[{"name":"acceptranges"}],"output":{"name":"str"}}],[11,"parse_header","","",157,null],[11,"fmt_header","","",157,{"inputs":[{"name":"acceptranges"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",157,{"inputs":[{"name":"acceptranges"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",48,{"inputs":[{"name":"rangeunit"},{"name":"rangeunit"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"rangeunit"},{"name":"rangeunit"}],"output":{"name":"bool"}}],[11,"fmt","","",48,{"inputs":[{"name":"rangeunit"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",48,{"inputs":[{"name":"rangeunit"}],"output":{"name":"rangeunit"}}],[11,"from_str","","",48,{"inputs":[{"name":"rangeunit"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",48,{"inputs":[{"name":"rangeunit"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",158,{"inputs":[{"name":"allow"},{"name":"allow"}],"output":{"name":"bool"}}],[11,"ne","","",158,{"inputs":[{"name":"allow"},{"name":"allow"}],"output":{"name":"bool"}}],[11,"fmt","","",158,{"inputs":[{"name":"allow"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",158,{"inputs":[{"name":"allow"}],"output":{"name":"allow"}}],[11,"deref","","",158,{"inputs":[{"name":"allow"}],"output":{"name":"vec"}}],[11,"deref_mut","","",158,{"inputs":[{"name":"allow"}],"output":{"name":"vec"}}],[11,"header_name","","",158,{"inputs":[{"name":"allow"}],"output":{"name":"str"}}],[11,"parse_header","","",158,null],[11,"fmt_header","","",158,{"inputs":[{"name":"allow"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",158,{"inputs":[{"name":"allow"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",159,{"inputs":[{"name":"authorization"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",159,{"inputs":[{"name":"authorization"},{"name":"authorization"}],"output":{"name":"bool"}}],[11,"ne","","",159,{"inputs":[{"name":"authorization"},{"name":"authorization"}],"output":{"name":"bool"}}],[11,"clone","","",159,{"inputs":[{"name":"authorization"}],"output":{"name":"authorization"}}],[11,"deref","","",159,{"inputs":[{"name":"authorization"}],"output":{"name":"s"}}],[11,"deref_mut","","",159,{"inputs":[{"name":"authorization"}],"output":{"name":"s"}}],[11,"header_name","","",159,{"inputs":[{"name":"authorization"}],"output":{"name":"str"}}],[11,"parse_header","","",159,null],[11,"fmt_header","","",159,{"inputs":[{"name":"authorization"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"scheme","collections::string","",119,{"inputs":[{"name":"string"}],"output":{"name":"option"}}],[11,"fmt_scheme","","",119,{"inputs":[{"name":"string"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","hyper::header","",39,{"inputs":[{"name":"basic"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",39,{"inputs":[{"name":"basic"},{"name":"basic"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"basic"},{"name":"basic"}],"output":{"name":"bool"}}],[11,"clone","","",39,{"inputs":[{"name":"basic"}],"output":{"name":"basic"}}],[11,"scheme","","",39,{"inputs":[{"name":"basic"}],"output":{"name":"option"}}],[11,"fmt_scheme","","",39,{"inputs":[{"name":"basic"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",39,{"inputs":[{"name":"basic"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",40,{"inputs":[{"name":"bearer"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",40,{"inputs":[{"name":"bearer"},{"name":"bearer"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"bearer"},{"name":"bearer"}],"output":{"name":"bool"}}],[11,"clone","","",40,{"inputs":[{"name":"bearer"}],"output":{"name":"bearer"}}],[11,"scheme","","",40,{"inputs":[{"name":"bearer"}],"output":{"name":"option"}}],[11,"fmt_scheme","","",40,{"inputs":[{"name":"bearer"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",40,{"inputs":[{"name":"bearer"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",160,{"inputs":[{"name":"cachecontrol"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",160,{"inputs":[{"name":"cachecontrol"}],"output":{"name":"cachecontrol"}}],[11,"eq","","",160,{"inputs":[{"name":"cachecontrol"},{"name":"cachecontrol"}],"output":{"name":"bool"}}],[11,"ne","","",160,{"inputs":[{"name":"cachecontrol"},{"name":"cachecontrol"}],"output":{"name":"bool"}}],[11,"deref","","",160,{"inputs":[{"name":"cachecontrol"}],"output":{"name":"vec"}}],[11,"deref_mut","","",160,{"inputs":[{"name":"cachecontrol"}],"output":{"name":"vec"}}],[11,"header_name","","",160,{"inputs":[{"name":"cachecontrol"}],"output":{"name":"str"}}],[11,"parse_header","","",160,null],[11,"fmt_header","","",160,{"inputs":[{"name":"cachecontrol"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",49,{"inputs":[{"name":"cachedirective"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",49,{"inputs":[{"name":"cachedirective"}],"output":{"name":"cachedirective"}}],[11,"eq","","",49,{"inputs":[{"name":"cachedirective"},{"name":"cachedirective"}],"output":{"name":"bool"}}],[11,"ne","","",49,{"inputs":[{"name":"cachedirective"},{"name":"cachedirective"}],"output":{"name":"bool"}}],[11,"fmt","","",49,{"inputs":[{"name":"cachedirective"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",49,{"inputs":[{"name":"cachedirective"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",161,{"inputs":[{"name":"cookie"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",161,{"inputs":[{"name":"cookie"},{"name":"cookie"}],"output":{"name":"bool"}}],[11,"ne","","",161,{"inputs":[{"name":"cookie"},{"name":"cookie"}],"output":{"name":"bool"}}],[11,"clone","","",161,{"inputs":[{"name":"cookie"}],"output":{"name":"cookie"}}],[11,"deref","","",161,{"inputs":[{"name":"cookie"}],"output":{"name":"vec"}}],[11,"deref_mut","","",161,{"inputs":[{"name":"cookie"}],"output":{"name":"vec"}}],[11,"header_name","","",161,{"inputs":[{"name":"cookie"}],"output":{"name":"str"}}],[11,"parse_header","","",161,null],[11,"fmt_header","","",161,{"inputs":[{"name":"cookie"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_cookie_jar","","This method can be used to create CookieJar that can be used\nto manipulate cookies and create a corresponding `SetCookie` header afterwards.",161,null],[11,"from_cookie_jar","","Extracts all cookies from `CookieJar` and creates Cookie header.\nUseful for clients.",161,{"inputs":[{"name":"cookie"},{"name":"cookiejar"}],"output":{"name":"cookie"}}],[11,"fmt","","",50,{"inputs":[{"name":"connectionoption"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",50,{"inputs":[{"name":"connectionoption"},{"name":"connectionoption"}],"output":{"name":"bool"}}],[11,"ne","","",50,{"inputs":[{"name":"connectionoption"},{"name":"connectionoption"}],"output":{"name":"bool"}}],[11,"clone","","",50,{"inputs":[{"name":"connectionoption"}],"output":{"name":"connectionoption"}}],[11,"from_str","","",50,{"inputs":[{"name":"connectionoption"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",50,{"inputs":[{"name":"connectionoption"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",162,{"inputs":[{"name":"connection"},{"name":"connection"}],"output":{"name":"bool"}}],[11,"ne","","",162,{"inputs":[{"name":"connection"},{"name":"connection"}],"output":{"name":"bool"}}],[11,"fmt","","",162,{"inputs":[{"name":"connection"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",162,{"inputs":[{"name":"connection"}],"output":{"name":"connection"}}],[11,"deref","","",162,{"inputs":[{"name":"connection"}],"output":{"name":"vec"}}],[11,"deref_mut","","",162,{"inputs":[{"name":"connection"}],"output":{"name":"vec"}}],[11,"header_name","","",162,{"inputs":[{"name":"connection"}],"output":{"name":"str"}}],[11,"parse_header","","",162,null],[11,"fmt_header","","",162,{"inputs":[{"name":"connection"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",162,{"inputs":[{"name":"connection"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"close","","A constructor to easily create a `Connection: close` header.",162,{"inputs":[{"name":"connection"}],"output":{"name":"connection"}}],[11,"keep_alive","","A constructor to easily create a `Connection: keep-alive` header.",162,{"inputs":[{"name":"connection"}],"output":{"name":"connection"}}],[11,"eq","","",51,{"inputs":[{"name":"dispositiontype"},{"name":"dispositiontype"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"dispositiontype"},{"name":"dispositiontype"}],"output":{"name":"bool"}}],[11,"fmt","","",51,{"inputs":[{"name":"dispositiontype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",51,{"inputs":[{"name":"dispositiontype"}],"output":{"name":"dispositiontype"}}],[11,"eq","","",52,{"inputs":[{"name":"dispositionparam"},{"name":"dispositionparam"}],"output":{"name":"bool"}}],[11,"ne","","",52,{"inputs":[{"name":"dispositionparam"},{"name":"dispositionparam"}],"output":{"name":"bool"}}],[11,"fmt","","",52,{"inputs":[{"name":"dispositionparam"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",52,{"inputs":[{"name":"dispositionparam"}],"output":{"name":"dispositionparam"}}],[11,"eq","","",41,{"inputs":[{"name":"contentdisposition"},{"name":"contentdisposition"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"contentdisposition"},{"name":"contentdisposition"}],"output":{"name":"bool"}}],[11,"fmt","","",41,{"inputs":[{"name":"contentdisposition"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",41,{"inputs":[{"name":"contentdisposition"}],"output":{"name":"contentdisposition"}}],[11,"header_name","","",41,{"inputs":[{"name":"contentdisposition"}],"output":{"name":"str"}}],[11,"parse_header","","",41,null],[11,"fmt_header","","",41,{"inputs":[{"name":"contentdisposition"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",41,{"inputs":[{"name":"contentdisposition"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",163,{"inputs":[{"name":"contentencoding"},{"name":"contentencoding"}],"output":{"name":"bool"}}],[11,"ne","","",163,{"inputs":[{"name":"contentencoding"},{"name":"contentencoding"}],"output":{"name":"bool"}}],[11,"fmt","","",163,{"inputs":[{"name":"contentencoding"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",163,{"inputs":[{"name":"contentencoding"}],"output":{"name":"contentencoding"}}],[11,"deref","","",163,{"inputs":[{"name":"contentencoding"}],"output":{"name":"vec"}}],[11,"deref_mut","","",163,{"inputs":[{"name":"contentencoding"}],"output":{"name":"vec"}}],[11,"header_name","","",163,{"inputs":[{"name":"contentencoding"}],"output":{"name":"str"}}],[11,"parse_header","","",163,null],[11,"fmt_header","","",163,{"inputs":[{"name":"contentencoding"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",163,{"inputs":[{"name":"contentencoding"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",164,{"inputs":[{"name":"contentlanguage"},{"name":"contentlanguage"}],"output":{"name":"bool"}}],[11,"ne","","",164,{"inputs":[{"name":"contentlanguage"},{"name":"contentlanguage"}],"output":{"name":"bool"}}],[11,"fmt","","",164,{"inputs":[{"name":"contentlanguage"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",164,{"inputs":[{"name":"contentlanguage"}],"output":{"name":"contentlanguage"}}],[11,"deref","","",164,{"inputs":[{"name":"contentlanguage"}],"output":{"name":"vec"}}],[11,"deref_mut","","",164,{"inputs":[{"name":"contentlanguage"}],"output":{"name":"vec"}}],[11,"header_name","","",164,{"inputs":[{"name":"contentlanguage"}],"output":{"name":"str"}}],[11,"parse_header","","",164,null],[11,"fmt_header","","",164,{"inputs":[{"name":"contentlanguage"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",164,{"inputs":[{"name":"contentlanguage"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",165,{"inputs":[{"name":"contentlength"},{"name":"contentlength"}],"output":{"name":"bool"}}],[11,"ne","","",165,{"inputs":[{"name":"contentlength"},{"name":"contentlength"}],"output":{"name":"bool"}}],[11,"fmt","","",165,{"inputs":[{"name":"contentlength"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",165,{"inputs":[{"name":"contentlength"}],"output":{"name":"contentlength"}}],[11,"header_name","","",165,{"inputs":[{"name":"contentlength"}],"output":{"name":"str"}}],[11,"parse_header","","",165,null],[11,"fmt_header","","",165,{"inputs":[{"name":"contentlength"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",165,{"inputs":[{"name":"contentlength"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",165,{"inputs":[{"name":"contentlength"}],"output":{"name":"u64"}}],[11,"deref_mut","","",165,{"inputs":[{"name":"contentlength"}],"output":{"name":"u64"}}],[11,"eq","","",166,{"inputs":[{"name":"contentrange"},{"name":"contentrange"}],"output":{"name":"bool"}}],[11,"ne","","",166,{"inputs":[{"name":"contentrange"},{"name":"contentrange"}],"output":{"name":"bool"}}],[11,"fmt","","",166,{"inputs":[{"name":"contentrange"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",166,{"inputs":[{"name":"contentrange"}],"output":{"name":"contentrange"}}],[11,"deref","","",166,{"inputs":[{"name":"contentrange"}],"output":{"name":"contentrangespec"}}],[11,"deref_mut","","",166,{"inputs":[{"name":"contentrange"}],"output":{"name":"contentrangespec"}}],[11,"header_name","","",166,{"inputs":[{"name":"contentrange"}],"output":{"name":"str"}}],[11,"parse_header","","",166,null],[11,"fmt_header","","",166,{"inputs":[{"name":"contentrange"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",166,{"inputs":[{"name":"contentrange"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",53,{"inputs":[{"name":"contentrangespec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",53,{"inputs":[{"name":"contentrangespec"}],"output":{"name":"contentrangespec"}}],[11,"eq","","",53,{"inputs":[{"name":"contentrangespec"},{"name":"contentrangespec"}],"output":{"name":"bool"}}],[11,"ne","","",53,{"inputs":[{"name":"contentrangespec"},{"name":"contentrangespec"}],"output":{"name":"bool"}}],[11,"from_str","","",53,{"inputs":[{"name":"contentrangespec"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",53,{"inputs":[{"name":"contentrangespec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",167,{"inputs":[{"name":"contenttype"},{"name":"contenttype"}],"output":{"name":"bool"}}],[11,"ne","","",167,{"inputs":[{"name":"contenttype"},{"name":"contenttype"}],"output":{"name":"bool"}}],[11,"fmt","","",167,{"inputs":[{"name":"contenttype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",167,{"inputs":[{"name":"contenttype"}],"output":{"name":"contenttype"}}],[11,"get_param","mime","",168,{"inputs":[{"name":"mime"},{"name":"a"}],"output":{"name":"option"}}],[11,"hash","","",168,null],[11,"fmt","","",168,{"inputs":[{"name":"mime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",168,{"inputs":[{"name":"mime"}],"output":{"name":"mime"}}],[11,"eq","","",168,{"inputs":[{"name":"mime"},{"name":"mime"}],"output":{"name":"bool"}}],[11,"hash","","",169,null],[11,"fmt","","",169,{"inputs":[{"name":"toplevel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",169,{"inputs":[{"name":"toplevel"}],"output":{"name":"toplevel"}}],[11,"as_str","","",169,{"inputs":[{"name":"toplevel"}],"output":{"name":"str"}}],[11,"deref","","",169,{"inputs":[{"name":"toplevel"}],"output":{"name":"str"}}],[11,"eq","","",169,{"inputs":[{"name":"toplevel"},{"name":"toplevel"}],"output":{"name":"bool"}}],[11,"eq","","",169,{"inputs":[{"name":"toplevel"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",169,{"inputs":[{"name":"toplevel"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",169,{"inputs":[{"name":"toplevel"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","collections::string","",119,{"inputs":[{"name":"string"},{"name":"toplevel"}],"output":{"name":"bool"}}],[11,"fmt","mime","",169,{"inputs":[{"name":"toplevel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",169,{"inputs":[{"name":"toplevel"},{"name":"str"}],"output":{"name":"result"}}],[11,"hash","","",170,null],[11,"fmt","","",170,{"inputs":[{"name":"sublevel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",170,{"inputs":[{"name":"sublevel"}],"output":{"name":"sublevel"}}],[11,"as_str","","",170,{"inputs":[{"name":"sublevel"}],"output":{"name":"str"}}],[11,"deref","","",170,{"inputs":[{"name":"sublevel"}],"output":{"name":"str"}}],[11,"eq","","",170,{"inputs":[{"name":"sublevel"},{"name":"sublevel"}],"output":{"name":"bool"}}],[11,"eq","","",170,{"inputs":[{"name":"sublevel"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",170,{"inputs":[{"name":"sublevel"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",170,{"inputs":[{"name":"sublevel"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","collections::string","",119,{"inputs":[{"name":"string"},{"name":"sublevel"}],"output":{"name":"bool"}}],[11,"fmt","mime","",170,{"inputs":[{"name":"sublevel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",170,{"inputs":[{"name":"sublevel"},{"name":"str"}],"output":{"name":"result"}}],[11,"hash","","",171,null],[11,"fmt","","",171,{"inputs":[{"name":"attr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",171,{"inputs":[{"name":"attr"}],"output":{"name":"attr"}}],[11,"as_str","","",171,{"inputs":[{"name":"attr"}],"output":{"name":"str"}}],[11,"deref","","",171,{"inputs":[{"name":"attr"}],"output":{"name":"str"}}],[11,"eq","","",171,{"inputs":[{"name":"attr"},{"name":"attr"}],"output":{"name":"bool"}}],[11,"eq","","",171,{"inputs":[{"name":"attr"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",171,{"inputs":[{"name":"attr"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",171,{"inputs":[{"name":"attr"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","collections::string","",119,{"inputs":[{"name":"string"},{"name":"attr"}],"output":{"name":"bool"}}],[11,"fmt","mime","",171,{"inputs":[{"name":"attr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",171,{"inputs":[{"name":"attr"},{"name":"str"}],"output":{"name":"result"}}],[11,"hash","","",172,null],[11,"fmt","","",172,{"inputs":[{"name":"value"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",172,{"inputs":[{"name":"value"}],"output":{"name":"value"}}],[11,"as_str","","",172,{"inputs":[{"name":"value"}],"output":{"name":"str"}}],[11,"deref","","",172,{"inputs":[{"name":"value"}],"output":{"name":"str"}}],[11,"eq","","",172,{"inputs":[{"name":"value"},{"name":"value"}],"output":{"name":"bool"}}],[11,"eq","","",172,{"inputs":[{"name":"value"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",172,{"inputs":[{"name":"value"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",172,{"inputs":[{"name":"value"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","collections::string","",119,{"inputs":[{"name":"string"},{"name":"value"}],"output":{"name":"bool"}}],[11,"fmt","mime","",172,{"inputs":[{"name":"value"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",172,{"inputs":[{"name":"value"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",168,{"inputs":[{"name":"mime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",168,{"inputs":[{"name":"mime"},{"name":"str"}],"output":{"name":"result"}}],[11,"deref","hyper::header","",167,{"inputs":[{"name":"contenttype"}],"output":{"name":"mime"}}],[11,"deref_mut","","",167,{"inputs":[{"name":"contenttype"}],"output":{"name":"mime"}}],[11,"header_name","","",167,{"inputs":[{"name":"contenttype"}],"output":{"name":"str"}}],[11,"parse_header","","",167,null],[11,"fmt_header","","",167,{"inputs":[{"name":"contenttype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",167,{"inputs":[{"name":"contenttype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"json","","A constructor  to easily create a `Content-Type: application/json; charset=utf-8` header.",167,{"inputs":[{"name":"contenttype"}],"output":{"name":"contenttype"}}],[11,"plaintext","","A constructor  to easily create a `Content-Type: text/plain; charset=utf-8` header.",167,{"inputs":[{"name":"contenttype"}],"output":{"name":"contenttype"}}],[11,"html","","A constructor  to easily create a `Content-Type: text/html; charset=utf-8` header.",167,{"inputs":[{"name":"contenttype"}],"output":{"name":"contenttype"}}],[11,"form_url_encoded","","A constructor  to easily create a `Content-Type: application/www-form-url-encoded` header.",167,{"inputs":[{"name":"contenttype"}],"output":{"name":"contenttype"}}],[11,"jpeg","","A constructor  to easily create a `Content-Type: image/jpeg` header.",167,{"inputs":[{"name":"contenttype"}],"output":{"name":"contenttype"}}],[11,"png","","A constructor  to easily create a `Content-Type: image/png` header.",167,{"inputs":[{"name":"contenttype"}],"output":{"name":"contenttype"}}],[11,"eq","","",173,{"inputs":[{"name":"date"},{"name":"date"}],"output":{"name":"bool"}}],[11,"ne","","",173,{"inputs":[{"name":"date"},{"name":"date"}],"output":{"name":"bool"}}],[11,"fmt","","",173,{"inputs":[{"name":"date"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",173,{"inputs":[{"name":"date"}],"output":{"name":"date"}}],[11,"deref","","",173,{"inputs":[{"name":"date"}],"output":{"name":"httpdate"}}],[11,"deref_mut","","",173,{"inputs":[{"name":"date"}],"output":{"name":"httpdate"}}],[11,"header_name","","",173,{"inputs":[{"name":"date"}],"output":{"name":"str"}}],[11,"parse_header","","",173,null],[11,"fmt_header","","",173,{"inputs":[{"name":"date"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",173,{"inputs":[{"name":"date"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",174,{"inputs":[{"name":"etag"},{"name":"etag"}],"output":{"name":"bool"}}],[11,"ne","","",174,{"inputs":[{"name":"etag"},{"name":"etag"}],"output":{"name":"bool"}}],[11,"fmt","","",174,{"inputs":[{"name":"etag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",174,{"inputs":[{"name":"etag"}],"output":{"name":"etag"}}],[11,"deref","","",174,{"inputs":[{"name":"etag"}],"output":{"name":"entitytag"}}],[11,"deref_mut","","",174,{"inputs":[{"name":"etag"}],"output":{"name":"entitytag"}}],[11,"header_name","","",174,{"inputs":[{"name":"etag"}],"output":{"name":"str"}}],[11,"parse_header","","",174,null],[11,"fmt_header","","",174,{"inputs":[{"name":"etag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",174,{"inputs":[{"name":"etag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",54,{"inputs":[{"name":"expect"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",54,{"inputs":[{"name":"expect"},{"name":"expect"}],"output":{"name":"bool"}}],[11,"ne","","",54,{"inputs":[{"name":"expect"},{"name":"expect"}],"output":{"name":"bool"}}],[11,"clone","","",54,{"inputs":[{"name":"expect"}],"output":{"name":"expect"}}],[11,"header_name","","",54,{"inputs":[{"name":"expect"}],"output":{"name":"str"}}],[11,"parse_header","","",54,null],[11,"fmt_header","","",54,{"inputs":[{"name":"expect"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",175,{"inputs":[{"name":"expires"},{"name":"expires"}],"output":{"name":"bool"}}],[11,"ne","","",175,{"inputs":[{"name":"expires"},{"name":"expires"}],"output":{"name":"bool"}}],[11,"fmt","","",175,{"inputs":[{"name":"expires"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",175,{"inputs":[{"name":"expires"}],"output":{"name":"expires"}}],[11,"deref","","",175,{"inputs":[{"name":"expires"}],"output":{"name":"httpdate"}}],[11,"deref_mut","","",175,{"inputs":[{"name":"expires"}],"output":{"name":"httpdate"}}],[11,"header_name","","",175,{"inputs":[{"name":"expires"}],"output":{"name":"str"}}],[11,"parse_header","","",175,null],[11,"fmt_header","","",175,{"inputs":[{"name":"expires"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",175,{"inputs":[{"name":"expires"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",176,{"inputs":[{"name":"from"},{"name":"from"}],"output":{"name":"bool"}}],[11,"ne","","",176,{"inputs":[{"name":"from"},{"name":"from"}],"output":{"name":"bool"}}],[11,"fmt","","",176,{"inputs":[{"name":"from"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",176,{"inputs":[{"name":"from"}],"output":{"name":"from"}}],[11,"deref","","",176,{"inputs":[{"name":"from"}],"output":{"name":"string"}}],[11,"deref_mut","","",176,{"inputs":[{"name":"from"}],"output":{"name":"string"}}],[11,"header_name","","",176,{"inputs":[{"name":"from"}],"output":{"name":"str"}}],[11,"parse_header","","",176,null],[11,"fmt_header","","",176,{"inputs":[{"name":"from"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",176,{"inputs":[{"name":"from"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",42,{"inputs":[{"name":"host"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",42,{"inputs":[{"name":"host"},{"name":"host"}],"output":{"name":"bool"}}],[11,"ne","","",42,{"inputs":[{"name":"host"},{"name":"host"}],"output":{"name":"bool"}}],[11,"clone","","",42,{"inputs":[{"name":"host"}],"output":{"name":"host"}}],[11,"header_name","","",42,{"inputs":[{"name":"host"}],"output":{"name":"str"}}],[11,"parse_header","","",42,null],[11,"fmt_header","","",42,{"inputs":[{"name":"host"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",55,{"inputs":[{"name":"ifmatch"},{"name":"ifmatch"}],"output":{"name":"bool"}}],[11,"ne","","",55,{"inputs":[{"name":"ifmatch"},{"name":"ifmatch"}],"output":{"name":"bool"}}],[11,"fmt","","",55,{"inputs":[{"name":"ifmatch"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",55,{"inputs":[{"name":"ifmatch"}],"output":{"name":"ifmatch"}}],[11,"header_name","","",55,{"inputs":[{"name":"ifmatch"}],"output":{"name":"str"}}],[11,"parse_header","","",55,null],[11,"fmt_header","","",55,{"inputs":[{"name":"ifmatch"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",55,{"inputs":[{"name":"ifmatch"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",177,{"inputs":[{"name":"ifmodifiedsince"},{"name":"ifmodifiedsince"}],"output":{"name":"bool"}}],[11,"ne","","",177,{"inputs":[{"name":"ifmodifiedsince"},{"name":"ifmodifiedsince"}],"output":{"name":"bool"}}],[11,"fmt","","",177,{"inputs":[{"name":"ifmodifiedsince"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",177,{"inputs":[{"name":"ifmodifiedsince"}],"output":{"name":"ifmodifiedsince"}}],[11,"deref","","",177,{"inputs":[{"name":"ifmodifiedsince"}],"output":{"name":"httpdate"}}],[11,"deref_mut","","",177,{"inputs":[{"name":"ifmodifiedsince"}],"output":{"name":"httpdate"}}],[11,"header_name","","",177,{"inputs":[{"name":"ifmodifiedsince"}],"output":{"name":"str"}}],[11,"parse_header","","",177,null],[11,"fmt_header","","",177,{"inputs":[{"name":"ifmodifiedsince"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",177,{"inputs":[{"name":"ifmodifiedsince"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",56,{"inputs":[{"name":"ifnonematch"},{"name":"ifnonematch"}],"output":{"name":"bool"}}],[11,"ne","","",56,{"inputs":[{"name":"ifnonematch"},{"name":"ifnonematch"}],"output":{"name":"bool"}}],[11,"fmt","","",56,{"inputs":[{"name":"ifnonematch"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",56,{"inputs":[{"name":"ifnonematch"}],"output":{"name":"ifnonematch"}}],[11,"header_name","","",56,{"inputs":[{"name":"ifnonematch"}],"output":{"name":"str"}}],[11,"parse_header","","",56,null],[11,"fmt_header","","",56,{"inputs":[{"name":"ifnonematch"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",56,{"inputs":[{"name":"ifnonematch"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",57,{"inputs":[{"name":"ifrange"},{"name":"ifrange"}],"output":{"name":"bool"}}],[11,"ne","","",57,{"inputs":[{"name":"ifrange"},{"name":"ifrange"}],"output":{"name":"bool"}}],[11,"fmt","","",57,{"inputs":[{"name":"ifrange"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",57,{"inputs":[{"name":"ifrange"}],"output":{"name":"ifrange"}}],[11,"header_name","","",57,{"inputs":[{"name":"ifrange"}],"output":{"name":"str"}}],[11,"parse_header","","",57,null],[11,"fmt_header","","",57,{"inputs":[{"name":"ifrange"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",57,{"inputs":[{"name":"ifrange"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",178,{"inputs":[{"name":"ifunmodifiedsince"},{"name":"ifunmodifiedsince"}],"output":{"name":"bool"}}],[11,"ne","","",178,{"inputs":[{"name":"ifunmodifiedsince"},{"name":"ifunmodifiedsince"}],"output":{"name":"bool"}}],[11,"fmt","","",178,{"inputs":[{"name":"ifunmodifiedsince"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",178,{"inputs":[{"name":"ifunmodifiedsince"}],"output":{"name":"ifunmodifiedsince"}}],[11,"deref","","",178,{"inputs":[{"name":"ifunmodifiedsince"}],"output":{"name":"httpdate"}}],[11,"deref_mut","","",178,{"inputs":[{"name":"ifunmodifiedsince"}],"output":{"name":"httpdate"}}],[11,"header_name","","",178,{"inputs":[{"name":"ifunmodifiedsince"}],"output":{"name":"str"}}],[11,"parse_header","","",178,null],[11,"fmt_header","","",178,{"inputs":[{"name":"ifunmodifiedsince"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",178,{"inputs":[{"name":"ifunmodifiedsince"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",179,{"inputs":[{"name":"lastmodified"},{"name":"lastmodified"}],"output":{"name":"bool"}}],[11,"ne","","",179,{"inputs":[{"name":"lastmodified"},{"name":"lastmodified"}],"output":{"name":"bool"}}],[11,"fmt","","",179,{"inputs":[{"name":"lastmodified"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",179,{"inputs":[{"name":"lastmodified"}],"output":{"name":"lastmodified"}}],[11,"deref","","",179,{"inputs":[{"name":"lastmodified"}],"output":{"name":"httpdate"}}],[11,"deref_mut","","",179,{"inputs":[{"name":"lastmodified"}],"output":{"name":"httpdate"}}],[11,"header_name","","",179,{"inputs":[{"name":"lastmodified"}],"output":{"name":"str"}}],[11,"parse_header","","",179,null],[11,"fmt_header","","",179,{"inputs":[{"name":"lastmodified"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",179,{"inputs":[{"name":"lastmodified"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",180,{"inputs":[{"name":"location"},{"name":"location"}],"output":{"name":"bool"}}],[11,"ne","","",180,{"inputs":[{"name":"location"},{"name":"location"}],"output":{"name":"bool"}}],[11,"fmt","","",180,{"inputs":[{"name":"location"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",180,{"inputs":[{"name":"location"}],"output":{"name":"location"}}],[11,"deref","","",180,{"inputs":[{"name":"location"}],"output":{"name":"string"}}],[11,"deref_mut","","",180,{"inputs":[{"name":"location"}],"output":{"name":"string"}}],[11,"header_name","","",180,{"inputs":[{"name":"location"}],"output":{"name":"str"}}],[11,"parse_header","","",180,null],[11,"fmt_header","","",180,{"inputs":[{"name":"location"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",180,{"inputs":[{"name":"location"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",58,{"inputs":[{"name":"pragma"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",58,{"inputs":[{"name":"pragma"},{"name":"pragma"}],"output":{"name":"bool"}}],[11,"ne","","",58,{"inputs":[{"name":"pragma"},{"name":"pragma"}],"output":{"name":"bool"}}],[11,"clone","","",58,{"inputs":[{"name":"pragma"}],"output":{"name":"pragma"}}],[11,"header_name","","",58,{"inputs":[{"name":"pragma"}],"output":{"name":"str"}}],[11,"parse_header","","",58,null],[11,"fmt_header","","",58,{"inputs":[{"name":"pragma"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",59,{"inputs":[{"name":"range"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",59,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"eq","","",59,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"ne","","",59,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"fmt","","",60,{"inputs":[{"name":"byterangespec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",60,{"inputs":[{"name":"byterangespec"}],"output":{"name":"byterangespec"}}],[11,"eq","","",60,{"inputs":[{"name":"byterangespec"},{"name":"byterangespec"}],"output":{"name":"bool"}}],[11,"ne","","",60,{"inputs":[{"name":"byterangespec"},{"name":"byterangespec"}],"output":{"name":"bool"}}],[11,"bytes","","Get the most common byte range header (\"bytes=from-to\")",59,{"inputs":[{"name":"range"},{"name":"u64"},{"name":"u64"}],"output":{"name":"range"}}],[11,"bytes_multi","","Get byte range header with multiple subranges\n(\"bytes=from1-to1,from2-to2,fromX-toX\")",59,{"inputs":[{"name":"range"},{"name":"vec"}],"output":{"name":"range"}}],[11,"fmt","","",60,{"inputs":[{"name":"byterangespec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",59,{"inputs":[{"name":"range"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",59,{"inputs":[{"name":"range"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",60,{"inputs":[{"name":"byterangespec"},{"name":"str"}],"output":{"name":"result"}}],[11,"header_name","","",59,{"inputs":[{"name":"range"}],"output":{"name":"str"}}],[11,"parse_header","","",59,null],[11,"fmt_header","","",59,{"inputs":[{"name":"range"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",181,{"inputs":[{"name":"referer"},{"name":"referer"}],"output":{"name":"bool"}}],[11,"ne","","",181,{"inputs":[{"name":"referer"},{"name":"referer"}],"output":{"name":"bool"}}],[11,"fmt","","",181,{"inputs":[{"name":"referer"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",181,{"inputs":[{"name":"referer"}],"output":{"name":"referer"}}],[11,"deref","","",181,{"inputs":[{"name":"referer"}],"output":{"name":"string"}}],[11,"deref_mut","","",181,{"inputs":[{"name":"referer"}],"output":{"name":"string"}}],[11,"header_name","","",181,{"inputs":[{"name":"referer"}],"output":{"name":"str"}}],[11,"parse_header","","",181,null],[11,"fmt_header","","",181,{"inputs":[{"name":"referer"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",181,{"inputs":[{"name":"referer"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",182,{"inputs":[{"name":"server"},{"name":"server"}],"output":{"name":"bool"}}],[11,"ne","","",182,{"inputs":[{"name":"server"},{"name":"server"}],"output":{"name":"bool"}}],[11,"fmt","","",182,{"inputs":[{"name":"server"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",182,{"inputs":[{"name":"server"}],"output":{"name":"server"}}],[11,"deref","","",182,{"inputs":[{"name":"server"}],"output":{"name":"string"}}],[11,"deref_mut","","",182,{"inputs":[{"name":"server"}],"output":{"name":"string"}}],[11,"header_name","","",182,{"inputs":[{"name":"server"}],"output":{"name":"str"}}],[11,"parse_header","","",182,null],[11,"fmt_header","","",182,{"inputs":[{"name":"server"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",182,{"inputs":[{"name":"server"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",183,{"inputs":[{"name":"setcookie"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",183,{"inputs":[{"name":"setcookie"},{"name":"setcookie"}],"output":{"name":"bool"}}],[11,"ne","","",183,{"inputs":[{"name":"setcookie"},{"name":"setcookie"}],"output":{"name":"bool"}}],[11,"clone","","",183,{"inputs":[{"name":"setcookie"}],"output":{"name":"setcookie"}}],[11,"deref","","",183,{"inputs":[{"name":"setcookie"}],"output":{"name":"vec"}}],[11,"deref_mut","","",183,{"inputs":[{"name":"setcookie"}],"output":{"name":"vec"}}],[11,"header_name","","",183,{"inputs":[{"name":"setcookie"}],"output":{"name":"str"}}],[11,"parse_header","","",183,null],[11,"fmt_header","","",183,{"inputs":[{"name":"setcookie"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_cookie_jar","","Use this to create SetCookie header from CookieJar using\ncalculated delta.",183,{"inputs":[{"name":"setcookie"},{"name":"cookiejar"}],"output":{"name":"setcookie"}}],[11,"apply_to_cookie_jar","","Use this on client to apply changes from SetCookie to CookieJar.\nNote that this will `panic!` if `CookieJar` is not root.",183,{"inputs":[{"name":"setcookie"},{"name":"cookiejar"}],"output":null}],[11,"fmt","","",43,{"inputs":[{"name":"stricttransportsecurity"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",43,{"inputs":[{"name":"stricttransportsecurity"},{"name":"stricttransportsecurity"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"stricttransportsecurity"},{"name":"stricttransportsecurity"}],"output":{"name":"bool"}}],[11,"clone","","",43,{"inputs":[{"name":"stricttransportsecurity"}],"output":{"name":"stricttransportsecurity"}}],[11,"including_subdomains","","Create an STS header that includes subdomains",43,{"inputs":[{"name":"stricttransportsecurity"},{"name":"u64"}],"output":{"name":"stricttransportsecurity"}}],[11,"excluding_subdomains","","Create an STS header that excludes subdomains",43,{"inputs":[{"name":"stricttransportsecurity"},{"name":"u64"}],"output":{"name":"stricttransportsecurity"}}],[11,"from_str","","",43,{"inputs":[{"name":"stricttransportsecurity"},{"name":"str"}],"output":{"name":"result"}}],[11,"header_name","","",43,{"inputs":[{"name":"stricttransportsecurity"}],"output":{"name":"str"}}],[11,"parse_header","","",43,null],[11,"fmt_header","","",43,{"inputs":[{"name":"stricttransportsecurity"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",184,{"inputs":[{"name":"transferencoding"},{"name":"transferencoding"}],"output":{"name":"bool"}}],[11,"ne","","",184,{"inputs":[{"name":"transferencoding"},{"name":"transferencoding"}],"output":{"name":"bool"}}],[11,"fmt","","",184,{"inputs":[{"name":"transferencoding"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",184,{"inputs":[{"name":"transferencoding"}],"output":{"name":"transferencoding"}}],[11,"deref","","",184,{"inputs":[{"name":"transferencoding"}],"output":{"name":"vec"}}],[11,"deref_mut","","",184,{"inputs":[{"name":"transferencoding"}],"output":{"name":"vec"}}],[11,"header_name","","",184,{"inputs":[{"name":"transferencoding"}],"output":{"name":"str"}}],[11,"parse_header","","",184,null],[11,"fmt_header","","",184,{"inputs":[{"name":"transferencoding"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",184,{"inputs":[{"name":"transferencoding"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",185,{"inputs":[{"name":"upgrade"},{"name":"upgrade"}],"output":{"name":"bool"}}],[11,"ne","","",185,{"inputs":[{"name":"upgrade"},{"name":"upgrade"}],"output":{"name":"bool"}}],[11,"fmt","","",185,{"inputs":[{"name":"upgrade"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",185,{"inputs":[{"name":"upgrade"}],"output":{"name":"upgrade"}}],[11,"deref","","",185,{"inputs":[{"name":"upgrade"}],"output":{"name":"vec"}}],[11,"deref_mut","","",185,{"inputs":[{"name":"upgrade"}],"output":{"name":"vec"}}],[11,"header_name","","",185,{"inputs":[{"name":"upgrade"}],"output":{"name":"str"}}],[11,"parse_header","","",185,null],[11,"fmt_header","","",185,{"inputs":[{"name":"upgrade"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",185,{"inputs":[{"name":"upgrade"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",61,{"inputs":[{"name":"protocolname"},{"name":"protocolname"}],"output":{"name":"bool"}}],[11,"ne","","",61,{"inputs":[{"name":"protocolname"},{"name":"protocolname"}],"output":{"name":"bool"}}],[11,"fmt","","",61,{"inputs":[{"name":"protocolname"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",61,{"inputs":[{"name":"protocolname"}],"output":{"name":"protocolname"}}],[11,"from_str","","",61,{"inputs":[{"name":"protocolname"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",61,{"inputs":[{"name":"protocolname"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",44,{"inputs":[{"name":"protocol"},{"name":"protocol"}],"output":{"name":"bool"}}],[11,"ne","","",44,{"inputs":[{"name":"protocol"},{"name":"protocol"}],"output":{"name":"bool"}}],[11,"fmt","","",44,{"inputs":[{"name":"protocol"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",44,{"inputs":[{"name":"protocol"}],"output":{"name":"protocol"}}],[11,"new","","Creates a new Protocol with the given name and version",44,{"inputs":[{"name":"protocol"},{"name":"protocolname"},{"name":"option"}],"output":{"name":"protocol"}}],[11,"from_str","","",44,{"inputs":[{"name":"protocol"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",44,{"inputs":[{"name":"protocol"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",186,{"inputs":[{"name":"useragent"},{"name":"useragent"}],"output":{"name":"bool"}}],[11,"ne","","",186,{"inputs":[{"name":"useragent"},{"name":"useragent"}],"output":{"name":"bool"}}],[11,"fmt","","",186,{"inputs":[{"name":"useragent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",186,{"inputs":[{"name":"useragent"}],"output":{"name":"useragent"}}],[11,"deref","","",186,{"inputs":[{"name":"useragent"}],"output":{"name":"string"}}],[11,"deref_mut","","",186,{"inputs":[{"name":"useragent"}],"output":{"name":"string"}}],[11,"header_name","","",186,{"inputs":[{"name":"useragent"}],"output":{"name":"str"}}],[11,"parse_header","","",186,null],[11,"fmt_header","","",186,{"inputs":[{"name":"useragent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",186,{"inputs":[{"name":"useragent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",62,{"inputs":[{"name":"vary"},{"name":"vary"}],"output":{"name":"bool"}}],[11,"ne","","",62,{"inputs":[{"name":"vary"},{"name":"vary"}],"output":{"name":"bool"}}],[11,"fmt","","",62,{"inputs":[{"name":"vary"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",62,{"inputs":[{"name":"vary"}],"output":{"name":"vary"}}],[11,"header_name","","",62,{"inputs":[{"name":"vary"}],"output":{"name":"str"}}],[11,"parse_header","","",62,null],[11,"fmt_header","","",62,{"inputs":[{"name":"vary"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",62,{"inputs":[{"name":"vary"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_some","core::option","Returns `true` if the option is a `Some` value",187,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"is_none","","Returns `true` if the option is a `None` value",187,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"as_ref","","Converts from `Option<T>` to `Option<&T>`",187,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_mut","","Converts from `Option<T>` to `Option<&mut T>`",187,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_mut_slice","","Converts from `Option<T>` to `&mut [T]` (without copying)",187,null],[11,"expect","","Unwraps an option, yielding the content of a `Some`",187,{"inputs":[{"name":"option"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap","","Moves the value `v` out of the `Option<T>` if it is `Some(v)`.",187,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"unwrap_or","","Returns the contained value or a default.",187,{"inputs":[{"name":"option"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",187,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"t"}}],[11,"map","","Maps an `Option<T>` to `Option<U>` by applying a function to a contained value",187,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",187,{"inputs":[{"name":"option"},{"name":"u"},{"name":"f"}],"output":{"name":"u"}}],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",187,{"inputs":[{"name":"option"},{"name":"d"},{"name":"f"}],"output":{"name":"u"}}],[11,"ok_or","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",187,{"inputs":[{"name":"option"},{"name":"e"}],"output":{"name":"result"}}],[11,"ok_or_else","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",187,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",187,{"inputs":[{"name":"option"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",187,{"inputs":[{"name":"option"}],"output":{"name":"itermut"}}],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",187,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",187,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",187,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",187,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",187,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_slice","","Converts from `Option<T>` to `&[T]` (without copying)",187,null],[11,"cloned","","Maps an `Option<&T>` to an `Option<T>` by cloning the contents of the\noption.",187,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"unwrap_or_default","","Returns the contained value or a default",187,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"default","core::num","",188,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"fmt","","",188,{"inputs":[{"name":"wrapping"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",188,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"cmp","","",188,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",188,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"option"}}],[11,"lt","","",188,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"le","","",188,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"gt","","",188,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ge","","",188,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"eq","","",188,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ne","","",188,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"shl","","",188,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",188,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",188,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",188,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",188,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",188,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",188,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",188,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",188,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",188,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",188,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",188,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",188,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",188,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",188,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",188,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",188,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",188,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",188,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",188,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"add","","",188,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",188,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",188,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",188,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",188,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",188,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",188,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",188,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",188,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",188,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",188,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",188,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",188,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",188,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",188,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",188,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",188,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",188,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",188,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",188,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",188,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",188,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",188,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",188,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",188,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",188,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",188,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",188,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",188,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",188,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",188,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",188,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",188,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",188,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",188,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",188,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",188,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",188,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",188,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",188,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",188,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",188,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",188,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",188,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",188,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",188,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",188,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",188,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",188,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",188,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",188,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",188,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",188,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",188,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",188,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",188,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",188,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",188,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",188,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",188,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",188,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",188,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",188,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",188,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",188,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",188,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",188,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",188,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",188,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",188,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",188,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",188,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",188,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",188,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",188,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",188,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",188,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",188,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",188,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",188,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"eq","core::num::flt2dec::decoder","",189,{"inputs":[{"name":"decoded"},{"name":"decoded"}],"output":{"name":"bool"}}],[11,"ne","","",189,{"inputs":[{"name":"decoded"},{"name":"decoded"}],"output":{"name":"bool"}}],[11,"fmt","","",189,{"inputs":[{"name":"decoded"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",189,{"inputs":[{"name":"decoded"}],"output":{"name":"decoded"}}],[11,"eq","","",190,{"inputs":[{"name":"fulldecoded"},{"name":"fulldecoded"}],"output":{"name":"bool"}}],[11,"ne","","",190,{"inputs":[{"name":"fulldecoded"},{"name":"fulldecoded"}],"output":{"name":"bool"}}],[11,"fmt","","",190,{"inputs":[{"name":"fulldecoded"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",190,{"inputs":[{"name":"fulldecoded"}],"output":{"name":"fulldecoded"}}],[11,"fmt","core::num::flt2dec","",191,{"inputs":[{"name":"part"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",191,{"inputs":[{"name":"part"},{"name":"part"}],"output":{"name":"bool"}}],[11,"ne","","",191,{"inputs":[{"name":"part"},{"name":"part"}],"output":{"name":"bool"}}],[11,"clone","","",191,{"inputs":[{"name":"part"}],"output":{"name":"part"}}],[11,"len","","Returns the exact byte length of given part.",191,{"inputs":[{"name":"part"}],"output":{"name":"usize"}}],[11,"write","","Writes a part into the supplied buffer.\nReturns the number of written bytes, or `None` if the buffer is not enough.\n(It may still leave partially written bytes in the buffer; do not rely on that.)",191,null],[11,"clone","","",192,{"inputs":[{"name":"formatted"}],"output":{"name":"formatted"}}],[11,"len","","Returns the exact byte length of combined formatted result.",192,{"inputs":[{"name":"formatted"}],"output":{"name":"usize"}}],[11,"write","","Writes all formatted parts into the supplied buffer.\nReturns the number of written bytes, or `None` if the buffer is not enough.\n(It may still leave partially written bytes in the buffer; do not rely on that.)",192,null],[11,"fmt","","",193,{"inputs":[{"name":"sign"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",193,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"ne","","",193,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"clone","","",193,{"inputs":[{"name":"sign"}],"output":{"name":"sign"}}],[11,"fmt","core::num::dec2flt::rawfp","",194,{"inputs":[{"name":"unpacked"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",194,{"inputs":[{"name":"unpacked"}],"output":{"name":"unpacked"}}],[11,"new","","",194,{"inputs":[{"name":"unpacked"},{"name":"u64"},{"name":"i16"}],"output":{"name":"unpacked"}}],[11,"fmt","core::num::dec2flt::parse","",195,{"inputs":[{"name":"sign"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",196,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"ne","","",196,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"fmt","","",196,{"inputs":[{"name":"decimal"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",196,null],[11,"eq","","",197,{"inputs":[{"name":"parseresult"},{"name":"parseresult"}],"output":{"name":"bool"}}],[11,"ne","","",197,{"inputs":[{"name":"parseresult"},{"name":"parseresult"}],"output":{"name":"bool"}}],[11,"fmt","","",197,{"inputs":[{"name":"parseresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","core::num::dec2flt","",198,{"inputs":[{"name":"parsefloaterror"},{"name":"parsefloaterror"}],"output":{"name":"bool"}}],[11,"ne","","",198,{"inputs":[{"name":"parsefloaterror"},{"name":"parsefloaterror"}],"output":{"name":"bool"}}],[11,"clone","","",198,{"inputs":[{"name":"parsefloaterror"}],"output":{"name":"parsefloaterror"}}],[11,"fmt","","",198,{"inputs":[{"name":"parsefloaterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",199,{"inputs":[{"name":"floaterrorkind"},{"name":"floaterrorkind"}],"output":{"name":"bool"}}],[11,"ne","","",199,{"inputs":[{"name":"floaterrorkind"},{"name":"floaterrorkind"}],"output":{"name":"bool"}}],[11,"clone","","",199,{"inputs":[{"name":"floaterrorkind"}],"output":{"name":"floaterrorkind"}}],[11,"fmt","","",199,{"inputs":[{"name":"floaterrorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",198,{"inputs":[{"name":"parsefloaterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_small","core::num::bignum","Makes a bignum from one digit.",200,{"inputs":[{"name":"big32x40"},{"name":"u32"}],"output":{"name":"big32x40"}}],[11,"from_u64","","Makes a bignum from `u64` value.",200,{"inputs":[{"name":"big32x40"},{"name":"u64"}],"output":{"name":"big32x40"}}],[11,"digits","","Return the internal digits as a slice `[a, b, c, ...]` such that the numeric\nvalue is `a + b * 2^W + c * 2^(2W) + ...` where `W` is the number of bits in\nthe digit type.",200,null],[11,"get_bit","","Return the `i`-th bit where bit 0 is the least significant one.\nIn other words, the bit with weight `2^i`.",200,{"inputs":[{"name":"big32x40"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"is_zero","","Returns true if the bignum is zero.",200,{"inputs":[{"name":"big32x40"}],"output":{"name":"bool"}}],[11,"bit_length","","Returns the number of bits necessary to represent this value. Note that zero\nis considered to need 0 bits.",200,{"inputs":[{"name":"big32x40"}],"output":{"name":"usize"}}],[11,"add","","Adds `other` to itself and returns its own mutable reference.",200,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"big32x40"}}],[11,"add_small","","",200,{"inputs":[{"name":"big32x40"},{"name":"u32"}],"output":{"name":"big32x40"}}],[11,"sub","","Subtracts `other` from itself and returns its own mutable reference.",200,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"big32x40"}}],[11,"mul_small","","Multiplies itself by a digit-sized `other` and returns its own\nmutable reference.",200,{"inputs":[{"name":"big32x40"},{"name":"u32"}],"output":{"name":"big32x40"}}],[11,"mul_pow2","","Multiplies itself by `2^bits` and returns its own mutable reference.",200,{"inputs":[{"name":"big32x40"},{"name":"usize"}],"output":{"name":"big32x40"}}],[11,"mul_pow5","","Multiplies itself by `5^e` and returns its own mutable reference.",200,{"inputs":[{"name":"big32x40"},{"name":"usize"}],"output":{"name":"big32x40"}}],[11,"mul_digits","","Multiplies itself by a number described by `other[0] + other[1] * 2^W +\nother[2] * 2^(2W) + ...` (where `W` is the number of bits in the digit type)\nand returns its own mutable reference.",200,null],[11,"div_rem_small","","Divides itself by a digit-sized `other` and returns its own\nmutable reference *and* the remainder.",200,null],[11,"div_rem","","Divide self by another bignum, overwriting `q` with the quotient and `r` with the\nremainder.",200,null],[11,"eq","","",200,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",200,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"option"}}],[11,"cmp","","",200,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"ordering"}}],[11,"clone","","",200,{"inputs":[{"name":"big32x40"}],"output":{"name":"big32x40"}}],[11,"fmt","","",200,{"inputs":[{"name":"big32x40"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_small","core::num::bignum::tests","Makes a bignum from one digit.",201,{"inputs":[{"name":"big8x3"},{"name":"u8"}],"output":{"name":"big8x3"}}],[11,"from_u64","","Makes a bignum from `u64` value.",201,{"inputs":[{"name":"big8x3"},{"name":"u64"}],"output":{"name":"big8x3"}}],[11,"digits","","Return the internal digits as a slice `[a, b, c, ...]` such that the numeric\nvalue is `a + b * 2^W + c * 2^(2W) + ...` where `W` is the number of bits in\nthe digit type.",201,null],[11,"get_bit","","Return the `i`-th bit where bit 0 is the least significant one.\nIn other words, the bit with weight `2^i`.",201,{"inputs":[{"name":"big8x3"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"is_zero","","Returns true if the bignum is zero.",201,{"inputs":[{"name":"big8x3"}],"output":{"name":"bool"}}],[11,"bit_length","","Returns the number of bits necessary to represent this value. Note that zero\nis considered to need 0 bits.",201,{"inputs":[{"name":"big8x3"}],"output":{"name":"usize"}}],[11,"add","","Adds `other` to itself and returns its own mutable reference.",201,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"big8x3"}}],[11,"add_small","","",201,{"inputs":[{"name":"big8x3"},{"name":"u8"}],"output":{"name":"big8x3"}}],[11,"sub","","Subtracts `other` from itself and returns its own mutable reference.",201,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"big8x3"}}],[11,"mul_small","","Multiplies itself by a digit-sized `other` and returns its own\nmutable reference.",201,{"inputs":[{"name":"big8x3"},{"name":"u8"}],"output":{"name":"big8x3"}}],[11,"mul_pow2","","Multiplies itself by `2^bits` and returns its own mutable reference.",201,{"inputs":[{"name":"big8x3"},{"name":"usize"}],"output":{"name":"big8x3"}}],[11,"mul_pow5","","Multiplies itself by `5^e` and returns its own mutable reference.",201,{"inputs":[{"name":"big8x3"},{"name":"usize"}],"output":{"name":"big8x3"}}],[11,"mul_digits","","Multiplies itself by a number described by `other[0] + other[1] * 2^W +\nother[2] * 2^(2W) + ...` (where `W` is the number of bits in the digit type)\nand returns its own mutable reference.",201,null],[11,"div_rem_small","","Divides itself by a digit-sized `other` and returns its own\nmutable reference *and* the remainder.",201,null],[11,"div_rem","","Divide self by another bignum, overwriting `q` with the quotient and `r` with the\nremainder.",201,null],[11,"eq","","",201,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",201,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"option"}}],[11,"cmp","","",201,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"ordering"}}],[11,"clone","","",201,{"inputs":[{"name":"big8x3"}],"output":{"name":"big8x3"}}],[11,"fmt","","",201,{"inputs":[{"name":"big8x3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::num::diy_float","",202,{"inputs":[{"name":"fp"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",202,{"inputs":[{"name":"fp"}],"output":{"name":"fp"}}],[11,"mul","","Returns a correctly rounded product of itself and `other`.",202,{"inputs":[{"name":"fp"},{"name":"fp"}],"output":{"name":"fp"}}],[11,"normalize","","Normalizes itself so that the resulting mantissa is at least `2^63`.",202,{"inputs":[{"name":"fp"}],"output":{"name":"fp"}}],[11,"normalize_to","","Normalizes itself to have the shared exponent.\nIt can only decrease the exponent (and thus increase the mantissa).",202,{"inputs":[{"name":"fp"},{"name":"i16"}],"output":{"name":"fp"}}],[11,"fmt","core::num","",203,{"inputs":[{"name":"fpcategory"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",203,{"inputs":[{"name":"fpcategory"},{"name":"fpcategory"}],"output":{"name":"bool"}}],[11,"ne","","",203,{"inputs":[{"name":"fpcategory"},{"name":"fpcategory"}],"output":{"name":"bool"}}],[11,"clone","","",203,{"inputs":[{"name":"fpcategory"}],"output":{"name":"fpcategory"}}],[11,"eq","","",204,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"ne","","",204,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"clone","","",204,{"inputs":[{"name":"parseinterror"}],"output":{"name":"parseinterror"}}],[11,"fmt","","",204,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",205,{"inputs":[{"name":"interrorkind"},{"name":"interrorkind"}],"output":{"name":"bool"}}],[11,"ne","","",205,{"inputs":[{"name":"interrorkind"},{"name":"interrorkind"}],"output":{"name":"bool"}}],[11,"clone","","",205,{"inputs":[{"name":"interrorkind"}],"output":{"name":"interrorkind"}}],[11,"fmt","","",205,{"inputs":[{"name":"interrorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",204,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","core::nonzero","",206,null],[11,"fmt","","",206,{"inputs":[{"name":"nonzero"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",206,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"option"}}],[11,"lt","","",206,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"le","","",206,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"gt","","",206,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"ge","","",206,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"cmp","","",206,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"ordering"}}],[11,"eq","","",206,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"ne","","",206,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"clone","","",206,{"inputs":[{"name":"nonzero"}],"output":{"name":"nonzero"}}],[11,"new","","Creates an instance of NonZero with the provided value.\nYou must indeed ensure that the value is actually \"non-zero\".",206,{"inputs":[{"name":"nonzero"},{"name":"t"}],"output":{"name":"nonzero"}}],[11,"deref","","",206,{"inputs":[{"name":"nonzero"}],"output":{"name":"t"}}],[11,"new","core::ptr","Creates a new `Unique`.",207,null],[11,"get","","Dereferences the content.",207,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"get_mut","","Mutably dereferences the content.",207,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"deref","","",207,null],[11,"fmt","","",207,{"inputs":[{"name":"unique"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `Shared`.",208,null],[11,"clone","","",208,{"inputs":[{"name":"shared"}],"output":{"name":"shared"}}],[11,"deref","","",208,null],[11,"fmt","","",208,{"inputs":[{"name":"shared"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","core::marker","",209,null],[11,"eq","","",209,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",209,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"option"}}],[11,"cmp","","",209,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"ordering"}}],[11,"clone","","",209,{"inputs":[{"name":"phantomdata"}],"output":{"name":"phantomdata"}}],[11,"default","","",209,{"inputs":[{"name":"phantomdata"}],"output":{"name":"phantomdata"}}],[11,"eq","core::ops","",210,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"ne","","",210,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"clone","","",210,{"inputs":[{"name":"rangefull"}],"output":{"name":"rangefull"}}],[11,"fmt","","",210,{"inputs":[{"name":"rangefull"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",117,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"ne","","",117,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"clone","","",117,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"fmt","","",117,{"inputs":[{"name":"range"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",115,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"ne","","",115,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"clone","","",115,{"inputs":[{"name":"rangefrom"}],"output":{"name":"rangefrom"}}],[11,"fmt","","",115,{"inputs":[{"name":"rangefrom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",116,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"ne","","",116,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"clone","","",116,{"inputs":[{"name":"rangeto"}],"output":{"name":"rangeto"}}],[11,"fmt","","",116,{"inputs":[{"name":"rangeto"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::cmp","",211,{"inputs":[{"name":"ordering"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",211,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"ne","","",211,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"clone","","",211,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"reverse","","Reverse the `Ordering`.",211,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"cmp","","",211,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",211,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"option"}}],[11,"fmt","hyper::header::internals","",212,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",212,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is","","Returns true if the boxed type is the same as `T`",212,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",212,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",212,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",212,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",212,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",212,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"hash","core::any","",213,null],[11,"fmt","","",213,{"inputs":[{"name":"typeid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",213,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"ne","","",213,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"clone","","",213,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",213,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[11,"default","core::sync::atomic","",214,{"inputs":[{"name":"atomicbool"}],"output":{"name":"atomicbool"}}],[11,"default","","",215,{"inputs":[{"name":"atomicisize"}],"output":{"name":"atomicisize"}}],[11,"default","","",216,{"inputs":[{"name":"atomicusize"}],"output":{"name":"atomicusize"}}],[11,"default","","",217,{"inputs":[{"name":"atomicptr"}],"output":{"name":"atomicptr"}}],[11,"clone","","",218,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"new","","Creates a new `AtomicBool`.",214,{"inputs":[{"name":"atomicbool"},{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"load","","Loads a value from the bool.",214,{"inputs":[{"name":"atomicbool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"store","","Stores a value into the bool.",214,null],[11,"swap","","Stores a value into the bool, returning the old value.",214,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_and_swap","","Stores a value into the `bool` if the current value is the same as the `current` value.",214,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_and","","Logical \"and\" with a boolean value.",214,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_nand","","Logical \"nand\" with a boolean value.",214,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_or","","Logical \"or\" with a boolean value.",214,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_xor","","Logical \"xor\" with a boolean value.",214,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `AtomicIsize`.",215,{"inputs":[{"name":"atomicisize"},{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"load","","Loads a value from the isize.",215,{"inputs":[{"name":"atomicisize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"store","","Stores a value into the isize.",215,null],[11,"swap","","Stores a value into the isize, returning the old value.",215,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_and_swap","","Stores a value into the `isize` if the current value is the same as the `current` value.",215,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_add","","Add an isize to the current value, returning the previous value.",215,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_sub","","Subtract an isize from the current value, returning the previous value.",215,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_and","","Bitwise and with the current isize, returning the previous value.",215,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_or","","Bitwise or with the current isize, returning the previous value.",215,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_xor","","Bitwise xor with the current isize, returning the previous value.",215,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"new","","Creates a new `AtomicUsize`.",216,{"inputs":[{"name":"atomicusize"},{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"load","","Loads a value from the usize.",216,{"inputs":[{"name":"atomicusize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"store","","Stores a value into the usize.",216,null],[11,"swap","","Stores a value into the usize, returning the old value.",216,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_and_swap","","Stores a value into the `usize` if the current value is the same as the `current` value.",216,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_add","","Add to the current usize, returning the previous value.",216,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_sub","","Subtract from the current usize, returning the previous value.",216,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_and","","Bitwise and with the current usize, returning the previous value.",216,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_or","","Bitwise or with the current usize, returning the previous value.",216,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_xor","","Bitwise xor with the current usize, returning the previous value.",216,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"new","","Creates a new `AtomicPtr`.",217,null],[11,"load","","Loads a value from the pointer.",217,null],[11,"store","","Stores a value into the pointer.",217,null],[11,"swap","","Stores a value into the pointer, returning the old value.",217,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",217,null],[11,"fmt","","",216,{"inputs":[{"name":"atomicusize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",215,{"inputs":[{"name":"atomicisize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",214,{"inputs":[{"name":"atomicbool"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",217,{"inputs":[{"name":"atomicptr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","core::cell","Creates a new `Cell` containing the given value.",219,{"inputs":[{"name":"cell"},{"name":"t"}],"output":{"name":"cell"}}],[11,"get","","Returns a copy of the contained value.",219,{"inputs":[{"name":"cell"}],"output":{"name":"t"}}],[11,"set","","Sets the contained value.",219,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",219,{"inputs":[{"name":"cell"}],"output":{"name":"unsafecell"}}],[11,"clone","","",219,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"default","","",219,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"eq","","",219,{"inputs":[{"name":"cell"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"fmt","","",220,{"inputs":[{"name":"borrowstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",220,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"ne","","",220,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"clone","","",220,{"inputs":[{"name":"borrowstate"}],"output":{"name":"borrowstate"}}],[11,"new","","Creates a new `RefCell` containing `value`.",221,{"inputs":[{"name":"refcell"},{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",221,{"inputs":[{"name":"refcell"}],"output":{"name":"t"}}],[11,"borrow_state","","Query the current state of this `RefCell`",221,{"inputs":[{"name":"refcell"}],"output":{"name":"borrowstate"}}],[11,"borrow","","Immutably borrows the wrapped value.",221,{"inputs":[{"name":"refcell"}],"output":{"name":"ref"}}],[11,"borrow_mut","","Mutably borrows the wrapped value.",221,{"inputs":[{"name":"refcell"}],"output":{"name":"refmut"}}],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",221,{"inputs":[{"name":"refcell"}],"output":{"name":"unsafecell"}}],[11,"clone","","",221,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"default","","",221,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"eq","","",221,{"inputs":[{"name":"refcell"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"drop","","",222,null],[11,"clone","","",222,{"inputs":[{"name":"borrowref"}],"output":{"name":"borrowref"}}],[11,"deref","","",223,{"inputs":[{"name":"ref"}],"output":{"name":"t"}}],[11,"clone","","Copies a `Ref`.",223,{"inputs":[{"name":"ref"},{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",223,{"inputs":[{"name":"ref"},{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"filter_map","","Make a new `Ref` for an optional component of the borrowed data, e.g. an\nenum variant.",223,{"inputs":[{"name":"ref"},{"name":"ref"},{"name":"f"}],"output":{"name":"option"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum\nvariant.",224,{"inputs":[{"name":"refmut"},{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"filter_map","","Make a new `RefMut` for an optional component of the borrowed data, e.g.\nan enum variant.",224,{"inputs":[{"name":"refmut"},{"name":"refmut"},{"name":"f"}],"output":{"name":"option"}}],[11,"drop","","",225,null],[11,"deref","","",224,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"deref_mut","","",224,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified\nvalue.",226,{"inputs":[{"name":"unsafecell"},{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",226,{"inputs":[{"name":"unsafecell"}],"output":{"name":"t"}}],[11,"get","","Gets a mutable pointer to the wrapped value.",226,null],[11,"clone","core::char","",227,{"inputs":[{"name":"escapeunicode"}],"output":{"name":"escapeunicode"}}],[11,"clone","","",228,{"inputs":[{"name":"escapeunicodestate"}],"output":{"name":"escapeunicodestate"}}],[11,"next","","",227,{"inputs":[{"name":"escapeunicode"}],"output":{"name":"option"}}],[11,"size_hint","","",227,null],[11,"clone","","",229,{"inputs":[{"name":"escapedefault"}],"output":{"name":"escapedefault"}}],[11,"clone","","",230,{"inputs":[{"name":"escapedefaultstate"}],"output":{"name":"escapedefaultstate"}}],[11,"next","","",229,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"size_hint","","",229,null],[11,"clone","core::iter","",231,{"inputs":[{"name":"rev"}],"output":{"name":"rev"}}],[11,"next","","",231,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"size_hint","","",231,null],[11,"next_back","","",231,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"clone","","",232,{"inputs":[{"name":"cloned"}],"output":{"name":"cloned"}}],[11,"next","","",232,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"size_hint","","",232,null],[11,"next_back","","",232,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"clone","","",233,{"inputs":[{"name":"cycle"}],"output":{"name":"cycle"}}],[11,"next","","",233,{"inputs":[{"name":"cycle"}],"output":{"name":"option"}}],[11,"size_hint","","",233,null],[11,"clone","","",234,{"inputs":[{"name":"chain"}],"output":{"name":"chain"}}],[11,"clone","","",235,{"inputs":[{"name":"chainstate"}],"output":{"name":"chainstate"}}],[11,"next","","",234,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"count","","",234,{"inputs":[{"name":"chain"}],"output":{"name":"usize"}}],[11,"nth","","",234,{"inputs":[{"name":"chain"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",234,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"size_hint","","",234,null],[11,"next_back","","",234,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"clone","","",236,{"inputs":[{"name":"zip"}],"output":{"name":"zip"}}],[11,"next","","",236,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",236,null],[11,"next_back","","",236,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"clone","","",237,{"inputs":[{"name":"map"}],"output":{"name":"map"}}],[11,"next","","",237,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"size_hint","","",237,null],[11,"next_back","","",237,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"clone","","",238,{"inputs":[{"name":"filter"}],"output":{"name":"filter"}}],[11,"next","","",238,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"size_hint","","",238,null],[11,"next_back","","",238,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"clone","","",239,{"inputs":[{"name":"filtermap"}],"output":{"name":"filtermap"}}],[11,"next","","",239,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"size_hint","","",239,null],[11,"next_back","","",239,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"clone","","",240,{"inputs":[{"name":"enumerate"}],"output":{"name":"enumerate"}}],[11,"next","","# Overflow Behavior",240,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"size_hint","","",240,null],[11,"nth","","",240,{"inputs":[{"name":"enumerate"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",240,{"inputs":[{"name":"enumerate"}],"output":{"name":"usize"}}],[11,"next_back","","",240,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"clone","","",241,{"inputs":[{"name":"peekable"}],"output":{"name":"peekable"}}],[11,"next","","",241,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"count","","",241,{"inputs":[{"name":"peekable"}],"output":{"name":"usize"}}],[11,"nth","","",241,{"inputs":[{"name":"peekable"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",241,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"size_hint","","",241,null],[11,"peek","","Returns a reference to the next() value without advancing the iterator.",241,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"is_empty","","Checks if the iterator has finished iterating.",241,{"inputs":[{"name":"peekable"}],"output":{"name":"bool"}}],[11,"clone","","",242,{"inputs":[{"name":"skipwhile"}],"output":{"name":"skipwhile"}}],[11,"next","","",242,{"inputs":[{"name":"skipwhile"}],"output":{"name":"option"}}],[11,"size_hint","","",242,null],[11,"clone","","",243,{"inputs":[{"name":"takewhile"}],"output":{"name":"takewhile"}}],[11,"next","","",243,{"inputs":[{"name":"takewhile"}],"output":{"name":"option"}}],[11,"size_hint","","",243,null],[11,"clone","","",244,{"inputs":[{"name":"skip"}],"output":{"name":"skip"}}],[11,"next","","",244,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"nth","","",244,{"inputs":[{"name":"skip"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",244,{"inputs":[{"name":"skip"}],"output":{"name":"usize"}}],[11,"last","","",244,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"size_hint","","",244,null],[11,"clone","","",245,{"inputs":[{"name":"take"}],"output":{"name":"take"}}],[11,"next","","",245,{"inputs":[{"name":"take"}],"output":{"name":"option"}}],[11,"nth","","",245,{"inputs":[{"name":"take"},{"name":"usize"}],"output":{"name":"option"}}],[11,"size_hint","","",245,null],[11,"clone","","",246,{"inputs":[{"name":"scan"}],"output":{"name":"scan"}}],[11,"next","","",246,{"inputs":[{"name":"scan"}],"output":{"name":"option"}}],[11,"size_hint","","",246,null],[11,"clone","","",247,{"inputs":[{"name":"flatmap"}],"output":{"name":"flatmap"}}],[11,"next","","",247,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"size_hint","","",247,null],[11,"next_back","","",247,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"clone","","",248,{"inputs":[{"name":"fuse"}],"output":{"name":"fuse"}}],[11,"next","","",248,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"nth","","",248,{"inputs":[{"name":"fuse"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",248,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"count","","",248,{"inputs":[{"name":"fuse"}],"output":{"name":"usize"}}],[11,"size_hint","","",248,null],[11,"next_back","","",248,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"clone","","",249,{"inputs":[{"name":"inspect"}],"output":{"name":"inspect"}}],[11,"next","","",249,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"size_hint","","",249,null],[11,"next_back","","",249,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"clone","","",250,{"inputs":[{"name":"stepby"}],"output":{"name":"stepby"}}],[11,"step_by","core::ops","Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.",115,{"inputs":[{"name":"rangefrom"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",117,{"inputs":[{"name":"range"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"next","core::iter","",250,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",250,null],[11,"clone","","",251,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"rangeinclusive"}}],[11,"next","","",251,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"size_hint","","",251,null],[11,"next_back","","",251,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"next","","",250,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",250,null],[11,"next","core::ops","",117,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"size_hint","","",117,null],[11,"next_back","","",117,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next","","",115,{"inputs":[{"name":"rangefrom"}],"output":{"name":"option"}}],[11,"clone","core::iter","",252,{"inputs":[{"name":"repeat"}],"output":{"name":"repeat"}}],[11,"next","","",252,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"size_hint","","",252,null],[11,"next_back","","",252,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"next","","",253,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"size_hint","","",253,null],[11,"next_back","","",253,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"len","","",253,{"inputs":[{"name":"empty"}],"output":{"name":"usize"}}],[11,"clone","","",253,{"inputs":[{"name":"empty"}],"output":{"name":"empty"}}],[11,"default","","",253,{"inputs":[{"name":"empty"}],"output":{"name":"empty"}}],[11,"clone","","",254,{"inputs":[{"name":"once"}],"output":{"name":"once"}}],[11,"next","","",254,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"size_hint","","",254,null],[11,"next_back","","",254,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"len","","",254,{"inputs":[{"name":"once"}],"output":{"name":"usize"}}],[11,"hash","core::option","",187,null],[11,"fmt","","",187,{"inputs":[{"name":"option"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",187,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",187,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"lt","","",187,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"le","","",187,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"gt","","",187,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ge","","",187,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"eq","","",187,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ne","","",187,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"clone","","",187,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"default","","",187,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",187,{"inputs":[{"name":"option"}],"output":{"name":"intoiter"}}],[11,"clone","","",255,{"inputs":[{"name":"item"}],"output":{"name":"item"}}],[11,"next","","",255,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"size_hint","","",255,null],[11,"next_back","","",255,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"next","","",256,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",256,null],[11,"next_back","","",256,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",256,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",257,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",257,null],[11,"next_back","","",257,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",258,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"next","","",258,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",258,null],[11,"next_back","","",258,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",187,{"inputs":[{"name":"option"},{"name":"i"}],"output":{"name":"option"}}],[11,"clone","core::raw","",259,{"inputs":[{"name":"slice"}],"output":{"name":"slice"}}],[11,"clone","","",260,{"inputs":[{"name":"traitobject"}],"output":{"name":"traitobject"}}],[11,"hash","core::result","",261,null],[11,"fmt","","",261,{"inputs":[{"name":"result"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",261,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",261,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"option"}}],[11,"lt","","",261,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"le","","",261,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"gt","","",261,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ge","","",261,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"eq","","",261,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ne","","",261,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"clone","","",261,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"is_ok","","Returns true if the result is `Ok`",261,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"is_err","","Returns true if the result is `Err`",261,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"ok","","Converts from `Result<T, E>` to `Option<T>`",261,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"err","","Converts from `Result<T, E>` to `Option<E>`",261,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"as_ref","","Converts from `Result<T, E>` to `Result<&T, &E>`",261,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"as_mut","","Converts from `Result<T, E>` to `Result<&mut T, &mut E>`",261,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"as_slice","","Converts from `Result<T, E>` to `&[T]` (without copying)",261,null],[11,"as_mut_slice","","Converts from `Result<T, E>` to `&mut [T]` (without copying)",261,null],[11,"map","","Maps a `Result<T, E>` to `Result<U, E>` by applying a function to a\ncontained `Ok` value, leaving an `Err` value untouched.",261,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"map_err","","Maps a `Result<T, E>` to `Result<T, F>` by applying a function to a\ncontained `Err` value, leaving an `Ok` value untouched.",261,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",261,{"inputs":[{"name":"result"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",261,{"inputs":[{"name":"result"}],"output":{"name":"itermut"}}],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",261,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",261,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",261,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",261,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",261,{"inputs":[{"name":"result"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",261,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"t"}}],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",261,{"inputs":[{"name":"result"}],"output":{"name":"t"}}],[11,"expect","","Unwraps a result, yielding the content of an `Ok`.",261,{"inputs":[{"name":"result"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",261,{"inputs":[{"name":"result"}],"output":{"name":"e"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",261,{"inputs":[{"name":"result"}],"output":{"name":"intoiter"}}],[11,"next","","",262,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",262,null],[11,"next_back","","",262,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",262,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",263,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",263,null],[11,"next_back","","",263,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",264,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",264,null],[11,"next_back","","",264,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",261,{"inputs":[{"name":"result"},{"name":"i"}],"output":{"name":"result"}}],[11,"fmt","core::simd","",265,{"inputs":[{"name":"i8x16"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",265,{"inputs":[{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"fmt","","",266,{"inputs":[{"name":"i16x8"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",266,{"inputs":[{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"fmt","","",267,{"inputs":[{"name":"i32x4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",267,{"inputs":[{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"fmt","","",268,{"inputs":[{"name":"i64x2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",268,{"inputs":[{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"fmt","","",269,{"inputs":[{"name":"u8x16"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",269,{"inputs":[{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"fmt","","",270,{"inputs":[{"name":"u16x8"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",270,{"inputs":[{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"fmt","","",271,{"inputs":[{"name":"u32x4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",271,{"inputs":[{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"fmt","","",272,{"inputs":[{"name":"u64x2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",272,{"inputs":[{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"fmt","","",273,{"inputs":[{"name":"f32x4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",273,{"inputs":[{"name":"f32x4"}],"output":{"name":"f32x4"}}],[11,"fmt","","",274,{"inputs":[{"name":"f64x2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",274,{"inputs":[{"name":"f64x2"}],"output":{"name":"f64x2"}}],[11,"add","","",269,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"add","","",270,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"add","","",271,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"add","","",272,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"add","","",265,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"add","","",266,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"add","","",267,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"add","","",268,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"add","","",273,{"inputs":[{"name":"f32x4"},{"name":"f32x4"}],"output":{"name":"f32x4"}}],[11,"add","","",274,{"inputs":[{"name":"f64x2"},{"name":"f64x2"}],"output":{"name":"f64x2"}}],[11,"sub","","",269,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"sub","","",270,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"sub","","",271,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"sub","","",272,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"sub","","",265,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"sub","","",266,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"sub","","",267,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"sub","","",268,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"sub","","",273,{"inputs":[{"name":"f32x4"},{"name":"f32x4"}],"output":{"name":"f32x4"}}],[11,"sub","","",274,{"inputs":[{"name":"f64x2"},{"name":"f64x2"}],"output":{"name":"f64x2"}}],[11,"mul","","",269,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"mul","","",270,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"mul","","",271,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"mul","","",272,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"mul","","",265,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"mul","","",266,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"mul","","",267,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"mul","","",268,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"mul","","",273,{"inputs":[{"name":"f32x4"},{"name":"f32x4"}],"output":{"name":"f32x4"}}],[11,"mul","","",274,{"inputs":[{"name":"f64x2"},{"name":"f64x2"}],"output":{"name":"f64x2"}}],[11,"div","","",273,{"inputs":[{"name":"f32x4"},{"name":"f32x4"}],"output":{"name":"f32x4"}}],[11,"div","","",274,{"inputs":[{"name":"f64x2"},{"name":"f64x2"}],"output":{"name":"f64x2"}}],[11,"shl","","",269,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"shl","","",270,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"shl","","",271,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"shl","","",272,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"shl","","",265,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"shl","","",266,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"shl","","",267,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"shl","","",268,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"shr","","",269,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"shr","","",270,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"shr","","",271,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"shr","","",272,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"shr","","",265,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"shr","","",266,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"shr","","",267,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"shr","","",268,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"bitand","","",269,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"bitand","","",270,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"bitand","","",271,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"bitand","","",272,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"bitand","","",265,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"bitand","","",266,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"bitand","","",267,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"bitand","","",268,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"bitor","","",269,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"bitor","","",270,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"bitor","","",271,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"bitor","","",272,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"bitor","","",265,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"bitor","","",266,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"bitor","","",267,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"bitor","","",268,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"bitxor","","",269,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"bitxor","","",270,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"bitxor","","",271,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"bitxor","","",272,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"bitxor","","",265,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"bitxor","","",266,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"bitxor","","",267,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"bitxor","","",268,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"as_slice","core::slice","View the underlying data as a subslice of the original data.",275,null],[11,"next","","",275,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",275,null],[11,"count","","",275,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"nth","","",275,{"inputs":[{"name":"iter"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",275,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next_back","","",275,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",275,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"into_slice","","View the underlying data as a subslice of the original data.",276,null],[11,"next","","",276,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",276,null],[11,"count","","",276,{"inputs":[{"name":"itermut"}],"output":{"name":"usize"}}],[11,"nth","","",276,{"inputs":[{"name":"itermut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",276,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next_back","","",276,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",277,{"inputs":[{"name":"split"}],"output":{"name":"split"}}],[11,"next","","",277,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"size_hint","","",277,null],[11,"next_back","","",277,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"finish","","",277,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"finish","","",278,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"next","","",278,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"size_hint","","",278,null],[11,"next_back","","",278,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"next","","",279,{"inputs":[{"name":"genericsplitn"}],"output":{"name":"option"}}],[11,"size_hint","","",279,null],[11,"next","","",280,{"inputs":[{"name":"splitn"}],"output":{"name":"option"}}],[11,"size_hint","","",280,null],[11,"next","","",281,{"inputs":[{"name":"rsplitn"}],"output":{"name":"option"}}],[11,"size_hint","","",281,null],[11,"next","","",282,{"inputs":[{"name":"splitnmut"}],"output":{"name":"option"}}],[11,"size_hint","","",282,null],[11,"next","","",283,{"inputs":[{"name":"rsplitnmut"}],"output":{"name":"option"}}],[11,"size_hint","","",283,null],[11,"clone","","",284,{"inputs":[{"name":"windows"}],"output":{"name":"windows"}}],[11,"next","","",284,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"size_hint","","",284,null],[11,"count","","",284,{"inputs":[{"name":"windows"}],"output":{"name":"usize"}}],[11,"nth","","",284,{"inputs":[{"name":"windows"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",284,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"next_back","","",284,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"clone","","",285,{"inputs":[{"name":"chunks"}],"output":{"name":"chunks"}}],[11,"next","","",285,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"size_hint","","",285,null],[11,"count","","",285,{"inputs":[{"name":"chunks"}],"output":{"name":"usize"}}],[11,"nth","","",285,{"inputs":[{"name":"chunks"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",285,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"next_back","","",285,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"next","","",286,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"size_hint","","",286,null],[11,"count","","",286,{"inputs":[{"name":"chunksmut"}],"output":{"name":"usize"}}],[11,"nth","","",286,{"inputs":[{"name":"chunksmut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",286,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"next_back","","",286,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"eq","core::str","",287,{"inputs":[{"name":"parseboolerror"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"ne","","",287,{"inputs":[{"name":"parseboolerror"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"clone","","",287,{"inputs":[{"name":"parseboolerror"}],"output":{"name":"parseboolerror"}}],[11,"fmt","","",287,{"inputs":[{"name":"parseboolerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",287,{"inputs":[{"name":"parseboolerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",288,{"inputs":[{"name":"utf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",288,{"inputs":[{"name":"utf8error"}],"output":{"name":"utf8error"}}],[11,"eq","","",288,{"inputs":[{"name":"utf8error"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"ne","","",288,{"inputs":[{"name":"utf8error"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"valid_up_to","","Returns the index in the given string up to which valid UTF-8 was\nverified.",288,{"inputs":[{"name":"utf8error"}],"output":{"name":"usize"}}],[11,"fmt","","",288,{"inputs":[{"name":"utf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",289,{"inputs":[{"name":"chars"}],"output":{"name":"chars"}}],[11,"next","","",289,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"size_hint","","",289,null],[11,"next_back","","",289,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",289,{"inputs":[{"name":"chars"}],"output":{"name":"str"}}],[11,"clone","","",290,{"inputs":[{"name":"charindices"}],"output":{"name":"charindices"}}],[11,"next","","",290,{"inputs":[{"name":"charindices"}],"output":{"name":"option"}}],[11,"size_hint","","",290,null],[11,"next_back","","",290,{"inputs":[{"name":"charindices"}],"output":{"name":"option"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",290,{"inputs":[{"name":"charindices"}],"output":{"name":"str"}}],[11,"clone","","",291,{"inputs":[{"name":"bytes"}],"output":{"name":"bytes"}}],[11,"next","","",291,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"size_hint","","",291,null],[11,"count","","",291,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"last","","",291,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"nth","","",291,{"inputs":[{"name":"bytes"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next_back","","",291,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"len","","",291,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"clone","","",292,{"inputs":[{"name":"splitinternal"}],"output":{"name":"splitinternal"}}],[11,"next","","",293,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"clone","","",293,{"inputs":[{"name":"split"}],"output":{"name":"split"}}],[11,"next","","",294,{"inputs":[{"name":"rsplit"}],"output":{"name":"option"}}],[11,"clone","","",294,{"inputs":[{"name":"rsplit"}],"output":{"name":"rsplit"}}],[11,"next_back","","",293,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"next_back","","",294,{"inputs":[{"name":"rsplit"}],"output":{"name":"option"}}],[11,"next","","",295,{"inputs":[{"name":"splitterminator"}],"output":{"name":"option"}}],[11,"clone","","",295,{"inputs":[{"name":"splitterminator"}],"output":{"name":"splitterminator"}}],[11,"next","","",296,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"option"}}],[11,"clone","","",296,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"rsplitterminator"}}],[11,"next_back","","",295,{"inputs":[{"name":"splitterminator"}],"output":{"name":"option"}}],[11,"next_back","","",296,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"option"}}],[11,"clone","","",297,{"inputs":[{"name":"splitninternal"}],"output":{"name":"splitninternal"}}],[11,"next","","",298,{"inputs":[{"name":"splitn"}],"output":{"name":"option"}}],[11,"clone","","",298,{"inputs":[{"name":"splitn"}],"output":{"name":"splitn"}}],[11,"next","","",299,{"inputs":[{"name":"rsplitn"}],"output":{"name":"option"}}],[11,"clone","","",299,{"inputs":[{"name":"rsplitn"}],"output":{"name":"rsplitn"}}],[11,"clone","","",300,{"inputs":[{"name":"matchindicesinternal"}],"output":{"name":"matchindicesinternal"}}],[11,"next","","",301,{"inputs":[{"name":"matchindices"}],"output":{"name":"option"}}],[11,"clone","","",301,{"inputs":[{"name":"matchindices"}],"output":{"name":"matchindices"}}],[11,"next","","",302,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"option"}}],[11,"clone","","",302,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"rmatchindices"}}],[11,"next_back","","",301,{"inputs":[{"name":"matchindices"}],"output":{"name":"option"}}],[11,"next_back","","",302,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"option"}}],[11,"clone","","",303,{"inputs":[{"name":"matchesinternal"}],"output":{"name":"matchesinternal"}}],[11,"next","","",304,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"clone","","",304,{"inputs":[{"name":"matches"}],"output":{"name":"matches"}}],[11,"next","","",305,{"inputs":[{"name":"rmatches"}],"output":{"name":"option"}}],[11,"clone","","",305,{"inputs":[{"name":"rmatches"}],"output":{"name":"rmatches"}}],[11,"next_back","","",304,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"next_back","","",305,{"inputs":[{"name":"rmatches"}],"output":{"name":"option"}}],[11,"clone","","",306,{"inputs":[{"name":"lines"}],"output":{"name":"lines"}}],[11,"next","","",306,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"size_hint","","",306,null],[11,"next_back","","",306,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"clone","","",307,{"inputs":[{"name":"linesany"}],"output":{"name":"linesany"}}],[11,"clone","","",308,{"inputs":[{"name":"linesanymap"}],"output":{"name":"linesanymap"}}],[11,"call","","",308,null],[11,"call_mut","","",308,null],[11,"call_once","","",308,null],[11,"next","","",307,{"inputs":[{"name":"linesany"}],"output":{"name":"option"}}],[11,"size_hint","","",307,null],[11,"next_back","","",307,{"inputs":[{"name":"linesany"}],"output":{"name":"option"}}],[11,"clone","","",309,{"inputs":[{"name":"charrange"}],"output":{"name":"charrange"}}],[11,"new","core::hash::sip","Creates a new `SipHasher` with the two initial keys set to 0.",310,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",310,{"inputs":[{"name":"siphasher"},{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"write","","",310,null],[11,"finish","","",310,{"inputs":[{"name":"siphasher"}],"output":{"name":"u64"}}],[11,"clone","","",310,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"default","","",310,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"eq","core::fmt::num","",311,{"inputs":[{"name":"binary"},{"name":"binary"}],"output":{"name":"bool"}}],[11,"ne","","",311,{"inputs":[{"name":"binary"},{"name":"binary"}],"output":{"name":"bool"}}],[11,"clone","","",311,{"inputs":[{"name":"binary"}],"output":{"name":"binary"}}],[11,"eq","","",312,{"inputs":[{"name":"octal"},{"name":"octal"}],"output":{"name":"bool"}}],[11,"ne","","",312,{"inputs":[{"name":"octal"},{"name":"octal"}],"output":{"name":"bool"}}],[11,"clone","","",312,{"inputs":[{"name":"octal"}],"output":{"name":"octal"}}],[11,"eq","","",313,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"ne","","",313,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"clone","","",313,{"inputs":[{"name":"decimal"}],"output":{"name":"decimal"}}],[11,"eq","","",314,{"inputs":[{"name":"lowerhex"},{"name":"lowerhex"}],"output":{"name":"bool"}}],[11,"ne","","",314,{"inputs":[{"name":"lowerhex"},{"name":"lowerhex"}],"output":{"name":"bool"}}],[11,"clone","","",314,{"inputs":[{"name":"lowerhex"}],"output":{"name":"lowerhex"}}],[11,"eq","","",315,{"inputs":[{"name":"upperhex"},{"name":"upperhex"}],"output":{"name":"bool"}}],[11,"ne","","",315,{"inputs":[{"name":"upperhex"},{"name":"upperhex"}],"output":{"name":"bool"}}],[11,"clone","","",315,{"inputs":[{"name":"upperhex"}],"output":{"name":"upperhex"}}],[11,"eq","","",316,{"inputs":[{"name":"radix"},{"name":"radix"}],"output":{"name":"bool"}}],[11,"ne","","",316,{"inputs":[{"name":"radix"},{"name":"radix"}],"output":{"name":"bool"}}],[11,"clone","","",316,{"inputs":[{"name":"radix"}],"output":{"name":"radix"}}],[11,"clone","","",317,{"inputs":[{"name":"radixfmt"}],"output":{"name":"radixfmt"}}],[11,"fmt","","",317,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",317,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",317,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",317,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",317,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",317,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",317,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",317,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",317,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",317,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",317,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",317,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",317,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",317,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",317,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",317,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",317,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",317,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",317,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",317,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write_str","core::fmt::builders","",318,{"inputs":[{"name":"padadapter"},{"name":"str"}],"output":{"name":"result"}}],[11,"field","","Adds a new field to the generated struct output.",319,{"inputs":[{"name":"debugstruct"},{"name":"str"},{"name":"debug"}],"output":{"name":"debugstruct"}}],[11,"finish","","Finishes output and returns any error encountered.",319,{"inputs":[{"name":"debugstruct"}],"output":{"name":"result"}}],[11,"field","","Adds a new field to the generated tuple struct output.",320,{"inputs":[{"name":"debugtuple"},{"name":"debug"}],"output":{"name":"debugtuple"}}],[11,"finish","","Finishes output and returns any error encountered.",320,{"inputs":[{"name":"debugtuple"}],"output":{"name":"result"}}],[11,"formatter","","Returns the wrapped `Formatter`.",320,{"inputs":[{"name":"debugtuple"}],"output":{"name":"formatter"}}],[11,"finish","","",321,null],[11,"entry","","Adds a new entry to the set output.",322,{"inputs":[{"name":"debugset"},{"name":"debug"}],"output":{"name":"debugset"}}],[11,"entries","","Adds the contents of an iterator of entries to the set output.",322,{"inputs":[{"name":"debugset"},{"name":"i"}],"output":{"name":"debugset"}}],[11,"finish","","Finishes output and returns any error encountered.",322,{"inputs":[{"name":"debugset"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the list output.",323,{"inputs":[{"name":"debuglist"},{"name":"debug"}],"output":{"name":"debuglist"}}],[11,"entries","","Adds the contents of an iterator of entries to the list output.",323,{"inputs":[{"name":"debuglist"},{"name":"i"}],"output":{"name":"debuglist"}}],[11,"finish","","Finishes output and returns any error encountered.",323,{"inputs":[{"name":"debuglist"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the map output.",324,{"inputs":[{"name":"debugmap"},{"name":"debug"},{"name":"debug"}],"output":{"name":"debugmap"}}],[11,"entries","","Adds the contents of an iterator of entries to the map output.",324,{"inputs":[{"name":"debugmap"},{"name":"i"}],"output":{"name":"debugmap"}}],[11,"finish","","Finishes output and returns any error encountered.",324,{"inputs":[{"name":"debugmap"}],"output":{"name":"result"}}],[11,"fmt","core::fmt","",325,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",325,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"clone","","",326,{"inputs":[{"name":"argumentv1"}],"output":{"name":"argumentv1"}}],[11,"clone","","",327,{"inputs":[{"name":"flagv1"}],"output":{"name":"flagv1"}}],[11,"clone","","",328,{"inputs":[{"name":"arguments"}],"output":{"name":"arguments"}}],[11,"fmt","","",328,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",328,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"pad_integral","","Performs the correct padding for an integer which has already been\nemitted into a str. The str should *not* contain the sign for the\ninteger, that will be added by this method.",329,{"inputs":[{"name":"formatter"},{"name":"bool"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",329,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_str","","Writes some data to the underlying buffer contained within this\nformatter.",329,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_fmt","","Writes some formatted information into this instance",329,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"flags","","Flags for formatting (packed version of rt::Flag)",329,{"inputs":[{"name":"formatter"}],"output":{"name":"u32"}}],[11,"fill","","Character used as 'fill' whenever there is alignment",329,{"inputs":[{"name":"formatter"}],"output":{"name":"char"}}],[11,"align","","Flag indicating what form of alignment was requested",329,{"inputs":[{"name":"formatter"}],"output":{"name":"alignment"}}],[11,"width","","Optionally specified integer width that the output should be",329,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"precision","","Optionally specified precision for numeric types",329,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"sign_plus","","Determines if the `+` flag was specified.",329,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"sign_minus","","Determines if the `-` flag was specified.",329,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"alternate","","Determines if the `#` flag was specified.",329,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",329,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"debug_struct","","Creates a `DebugStruct` builder designed to assist with creation of\n`fmt::Debug` implementations for structs.",329,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugstruct"}}],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of\n`fmt::Debug` implementations for tuple structs.",329,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugtuple"}}],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of\n`fmt::Debug` implementations for list-like structures.",329,{"inputs":[{"name":"formatter"}],"output":{"name":"debuglist"}}],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of\n`fmt::Debug` implementations for set-like structures.",329,{"inputs":[{"name":"formatter"}],"output":{"name":"debugset"}}],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of\n`fmt::Debug` implementations for map-like structures.",329,{"inputs":[{"name":"formatter"}],"output":{"name":"debugmap"}}],[11,"write_str","","",329,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",329,{"inputs":[{"name":"formatter"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_fmt","","",329,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"fmt","","",325,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::marker","",209,{"inputs":[{"name":"phantomdata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::cell","",219,{"inputs":[{"name":"cell"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",221,{"inputs":[{"name":"refcell"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",223,{"inputs":[{"name":"ref"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",224,{"inputs":[{"name":"refmut"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","hyper::header","",45,{"inputs":[{"name":"charset"},{"name":"charset"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"charset"},{"name":"charset"}],"output":{"name":"bool"}}],[11,"fmt","","",45,{"inputs":[{"name":"charset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",45,{"inputs":[{"name":"charset"}],"output":{"name":"charset"}}],[11,"fmt","","",45,{"inputs":[{"name":"charset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",45,{"inputs":[{"name":"charset"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",46,{"inputs":[{"name":"encoding"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",46,{"inputs":[{"name":"encoding"},{"name":"encoding"}],"output":{"name":"bool"}}],[11,"ne","","",46,{"inputs":[{"name":"encoding"},{"name":"encoding"}],"output":{"name":"bool"}}],[11,"clone","","",46,{"inputs":[{"name":"encoding"}],"output":{"name":"encoding"}}],[11,"fmt","","",46,{"inputs":[{"name":"encoding"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",46,{"inputs":[{"name":"encoding"},{"name":"str"}],"output":{"name":"result"}}],[11,"eq","","",37,{"inputs":[{"name":"entitytag"},{"name":"entitytag"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"entitytag"},{"name":"entitytag"}],"output":{"name":"bool"}}],[11,"fmt","","",37,{"inputs":[{"name":"entitytag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",37,{"inputs":[{"name":"entitytag"}],"output":{"name":"entitytag"}}],[11,"new","","Constructs a new EntityTag.\n# Panics\nIf the tag contains invalid characters.",37,{"inputs":[{"name":"entitytag"},{"name":"bool"},{"name":"string"}],"output":{"name":"entitytag"}}],[11,"weak","","Constructs a new weak EntityTag.\n# Panics\nIf the tag contains invalid characters.",37,{"inputs":[{"name":"entitytag"},{"name":"string"}],"output":{"name":"entitytag"}}],[11,"strong","","Constructs a new strong EntityTag.\n# Panics\nIf the tag contains invalid characters.",37,{"inputs":[{"name":"entitytag"},{"name":"string"}],"output":{"name":"entitytag"}}],[11,"tag","","Get the tag.",37,{"inputs":[{"name":"entitytag"}],"output":{"name":"str"}}],[11,"set_tag","","Set the tag.\n# Panics\nIf the tag contains invalid characters.",37,{"inputs":[{"name":"entitytag"},{"name":"string"}],"output":null}],[11,"strong_eq","","For strong comparison two entity-tags are equivalent if both are not weak and their\nopaque-tags match character-by-character.",37,{"inputs":[{"name":"entitytag"},{"name":"entitytag"}],"output":{"name":"bool"}}],[11,"weak_eq","","For weak comparison two entity-tags are equivalent if their\nopaque-tags match character-by-character, regardless of either or\nboth being tagged as \"weak\".",37,{"inputs":[{"name":"entitytag"},{"name":"entitytag"}],"output":{"name":"bool"}}],[11,"strong_ne","","The inverse of `EntityTag.strong_eq()`.",37,{"inputs":[{"name":"entitytag"},{"name":"entitytag"}],"output":{"name":"bool"}}],[11,"weak_ne","","The inverse of `EntityTag.weak_eq()`.",37,{"inputs":[{"name":"entitytag"},{"name":"entitytag"}],"output":{"name":"bool"}}],[11,"fmt","","",37,{"inputs":[{"name":"entitytag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",37,{"inputs":[{"name":"entitytag"},{"name":"str"}],"output":{"name":"result"}}],[11,"cmp","","",330,{"inputs":[{"name":"httpdate"},{"name":"httpdate"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",330,{"inputs":[{"name":"httpdate"},{"name":"httpdate"}],"output":{"name":"option"}}],[11,"lt","","",330,{"inputs":[{"name":"httpdate"},{"name":"httpdate"}],"output":{"name":"bool"}}],[11,"le","","",330,{"inputs":[{"name":"httpdate"},{"name":"httpdate"}],"output":{"name":"bool"}}],[11,"gt","","",330,{"inputs":[{"name":"httpdate"},{"name":"httpdate"}],"output":{"name":"bool"}}],[11,"ge","","",330,{"inputs":[{"name":"httpdate"},{"name":"httpdate"}],"output":{"name":"bool"}}],[11,"eq","","",330,{"inputs":[{"name":"httpdate"},{"name":"httpdate"}],"output":{"name":"bool"}}],[11,"ne","","",330,{"inputs":[{"name":"httpdate"},{"name":"httpdate"}],"output":{"name":"bool"}}],[11,"fmt","","",330,{"inputs":[{"name":"httpdate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",330,{"inputs":[{"name":"httpdate"}],"output":{"name":"httpdate"}}],[11,"from_str","","",330,{"inputs":[{"name":"httpdate"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",330,{"inputs":[{"name":"httpdate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",331,{"inputs":[{"name":"quality"},{"name":"quality"}],"output":{"name":"option"}}],[11,"lt","","",331,{"inputs":[{"name":"quality"},{"name":"quality"}],"output":{"name":"bool"}}],[11,"le","","",331,{"inputs":[{"name":"quality"},{"name":"quality"}],"output":{"name":"bool"}}],[11,"gt","","",331,{"inputs":[{"name":"quality"},{"name":"quality"}],"output":{"name":"bool"}}],[11,"ge","","",331,{"inputs":[{"name":"quality"},{"name":"quality"}],"output":{"name":"bool"}}],[11,"eq","","",331,{"inputs":[{"name":"quality"},{"name":"quality"}],"output":{"name":"bool"}}],[11,"ne","","",331,{"inputs":[{"name":"quality"},{"name":"quality"}],"output":{"name":"bool"}}],[11,"cmp","","",331,{"inputs":[{"name":"quality"},{"name":"quality"}],"output":{"name":"ordering"}}],[11,"fmt","","",331,{"inputs":[{"name":"quality"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",331,{"inputs":[{"name":"quality"}],"output":{"name":"quality"}}],[11,"fmt","","",331,{"inputs":[{"name":"quality"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",331,{"inputs":[{"name":"quality"}],"output":{"name":"quality"}}],[11,"fmt","","",38,{"inputs":[{"name":"qualityitem"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",38,{"inputs":[{"name":"qualityitem"},{"name":"qualityitem"}],"output":{"name":"bool"}}],[11,"ne","","",38,{"inputs":[{"name":"qualityitem"},{"name":"qualityitem"}],"output":{"name":"bool"}}],[11,"clone","","",38,{"inputs":[{"name":"qualityitem"}],"output":{"name":"qualityitem"}}],[11,"new","","Creates a new `QualityItem` from an item and a quality.\nThe item can be of any type.\nThe quality should be a value in the range [0, 1].",38,{"inputs":[{"name":"qualityitem"},{"name":"t"},{"name":"quality"}],"output":{"name":"qualityitem"}}],[11,"partial_cmp","","",38,{"inputs":[{"name":"qualityitem"},{"name":"qualityitem"}],"output":{"name":"option"}}],[11,"fmt","","",38,{"inputs":[{"name":"qualityitem"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",38,{"inputs":[{"name":"qualityitem"},{"name":"str"}],"output":{"name":"result"}}],[0,"parsing","","Utility functions for Header implementations.",null,null],[3,"ExtendedValue","hyper::header::parsing","An extended header parameter value (i.e., tagged with a character set and optionally,\na language), as defined in [RFC 5987](https://tools.ietf.org/html/rfc5987#section-3.2).",null,null],[12,"charset","","The character set that is used to encode the `value` to a string.",332,null],[12,"language_tag","","The human language details of the `value`, if available.",332,null],[12,"value","","The parameter value, as expressed in octets.",332,null],[5,"from_one_raw_str","","Reads a single raw string when parsing a header.",null,null],[5,"from_raw_str","","Reads a raw string into a value.",null,null],[5,"from_comma_delimited","","Reads a comma-delimited raw header into a Vec.",null,null],[5,"from_one_comma_delimited","","Reads a comma-delimited raw string into a Vec.",null,null],[5,"fmt_comma_delimited","","Format an array into a comma-delimited string.",null,null],[5,"parse_extended_value","","Parses extended header parameter values (`ext-value`), as defined in\n[RFC 5987](https://tools.ietf.org/html/rfc5987#section-3.2).",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"eq","","",332,{"inputs":[{"name":"extendedvalue"},{"name":"extendedvalue"}],"output":{"name":"bool"}}],[11,"ne","","",332,{"inputs":[{"name":"extendedvalue"},{"name":"extendedvalue"}],"output":{"name":"bool"}}],[11,"fmt","","",332,{"inputs":[{"name":"extendedvalue"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",332,{"inputs":[{"name":"extendedvalue"}],"output":{"name":"extendedvalue"}}],[11,"fmt","","",332,{"inputs":[{"name":"extendedvalue"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Scheme","hyper::header","An Authorization scheme to be used in the header.",null,null],[10,"scheme","","An optional Scheme name.",333,{"inputs":[{"name":"scheme"}],"output":{"name":"option"}}],[10,"fmt_scheme","","Format the Scheme data into a header value.",333,{"inputs":[{"name":"scheme"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Header","","A trait for any object that will represent a header field and value.",null,null],[10,"header_name","","Returns the name of the header field this belongs to.",334,{"inputs":[{"name":"header"}],"output":{"name":"str"}}],[10,"parse_header","","Parse a header from a raw stream of bytes.",334,null],[8,"HeaderFormat","","A trait for any object that will represent a header field and value.",null,null],[10,"fmt_header","","Format a header to be output into a TcpStream.",335,{"inputs":[{"name":"headerformat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","alloc::boxed","",146,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"clone","hyper::header","",336,{"inputs":[{"name":"headers"}],"output":{"name":"headers"}}],[11,"new","","Creates a new, empty headers map.",336,{"inputs":[{"name":"headers"}],"output":{"name":"headers"}}],[11,"set","","Set a header field to the corresponding value.",336,{"inputs":[{"name":"headers"},{"name":"h"}],"output":null}],[11,"get_raw","","Access the raw value of a header.",336,{"inputs":[{"name":"headers"},{"name":"str"}],"output":{"name":"option"}}],[11,"set_raw","","Set the raw value of a header, bypassing any typed headers.",336,{"inputs":[{"name":"headers"},{"name":"k"},{"name":"vec"}],"output":null}],[11,"remove_raw","","Remove a header set by set_raw",336,{"inputs":[{"name":"headers"},{"name":"str"}],"output":null}],[11,"get","","Get a reference to the header field's value, if it exists.",336,{"inputs":[{"name":"headers"}],"output":{"name":"option"}}],[11,"get_mut","","Get a mutable reference to the header field's value, if it exists.",336,{"inputs":[{"name":"headers"}],"output":{"name":"option"}}],[11,"has","","Returns a boolean of whether a certain header is in the map.",336,{"inputs":[{"name":"headers"}],"output":{"name":"bool"}}],[11,"remove","","Removes a header from the map, if one existed.\nReturns true if a header has been removed.",336,{"inputs":[{"name":"headers"}],"output":{"name":"bool"}}],[11,"iter","","Returns an iterator over the header fields.",336,{"inputs":[{"name":"headers"}],"output":{"name":"headersitems"}}],[11,"len","","Returns the number of headers in the map.",336,{"inputs":[{"name":"headers"}],"output":{"name":"usize"}}],[11,"clear","","Remove all headers from the map.",336,{"inputs":[{"name":"headers"}],"output":null}],[11,"eq","","",336,{"inputs":[{"name":"headers"},{"name":"headers"}],"output":{"name":"bool"}}],[11,"fmt","","",336,{"inputs":[{"name":"headers"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",336,{"inputs":[{"name":"headers"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",337,{"inputs":[{"name":"headersitems"}],"output":{"name":"option"}}],[11,"is","","Check if a HeaderView is a certain Header.",338,{"inputs":[{"name":"headerview"}],"output":{"name":"bool"}}],[11,"name","","Get the Header name as a slice.",338,{"inputs":[{"name":"headerview"}],"output":{"name":"str"}}],[11,"value","","Cast the value to a certain Header type.",338,{"inputs":[{"name":"headerview"}],"output":{"name":"option"}}],[11,"value_string","","Get just the header value as a String.",338,{"inputs":[{"name":"headerview"}],"output":{"name":"string"}}],[11,"fmt","","",338,{"inputs":[{"name":"headerview"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",338,{"inputs":[{"name":"headerview"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"extend","","",336,{"inputs":[{"name":"headers"},{"name":"i"}],"output":null}],[11,"from_iter","","",336,{"inputs":[{"name":"headers"},{"name":"i"}],"output":{"name":"headers"}}],[11,"fmt","","",339,{"inputs":[{"name":"headerformatter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",339,{"inputs":[{"name":"headerformatter"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"http","hyper","Pieces pertaining to the HTTP message protocol.",null,null],[3,"RawStatus","hyper::http","The raw status code and reason-phrase.",null,null],[5,"should_keep_alive","","Checks if a connection should be kept alive.",null,{"inputs":[{"name":"httpversion"},{"name":"headers"}],"output":{"name":"bool"}}],[0,"h1","","Adapts the HTTP/1.1 implementation into the `HttpMessage` API.",null,null],[3,"Http11Message","hyper::http::h1","An implementation of the `HttpMessage` trait for HTTP/1.1.",null,null],[3,"Http11Protocol","","The `Protocol` implementation provides HTTP/1.1 messages.",null,null],[3,"EndError","","",null,null],[3,"Incoming","","An Incoming Message head. Includes request/status line, and headers.",null,null],[12,"version","","HTTP version of the message.",340,null],[12,"subject","","Subject (request line or status line) of Incoming message.",340,null],[12,"headers","","Headers of the Incoming message.",340,null],[4,"HttpReader","","Readers to handle different Transfer-Encodings.",null,null],[13,"SizedReader","","A Reader used when a Content-Length header is passed with a positive integer.",341,null],[13,"ChunkedReader","","A Reader used when Transfer-Encoding is `chunked`.",341,null],[13,"EofReader","","A Reader used for responses that don't indicate a length or chunked.",341,null],[13,"EmptyReader","","A Reader used for messages that should never have a body.",341,null],[4,"HttpWriter","","Writers to handle different Transfer-Encodings.",null,null],[13,"ThroughWriter","","A no-op Writer, used initially before Transfer-Encoding is determined.",342,null],[13,"ChunkedWriter","","A Writer for when Transfer-Encoding includes `chunked`.",342,null],[13,"SizedWriter","","A Writer for when Content-Length is set.",342,null],[13,"EmptyWriter","","A writer that should not write any body.",342,null],[5,"parse_request","","Parses a request into an Incoming message head.",null,{"inputs":[{"name":"bufreader"}],"output":{"name":"result"}}],[5,"parse_response","","Parses a response into an Incoming message head.",null,{"inputs":[{"name":"bufreader"}],"output":{"name":"result"}}],[17,"CR","","The `\\r` byte.",null,null],[17,"LF","","The `\\n` byte.",null,null],[17,"LINE_ENDING","","The bytes `\\r\\n`.",null,null],[11,"fmt","","",343,{"inputs":[{"name":"http11message"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write","","",343,null],[11,"flush","","",343,{"inputs":[{"name":"http11message"}],"output":{"name":"result"}}],[11,"read","","",343,null],[11,"set_outgoing","","",343,{"inputs":[{"name":"http11message"},{"name":"requesthead"}],"output":{"name":"result"}}],[11,"get_incoming","","",343,{"inputs":[{"name":"http11message"}],"output":{"name":"result"}}],[11,"has_body","","",343,{"inputs":[{"name":"http11message"}],"output":{"name":"bool"}}],[11,"set_read_timeout","","",343,{"inputs":[{"name":"http11message"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_write_timeout","","",343,{"inputs":[{"name":"http11message"},{"name":"option"}],"output":{"name":"result"}}],[11,"close_connection","","",343,{"inputs":[{"name":"http11message"}],"output":{"name":"result"}}],[11,"into_inner","","Consumes the `Http11Message` and returns the underlying `NetworkStream`.",343,{"inputs":[{"name":"http11message"}],"output":{"name":"box"}}],[11,"get_ref","","Gets a mutable reference to the underlying `NetworkStream`, regardless of the state of the\n`Http11Message`.",343,{"inputs":[{"name":"http11message"}],"output":{"name":"networkstream"}}],[11,"get_mut","","Gets a mutable reference to the underlying `NetworkStream`, regardless of the state of the\n`Http11Message`.",343,{"inputs":[{"name":"http11message"}],"output":{"name":"networkstream"}}],[11,"with_stream","","Creates a new `Http11Message` that will use the given `NetworkStream` for communicating to\nthe peer.",343,{"inputs":[{"name":"http11message"},{"name":"box"}],"output":{"name":"http11message"}}],[11,"flush_outgoing","","Flushes the current outgoing content and moves the stream into the `stream` property.",343,{"inputs":[{"name":"http11message"}],"output":{"name":"result"}}],[11,"new_message","","",344,{"inputs":[{"name":"http11protocol"},{"name":"str"},{"name":"u16"},{"name":"str"}],"output":{"name":"result"}}],[11,"with_connector","","Creates a new `Http11Protocol` instance that will use the given `NetworkConnector` for\nestablishing HTTP connections.",344,{"inputs":[{"name":"http11protocol"},{"name":"c"}],"output":{"name":"http11protocol"}}],[11,"into_inner","","Unwraps this HttpReader and returns the underlying Reader.",341,{"inputs":[{"name":"httpreader"}],"output":{"name":"r"}}],[11,"get_ref","","Gets a borrowed reference to the underlying Reader.",341,{"inputs":[{"name":"httpreader"}],"output":{"name":"r"}}],[11,"get_mut","","Gets a mutable reference to the underlying Reader.",341,{"inputs":[{"name":"httpreader"}],"output":{"name":"r"}}],[11,"fmt","","",341,{"inputs":[{"name":"httpreader"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"read","","",341,null],[11,"into_inner","","Unwraps the HttpWriter and returns the underlying Writer.",342,{"inputs":[{"name":"httpwriter"}],"output":{"name":"w"}}],[11,"get_ref","","Access the inner Writer.",342,{"inputs":[{"name":"httpwriter"}],"output":{"name":"w"}}],[11,"get_mut","","Access the inner Writer mutably.",342,{"inputs":[{"name":"httpwriter"}],"output":{"name":"w"}}],[11,"end","","Ends the HttpWriter, and returns the underlying Writer.",342,{"inputs":[{"name":"httpwriter"}],"output":{"name":"result"}}],[11,"fmt","","",345,{"inputs":[{"name":"enderror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","std::io::error","",346,{"inputs":[{"name":"error"},{"name":"enderror"}],"output":{"name":"error"}}],[11,"write","hyper::http::h1","",342,null],[11,"flush","","",342,{"inputs":[{"name":"httpwriter"}],"output":{"name":"result"}}],[11,"fmt","","",342,{"inputs":[{"name":"httpwriter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",340,{"inputs":[{"name":"incoming"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"h2","hyper::http","Adapts the `solicit`-provided HTTP/2 implementation into the `HttpMessage` API.",null,null],[3,"Http2Protocol","hyper::http::h2","The `Protocol` implementation that provides HTTP/2 messages (i.e. `Http2Message`).",null,null],[3,"Http2Message","","An implementation of the `HttpMessage` trait for HTTP/2.",null,null],[5,"new_protocol","","A convenience method that creates a default `Http2Protocol` that uses a `net::HttpConnector`\n(which produces an `HttpStream` for the underlying transport layer).",null,{"inputs":[],"output":{"name":"http2protocol"}}],[8,"CloneableStream","","A trait alias representing all types that are both `NetworkStream` and `Clone`.",null,null],[11,"with_connector","","Create a new `Http2Protocol` that will use the given `NetworkConnector` to establish TCP\nconnections to the server.",347,{"inputs":[{"name":"http2protocol"},{"name":"c"}],"output":{"name":"http2protocol"}}],[11,"new_message","","",347,{"inputs":[{"name":"http2protocol"},{"name":"str"},{"name":"u16"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",348,{"inputs":[{"name":"http2message"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write","","",348,null],[11,"flush","","",348,{"inputs":[{"name":"http2message"}],"output":{"name":"result"}}],[11,"read","","",348,null],[11,"set_outgoing","","",348,{"inputs":[{"name":"http2message"},{"name":"requesthead"}],"output":{"name":"result"}}],[11,"get_incoming","","",348,{"inputs":[{"name":"http2message"}],"output":{"name":"result"}}],[11,"has_body","","",348,{"inputs":[{"name":"http2message"}],"output":{"name":"bool"}}],[11,"set_read_timeout","","",348,{"inputs":[{"name":"http2message"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_write_timeout","","",348,{"inputs":[{"name":"http2message"},{"name":"option"}],"output":{"name":"result"}}],[11,"close_connection","","",348,{"inputs":[{"name":"http2message"}],"output":{"name":"result"}}],[0,"message","hyper::http","Defines the `HttpMessage` trait that serves to encapsulate the operations of a single\nrequest-response cycle on any HTTP connection.",null,null],[3,"RequestHead","hyper::http::message","Describes a request.",null,null],[12,"headers","","The headers of the request",349,null],[12,"method","","The method of the request",349,null],[12,"url","","The URL of the request",349,null],[3,"ResponseHead","","Describes a response.",null,null],[12,"headers","","The headers of the reponse",350,null],[12,"raw_status","","The raw status line of the response",350,null],[12,"version","","The HTTP/2 version which generated the response",350,null],[8,"Protocol","","The trait provides an API for creating new `HttpMessage`s depending on the underlying HTTP\nprotocol.",null,null],[10,"new_message","","Creates a fresh `HttpMessage` bound to the given host, based on the given protocol scheme.",351,{"inputs":[{"name":"protocol"},{"name":"str"},{"name":"u16"},{"name":"str"}],"output":{"name":"result"}}],[8,"HttpMessage","","The trait provides an API for sending an receiving HTTP messages.",null,null],[10,"set_outgoing","","Initiates a new outgoing request.",352,{"inputs":[{"name":"httpmessage"},{"name":"requesthead"}],"output":{"name":"result"}}],[10,"get_incoming","","Obtains the incoming response and returns its head (i.e. the `ResponseHead` struct)",352,{"inputs":[{"name":"httpmessage"}],"output":{"name":"result"}}],[10,"set_read_timeout","","Set the read timeout duration for this message.",352,{"inputs":[{"name":"httpmessage"},{"name":"option"}],"output":{"name":"result"}}],[10,"set_write_timeout","","Set the write timeout duration for this message.",352,{"inputs":[{"name":"httpmessage"},{"name":"option"}],"output":{"name":"result"}}],[10,"close_connection","","Closes the underlying HTTP connection.",352,{"inputs":[{"name":"httpmessage"}],"output":{"name":"result"}}],[10,"has_body","","Returns whether the incoming message has a body.",352,{"inputs":[{"name":"httpmessage"}],"output":{"name":"bool"}}],[11,"fmt","","",349,{"inputs":[{"name":"requesthead"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",349,{"inputs":[{"name":"requesthead"}],"output":{"name":"requesthead"}}],[11,"fmt","","",350,{"inputs":[{"name":"responsehead"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",350,{"inputs":[{"name":"responsehead"}],"output":{"name":"responsehead"}}],[11,"is","hyper::http","Is the underlying type in this trait object a T?",352,{"inputs":[{"name":"httpmessage"}],"output":{"name":"bool"}}],[11,"downcast_ref","","If the underlying type is T, get a reference to the contained data.",352,{"inputs":[{"name":"httpmessage"}],"output":{"name":"option"}}],[11,"downcast_mut","","If the underlying type is T, get a mutable reference to the contained\ndata.",352,{"inputs":[{"name":"httpmessage"}],"output":{"name":"option"}}],[11,"downcast","","If the underlying type is T, extract it.",352,{"inputs":[{"name":"httpmessage"}],"output":{"name":"result"}}],[11,"fmt","","",353,{"inputs":[{"name":"rawstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",353,{"inputs":[{"name":"rawstatus"},{"name":"rawstatus"}],"output":{"name":"bool"}}],[11,"ne","","",353,{"inputs":[{"name":"rawstatus"},{"name":"rawstatus"}],"output":{"name":"bool"}}],[11,"clone","","",353,{"inputs":[{"name":"rawstatus"}],"output":{"name":"rawstatus"}}],[0,"net","hyper","A collection of traits abstracting over Listeners and Streams.",null,null],[3,"NetworkConnections","hyper::net","An iterator wrapper over a NetworkAcceptor.",null,null],[3,"HttpListener","","A `NetworkListener` for `HttpStream`s.",null,null],[3,"HttpStream","","A wrapper around a TcpStream.",null,null],[3,"HttpConnector","","A connector that will produce HttpStreams.",null,null],[3,"HttpsListener","","A Http Listener over SSL.",null,null],[3,"HttpsConnector","","A connector that can protect HTTP streams using SSL.",null,null],[4,"Fresh","","The write-status indicating headers have not been written.",null,null],[4,"Streaming","","The write-status indicating headers have been written.",null,null],[4,"HttpsStream","","A stream over the HTTP protocol, possibly protected by SSL.",null,null],[13,"Http","","A plain text stream.",354,null],[13,"Https","","A stream protected by SSL.",354,null],[8,"NetworkListener","","An abstraction to listen for connections on a certain port.",null,null],[16,"Stream","","The stream produced for each connection.",355,null],[10,"accept","","Returns an iterator of streams.",355,{"inputs":[{"name":"networklistener"}],"output":{"name":"result"}}],[10,"local_addr","","Get the address this Listener ended up listening on.",355,{"inputs":[{"name":"networklistener"}],"output":{"name":"result"}}],[11,"incoming","","Returns an iterator over incoming connections.",355,{"inputs":[{"name":"networklistener"}],"output":{"name":"networkconnections"}}],[8,"NetworkStream","","An abstraction over streams that a Server can utilize.",null,null],[10,"peer_addr","","Get the remote address of the underlying connection.",356,{"inputs":[{"name":"networkstream"}],"output":{"name":"result"}}],[10,"set_read_timeout","","Set the maximum time to wait for a read to complete.",356,{"inputs":[{"name":"networkstream"},{"name":"option"}],"output":{"name":"result"}}],[10,"set_write_timeout","","Set the maximum time to wait for a write to complete.",356,{"inputs":[{"name":"networkstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"close","","This will be called when Stream should no longer be kept alive.",356,{"inputs":[{"name":"networkstream"},{"name":"shutdown"}],"output":{"name":"result"}}],[8,"NetworkConnector","","A connector creates a NetworkStream.",null,null],[16,"Stream","","Type of Stream to create",357,null],[10,"connect","","Connect to a remote address.",357,{"inputs":[{"name":"networkconnector"},{"name":"str"},{"name":"u16"},{"name":"str"}],"output":{"name":"result"}}],[8,"Ssl","","An abstraction to allow any SSL implementation to be used with HttpsStreams.",null,null],[16,"Stream","","The protected stream.",358,null],[10,"wrap_client","","Wrap a client stream with SSL.",358,{"inputs":[{"name":"ssl"},{"name":"httpstream"},{"name":"str"}],"output":{"name":"result"}}],[10,"wrap_server","","Wrap a server stream with SSL.",358,{"inputs":[{"name":"ssl"},{"name":"httpstream"}],"output":{"name":"result"}}],[11,"next","","",359,{"inputs":[{"name":"networkconnections"}],"output":{"name":"option"}}],[11,"from","alloc::boxed","",146,{"inputs":[{"name":"box"},{"name":"t"}],"output":{"name":"box"}}],[11,"fmt","","",146,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is","hyper","Is the underlying type in this trait object a T?",356,{"inputs":[{"name":"networkstream"}],"output":{"name":"bool"}}],[11,"downcast_ref","","If the underlying type is T, get a reference to the contained data.",356,{"inputs":[{"name":"networkstream"}],"output":{"name":"option"}}],[11,"downcast_mut","","If the underlying type is T, get a mutable reference to the contained\ndata.",356,{"inputs":[{"name":"networkstream"}],"output":{"name":"option"}}],[11,"downcast","","If the underlying type is T, extract it.",356,{"inputs":[{"name":"networkstream"}],"output":{"name":"result"}}],[11,"is","","Is the underlying type in this trait object a T?",356,{"inputs":[{"name":"networkstream"}],"output":{"name":"bool"}}],[11,"downcast_ref","","If the underlying type is T, get a reference to the contained data.",356,{"inputs":[{"name":"networkstream"}],"output":{"name":"option"}}],[11,"downcast_mut","","If the underlying type is T, get a mutable reference to the contained\ndata.",356,{"inputs":[{"name":"networkstream"}],"output":{"name":"option"}}],[11,"downcast","","If the underlying type is T, extract it.",356,{"inputs":[{"name":"networkstream"}],"output":{"name":"result"}}],[11,"clone","hyper::net","",360,{"inputs":[{"name":"httplistener"}],"output":{"name":"httplistener"}}],[11,"from","","",360,{"inputs":[{"name":"httplistener"},{"name":"tcplistener"}],"output":{"name":"httplistener"}}],[11,"new","","Start listening to an address over HTTP.",360,{"inputs":[{"name":"httplistener"},{"name":"to"}],"output":{"name":"result"}}],[11,"accept","","",360,{"inputs":[{"name":"httplistener"}],"output":{"name":"result"}}],[11,"local_addr","","",360,{"inputs":[{"name":"httplistener"}],"output":{"name":"result"}}],[11,"as_raw_fd","","",360,{"inputs":[{"name":"httplistener"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",360,{"inputs":[{"name":"httplistener"},{"name":"rawfd"}],"output":{"name":"httplistener"}}],[11,"clone","","",361,{"inputs":[{"name":"httpstream"}],"output":{"name":"httpstream"}}],[11,"fmt","","",361,{"inputs":[{"name":"httpstream"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"read","","",361,null],[11,"write","","",361,null],[11,"flush","","",361,{"inputs":[{"name":"httpstream"}],"output":{"name":"result"}}],[11,"as_raw_fd","","",361,{"inputs":[{"name":"httpstream"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",361,{"inputs":[{"name":"httpstream"},{"name":"rawfd"}],"output":{"name":"httpstream"}}],[11,"peer_addr","","",361,{"inputs":[{"name":"httpstream"}],"output":{"name":"result"}}],[11,"set_read_timeout","","",361,{"inputs":[{"name":"httpstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_write_timeout","","",361,{"inputs":[{"name":"httpstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"close","","",361,{"inputs":[{"name":"httpstream"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"default","","",362,{"inputs":[{"name":"httpconnector"}],"output":{"name":"httpconnector"}}],[11,"clone","","",362,{"inputs":[{"name":"httpconnector"}],"output":{"name":"httpconnector"}}],[11,"fmt","","",362,{"inputs":[{"name":"httpconnector"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"connect","","",362,{"inputs":[{"name":"httpconnector"},{"name":"str"},{"name":"u16"},{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",354,{"inputs":[{"name":"httpsstream"}],"output":{"name":"httpsstream"}}],[11,"fmt","","",354,{"inputs":[{"name":"httpsstream"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"read","","",354,null],[11,"write","","",354,null],[11,"flush","","",354,{"inputs":[{"name":"httpsstream"}],"output":{"name":"result"}}],[11,"peer_addr","","",354,{"inputs":[{"name":"httpsstream"}],"output":{"name":"result"}}],[11,"set_read_timeout","","",354,{"inputs":[{"name":"httpsstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_write_timeout","","",354,{"inputs":[{"name":"httpsstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"close","","",354,{"inputs":[{"name":"httpsstream"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"clone","","",363,{"inputs":[{"name":"httpslistener"}],"output":{"name":"httpslistener"}}],[11,"new","","Start listening to an address over HTTPS.",363,{"inputs":[{"name":"httpslistener"},{"name":"to"},{"name":"s"}],"output":{"name":"result"}}],[11,"with_listener","","Construct an HttpsListener from a bound `TcpListener`.",363,{"inputs":[{"name":"httpslistener"},{"name":"httplistener"},{"name":"s"}],"output":{"name":"httpslistener"}}],[11,"accept","","",363,{"inputs":[{"name":"httpslistener"}],"output":{"name":"result"}}],[11,"local_addr","","",363,{"inputs":[{"name":"httpslistener"}],"output":{"name":"result"}}],[11,"default","","",364,{"inputs":[{"name":"httpsconnector"}],"output":{"name":"httpsconnector"}}],[11,"fmt","","",364,{"inputs":[{"name":"httpsconnector"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new connector using the provided SSL implementation.",364,{"inputs":[{"name":"httpsconnector"},{"name":"s"}],"output":{"name":"httpsconnector"}}],[11,"connect","","",364,{"inputs":[{"name":"httpsconnector"},{"name":"str"},{"name":"u16"},{"name":"str"}],"output":{"name":"result"}}],[0,"server","hyper","HTTP Server",null,null],[3,"Server","hyper::server","A server can listen on a TCP socket.",null,null],[3,"Listening","","A listening server, which can later be closed.",null,null],[12,"socket","","The socket addresses that the server is bound to.",365,null],[0,"request","","Server Requests",null,null],[3,"Request","hyper::server::request","A request bundles several parts of an incoming `NetworkStream`, given to a `Handler`.",null,null],[12,"remote_addr","","The IP address of the remote connection.",366,null],[12,"method","","The `Method`, such as `Get`, `Post`, etc.",366,null],[12,"headers","","The headers of the incoming request.",366,null],[12,"uri","","The target request-uri for this request.",366,null],[12,"version","","The version of HTTP for this request.",366,null],[11,"new","","Create a new Request, reading the StartLine and Headers so they are\nimmediately useful.",366,{"inputs":[{"name":"request"},{"name":"bufreader"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"set_read_timeout","","Set the read timeout of the underlying NetworkStream.",366,{"inputs":[{"name":"request"},{"name":"option"}],"output":{"name":"result"}}],[11,"downcast_ref","","Get a reference to the underlying `NetworkStream`.",366,{"inputs":[{"name":"request"}],"output":{"name":"option"}}],[11,"ssl","","Get a reference to the underlying Ssl stream, if connected\nover HTTPS.",366,{"inputs":[{"name":"request"}],"output":{"name":"option"}}],[11,"deconstruct","","Deconstruct a Request into its constituent parts.",366,null],[11,"read","","",366,null],[0,"response","hyper::server","Server Responses",null,null],[3,"Response","hyper::server::response","The outgoing half for a Tcp connection, created by a `Server` and given to a `Handler`.",null,null],[12,"version","","The HTTP version of this response.",367,null],[11,"fmt","","",367,{"inputs":[{"name":"response"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"status","","The status of this response.",367,{"inputs":[{"name":"response"}],"output":{"name":"statuscode"}}],[11,"headers","","The headers of this response.",367,{"inputs":[{"name":"response"}],"output":{"name":"headers"}}],[11,"construct","","Construct a Response from its constituent parts.",367,{"inputs":[{"name":"response"},{"name":"httpversion"},{"name":"httpwriter"},{"name":"statuscode"},{"name":"headers"}],"output":{"name":"response"}}],[11,"deconstruct","","Deconstruct this Response into its constituent parts.",367,null],[11,"new","","Creates a new Response that can be used to write to a network stream.",367,{"inputs":[{"name":"response"},{"name":"write"},{"name":"headers"}],"output":{"name":"response"}}],[11,"send","","Writes the body and ends the response.",367,null],[11,"start","","Consume this Response<Fresh>, writing the Headers and Status and\ncreating a Response<Streaming>",367,{"inputs":[{"name":"response"}],"output":{"name":"result"}}],[11,"status_mut","","Get a mutable reference to the status.",367,{"inputs":[{"name":"response"}],"output":{"name":"statuscode"}}],[11,"headers_mut","","Get a mutable reference to the Headers.",367,{"inputs":[{"name":"response"}],"output":{"name":"headers"}}],[11,"end","","Flushes all writing of a response to the client.",367,{"inputs":[{"name":"response"}],"output":{"name":"result"}}],[11,"write","","",367,null],[11,"flush","","",367,{"inputs":[{"name":"response"}],"output":{"name":"result"}}],[11,"drop","","",367,{"inputs":[{"name":"response"}],"output":null}],[8,"Handler","hyper::server","A handler that can handle incoming requests for a server.",null,null],[10,"handle","","Receives a `Request`/`Response` pair, and should perform some action on them.",368,{"inputs":[{"name":"handler"},{"name":"request"},{"name":"response"}],"output":null}],[11,"check_continue","","Called when a Request includes a `Expect: 100-continue` header.",368,null],[11,"on_connection_start","","This is run after a connection is received, on a per-connection basis (not a\nper-request basis, as a connection with keep-alive may handle multiple\nrequests)",368,{"inputs":[{"name":"handler"}],"output":null}],[11,"on_connection_end","","This is run before a connection is closed, on a per-connection basis (not a\nper-request basis, as a connection with keep-alive may handle multiple\nrequests)",368,{"inputs":[{"name":"handler"}],"output":null}],[11,"fmt","","",369,{"inputs":[{"name":"server"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new server with the provided handler.",369,{"inputs":[{"name":"server"},{"name":"l"}],"output":{"name":"server"}}],[11,"keep_alive","","Controls keep-alive for this server.",369,{"inputs":[{"name":"server"},{"name":"option"}],"output":null}],[11,"set_read_timeout","","Sets the read timeout for all Request reads.",369,{"inputs":[{"name":"server"},{"name":"option"}],"output":null}],[11,"set_write_timeout","","Sets the write timeout for all Response writes.",369,{"inputs":[{"name":"server"},{"name":"option"}],"output":null}],[11,"http","","Creates a new server that will handle `HttpStream`s.",369,{"inputs":[{"name":"server"},{"name":"to"}],"output":{"name":"result"}}],[11,"https","","Creates a new server that will handle `HttpStream`s over SSL.",369,{"inputs":[{"name":"server"},{"name":"a"},{"name":"s"}],"output":{"name":"result"}}],[11,"handle","","Binds to a socket and starts handling connections.",369,{"inputs":[{"name":"server"},{"name":"h"}],"output":{"name":"result"}}],[11,"handle_threads","","Binds to a socket and starts handling connections with the provided\nnumber of threads.",369,{"inputs":[{"name":"server"},{"name":"h"},{"name":"usize"}],"output":{"name":"result"}}],[11,"fmt","","",365,{"inputs":[{"name":"listening"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",365,{"inputs":[{"name":"listening"}],"output":null}],[11,"close","","Warning: This function doesn't work. The server remains listening after you called\nit. See https://github.com/hyperium/hyper/issues/338 for more details.",365,{"inputs":[{"name":"listening"}],"output":{"name":"result"}}],[0,"status","hyper","HTTP status codes",null,null],[4,"StatusCode","hyper::status","An HTTP status code (`status-code` in RFC 7230 et al.).",null,null],[13,"Continue","","100 Continue\n[[RFC7231, Section 6.2.1](https://tools.ietf.org/html/rfc7231#section-6.2.1)]",370,null],[13,"SwitchingProtocols","","101 Switching Protocols\n[[RFC7231, Section 6.2.2](https://tools.ietf.org/html/rfc7231#section-6.2.2)]",370,null],[13,"Processing","","102 Processing\n[[RFC2518](https://tools.ietf.org/html/rfc2518)]",370,null],[13,"Ok","","200 OK\n[[RFC7231, Section 6.3.1](https://tools.ietf.org/html/rfc7231#section-6.3.1)]",370,null],[13,"Created","","201 Created\n[[RFC7231, Section 6.3.2](https://tools.ietf.org/html/rfc7231#section-6.3.2)]",370,null],[13,"Accepted","","202 Accepted\n[[RFC7231, Section 6.3.3](https://tools.ietf.org/html/rfc7231#section-6.3.3)]",370,null],[13,"NonAuthoritativeInformation","","203 Non-Authoritative Information\n[[RFC7231, Section 6.3.4](https://tools.ietf.org/html/rfc7231#section-6.3.4)]",370,null],[13,"NoContent","","204 No Content\n[[RFC7231, Section 6.3.5](https://tools.ietf.org/html/rfc7231#section-6.3.5)]",370,null],[13,"ResetContent","","205 Reset Content\n[[RFC7231, Section 6.3.6](https://tools.ietf.org/html/rfc7231#section-6.3.6)]",370,null],[13,"PartialContent","","206 Partial Content\n[[RFC7233, Section 4.1](https://tools.ietf.org/html/rfc7233#section-4.1)]",370,null],[13,"MultiStatus","","207 Multi-Status\n[[RFC4918](https://tools.ietf.org/html/rfc4918)]",370,null],[13,"AlreadyReported","","208 Already Reported\n[[RFC5842](https://tools.ietf.org/html/rfc5842)]",370,null],[13,"ImUsed","","226 IM Used\n[[RFC3229](https://tools.ietf.org/html/rfc3229)]",370,null],[13,"MultipleChoices","","300 Multiple Choices\n[[RFC7231, Section 6.4.1](https://tools.ietf.org/html/rfc7231#section-6.4.1)]",370,null],[13,"MovedPermanently","","301 Moved Permanently\n[[RFC7231, Section 6.4.2](https://tools.ietf.org/html/rfc7231#section-6.4.2)]",370,null],[13,"Found","","302 Found\n[[RFC7231, Section 6.4.3](https://tools.ietf.org/html/rfc7231#section-6.4.3)]",370,null],[13,"SeeOther","","303 See Other\n[[RFC7231, Section 6.4.4](https://tools.ietf.org/html/rfc7231#section-6.4.4)]",370,null],[13,"NotModified","","304 Not Modified\n[[RFC7232, Section 4.1](https://tools.ietf.org/html/rfc7232#section-4.1)]",370,null],[13,"UseProxy","","305 Use Proxy\n[[RFC7231, Section 6.4.5](https://tools.ietf.org/html/rfc7231#section-6.4.5)]",370,null],[13,"TemporaryRedirect","","307 Temporary Redirect\n[[RFC7231, Section 6.4.7](https://tools.ietf.org/html/rfc7231#section-6.4.7)]",370,null],[13,"PermanentRedirect","","308 Permanent Redirect\n[[RFC7238](https://tools.ietf.org/html/rfc7238)]",370,null],[13,"BadRequest","","400 Bad Request\n[[RFC7231, Section 6.5.1](https://tools.ietf.org/html/rfc7231#section-6.5.1)]",370,null],[13,"Unauthorized","","401 Unauthorized\n[[RFC7235, Section 3.1](https://tools.ietf.org/html/rfc7235#section-3.1)]",370,null],[13,"PaymentRequired","","402 Payment Required\n[[RFC7231, Section 6.5.2](https://tools.ietf.org/html/rfc7231#section-6.5.2)]",370,null],[13,"Forbidden","","403 Forbidden\n[[RFC7231, Section 6.5.3](https://tools.ietf.org/html/rfc7231#section-6.5.3)]",370,null],[13,"NotFound","","404 Not Found\n[[RFC7231, Section 6.5.4](https://tools.ietf.org/html/rfc7231#section-6.5.4)]",370,null],[13,"MethodNotAllowed","","405 Method Not Allowed\n[[RFC7231, Section 6.5.5](https://tools.ietf.org/html/rfc7231#section-6.5.5)]",370,null],[13,"NotAcceptable","","406 Not Acceptable\n[[RFC7231, Section 6.5.6](https://tools.ietf.org/html/rfc7231#section-6.5.6)]",370,null],[13,"ProxyAuthenticationRequired","","407 Proxy Authentication Required\n[[RFC7235, Section 3.2](https://tools.ietf.org/html/rfc7235#section-3.2)]",370,null],[13,"RequestTimeout","","408 Request Timeout\n[[RFC7231, Section 6.5.7](https://tools.ietf.org/html/rfc7231#section-6.5.7)]",370,null],[13,"Conflict","","409 Conflict\n[[RFC7231, Section 6.5.8](https://tools.ietf.org/html/rfc7231#section-6.5.8)]",370,null],[13,"Gone","","410 Gone\n[[RFC7231, Section 6.5.9](https://tools.ietf.org/html/rfc7231#section-6.5.9)]",370,null],[13,"LengthRequired","","411 Length Required\n[[RFC7231, Section 6.5.10](https://tools.ietf.org/html/rfc7231#section-6.5.10)]",370,null],[13,"PreconditionFailed","","412 Precondition Failed\n[[RFC7232, Section 4.2](https://tools.ietf.org/html/rfc7232#section-4.2)]",370,null],[13,"PayloadTooLarge","","413 Payload Too Large\n[[RFC7231, Section 6.5.11](https://tools.ietf.org/html/rfc7231#section-6.5.11)]",370,null],[13,"UriTooLong","","414 URI Too Long\n[[RFC7231, Section 6.5.12](https://tools.ietf.org/html/rfc7231#section-6.5.12)]",370,null],[13,"UnsupportedMediaType","","415 Unsupported Media Type\n[[RFC7231, Section 6.5.13](https://tools.ietf.org/html/rfc7231#section-6.5.13)]",370,null],[13,"RangeNotSatisfiable","","416 Range Not Satisfiable\n[[RFC7233, Section 4.4](https://tools.ietf.org/html/rfc7233#section-4.4)]",370,null],[13,"ExpectationFailed","","417 Expectation Failed\n[[RFC7231, Section 6.5.14](https://tools.ietf.org/html/rfc7231#section-6.5.14)]",370,null],[13,"ImATeapot","","418 I'm a teapot\n[curiously, not registered by IANA, but [RFC2324](https://tools.ietf.org/html/rfc2324)]",370,null],[13,"MisdirectedRequest","","421 Misdirected Request\n[RFC7540, Section 9.1.2](http://tools.ietf.org/html/rfc7540#section-9.1.2)",370,null],[13,"UnprocessableEntity","","422 Unprocessable Entity\n[[RFC4918](https://tools.ietf.org/html/rfc4918)]",370,null],[13,"Locked","","423 Locked\n[[RFC4918](https://tools.ietf.org/html/rfc4918)]",370,null],[13,"FailedDependency","","424 Failed Dependency\n[[RFC4918](https://tools.ietf.org/html/rfc4918)]",370,null],[13,"UpgradeRequired","","426 Upgrade Required\n[[RFC7231, Section 6.5.15](https://tools.ietf.org/html/rfc7231#section-6.5.15)]",370,null],[13,"PreconditionRequired","","428 Precondition Required\n[[RFC6585](https://tools.ietf.org/html/rfc6585)]",370,null],[13,"TooManyRequests","","429 Too Many Requests\n[[RFC6585](https://tools.ietf.org/html/rfc6585)]",370,null],[13,"RequestHeaderFieldsTooLarge","","431 Request Header Fields Too Large\n[[RFC6585](https://tools.ietf.org/html/rfc6585)]",370,null],[13,"UnavailableForLegalReasons","","451 Unavailable For Legal Reasons\n[[RFC7725](http://tools.ietf.org/html/rfc7725)]",370,null],[13,"InternalServerError","","500 Internal Server Error\n[[RFC7231, Section 6.6.1](https://tools.ietf.org/html/rfc7231#section-6.6.1)]",370,null],[13,"NotImplemented","","501 Not Implemented\n[[RFC7231, Section 6.6.2](https://tools.ietf.org/html/rfc7231#section-6.6.2)]",370,null],[13,"BadGateway","","502 Bad Gateway\n[[RFC7231, Section 6.6.3](https://tools.ietf.org/html/rfc7231#section-6.6.3)]",370,null],[13,"ServiceUnavailable","","503 Service Unavailable\n[[RFC7231, Section 6.6.4](https://tools.ietf.org/html/rfc7231#section-6.6.4)]",370,null],[13,"GatewayTimeout","","504 Gateway Timeout\n[[RFC7231, Section 6.6.5](https://tools.ietf.org/html/rfc7231#section-6.6.5)]",370,null],[13,"HttpVersionNotSupported","","505 HTTP Version Not Supported\n[[RFC7231, Section 6.6.6](https://tools.ietf.org/html/rfc7231#section-6.6.6)]",370,null],[13,"VariantAlsoNegotiates","","506 Variant Also Negotiates\n[[RFC2295](https://tools.ietf.org/html/rfc2295)]",370,null],[13,"InsufficientStorage","","507 Insufficient Storage\n[[RFC4918](https://tools.ietf.org/html/rfc4918)]",370,null],[13,"LoopDetected","","508 Loop Detected\n[[RFC5842](https://tools.ietf.org/html/rfc5842)]",370,null],[13,"NotExtended","","510 Not Extended\n[[RFC2774](https://tools.ietf.org/html/rfc2774)]",370,null],[13,"NetworkAuthenticationRequired","","511 Network Authentication Required\n[[RFC6585](https://tools.ietf.org/html/rfc6585)]",370,null],[13,"Unregistered","","A status code not in the IANA HTTP status code registry or very well known",370,null],[4,"StatusClass","","The class of an HTTP `status-code`.",null,null],[13,"Informational","","1xx (Informational): The request was received, continuing process",371,null],[13,"Success","","2xx (Success): The request was successfully received, understood, and accepted",371,null],[13,"Redirection","","3xx (Redirection): Further action needs to be taken in order to complete the request",371,null],[13,"ClientError","","4xx (Client Error): The request contains bad syntax or cannot be fulfilled",371,null],[13,"ServerError","","5xx (Server Error): The server failed to fulfill an apparently valid request",371,null],[13,"NoClass","","A status code lower than 100 or higher than 599. These codes do no belong to any class.",371,null],[11,"hash","","",370,null],[11,"fmt","","",370,{"inputs":[{"name":"statuscode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"canonical_reason","","Get the standardised `reason-phrase` for this status code.",370,{"inputs":[{"name":"statuscode"}],"output":{"name":"option"}}],[11,"class","","Determine the class of a status code, based on its first digit.",370,{"inputs":[{"name":"statuscode"}],"output":{"name":"statusclass"}}],[11,"is_informational","","Check if class is Informational.",370,{"inputs":[{"name":"statuscode"}],"output":{"name":"bool"}}],[11,"is_success","","Check if class is Success.",370,{"inputs":[{"name":"statuscode"}],"output":{"name":"bool"}}],[11,"is_redirection","","Check if class is Redirection.",370,{"inputs":[{"name":"statuscode"}],"output":{"name":"bool"}}],[11,"is_client_error","","Check if class is ClientError.",370,{"inputs":[{"name":"statuscode"}],"output":{"name":"bool"}}],[11,"is_server_error","","Check if class is ServerError.",370,{"inputs":[{"name":"statuscode"}],"output":{"name":"bool"}}],[11,"is_strange_status","","Check if class is NoClass",370,{"inputs":[{"name":"statuscode"}],"output":{"name":"bool"}}],[11,"fmt","","",370,{"inputs":[{"name":"statuscode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",370,{"inputs":[{"name":"statuscode"},{"name":"statuscode"}],"output":{"name":"bool"}}],[11,"clone","","",370,{"inputs":[{"name":"statuscode"}],"output":{"name":"statuscode"}}],[11,"partial_cmp","","",370,{"inputs":[{"name":"statuscode"},{"name":"statuscode"}],"output":{"name":"option"}}],[11,"cmp","","",370,{"inputs":[{"name":"statuscode"},{"name":"statuscode"}],"output":{"name":"ordering"}}],[11,"cmp","","",371,{"inputs":[{"name":"statusclass"},{"name":"statusclass"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",371,{"inputs":[{"name":"statusclass"},{"name":"statusclass"}],"output":{"name":"option"}}],[11,"lt","","",371,{"inputs":[{"name":"statusclass"},{"name":"statusclass"}],"output":{"name":"bool"}}],[11,"le","","",371,{"inputs":[{"name":"statusclass"},{"name":"statusclass"}],"output":{"name":"bool"}}],[11,"gt","","",371,{"inputs":[{"name":"statusclass"},{"name":"statusclass"}],"output":{"name":"bool"}}],[11,"ge","","",371,{"inputs":[{"name":"statusclass"},{"name":"statusclass"}],"output":{"name":"bool"}}],[11,"eq","","",371,{"inputs":[{"name":"statusclass"},{"name":"statusclass"}],"output":{"name":"bool"}}],[11,"ne","","",371,{"inputs":[{"name":"statusclass"},{"name":"statusclass"}],"output":{"name":"bool"}}],[11,"clone","","",371,{"inputs":[{"name":"statusclass"}],"output":{"name":"statusclass"}}],[11,"fmt","","",371,{"inputs":[{"name":"statusclass"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default_code","","Get the default status code for the class.",371,{"inputs":[{"name":"statusclass"}],"output":{"name":"statuscode"}}],[0,"uri","hyper","HTTP RequestUris",null,null],[4,"RequestUri","hyper::uri","The Request-URI of a Request's StartLine.",null,null],[13,"AbsolutePath","","The most common request target, an absolute path and optional query.",372,null],[13,"AbsoluteUri","","An absolute URI. Used in conjunction with proxies.",372,null],[13,"Authority","","The authority form is only for use with `CONNECT` requests.",372,null],[13,"Star","","The star is used to target the entire server, instead of a specific resource.",372,null],[11,"clone","","",372,{"inputs":[{"name":"requesturi"}],"output":{"name":"requesturi"}}],[11,"eq","","",372,{"inputs":[{"name":"requesturi"},{"name":"requesturi"}],"output":{"name":"bool"}}],[11,"ne","","",372,{"inputs":[{"name":"requesturi"},{"name":"requesturi"}],"output":{"name":"bool"}}],[11,"fmt","","",372,{"inputs":[{"name":"requesturi"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",372,{"inputs":[{"name":"requesturi"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",372,{"inputs":[{"name":"requesturi"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"version","hyper","HTTP Versions enum",null,null],[4,"HttpVersion","hyper::version","Represents a version of the HTTP spec.",null,null],[13,"Http09","","`HTTP/0.9`",373,null],[13,"Http10","","`HTTP/1.0`",373,null],[13,"Http11","","`HTTP/1.1`",373,null],[13,"Http20","","`HTTP/2.0`",373,null],[11,"fmt","","",373,{"inputs":[{"name":"httpversion"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",373,null],[11,"cmp","","",373,{"inputs":[{"name":"httpversion"},{"name":"httpversion"}],"output":{"name":"ordering"}}],[11,"clone","","",373,{"inputs":[{"name":"httpversion"}],"output":{"name":"httpversion"}}],[11,"partial_cmp","","",373,{"inputs":[{"name":"httpversion"},{"name":"httpversion"}],"output":{"name":"option"}}],[11,"lt","","",373,{"inputs":[{"name":"httpversion"},{"name":"httpversion"}],"output":{"name":"bool"}}],[11,"le","","",373,{"inputs":[{"name":"httpversion"},{"name":"httpversion"}],"output":{"name":"bool"}}],[11,"gt","","",373,{"inputs":[{"name":"httpversion"},{"name":"httpversion"}],"output":{"name":"bool"}}],[11,"ge","","",373,{"inputs":[{"name":"httpversion"},{"name":"httpversion"}],"output":{"name":"bool"}}],[11,"eq","","",373,{"inputs":[{"name":"httpversion"},{"name":"httpversion"}],"output":{"name":"bool"}}],[11,"ne","","",373,{"inputs":[{"name":"httpversion"},{"name":"httpversion"}],"output":{"name":"bool"}}],[11,"fmt","","",373,{"inputs":[{"name":"httpversion"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"mime","hyper","Re-exporting the mime crate, for convenience.",null,null],[14,"bench_header!","","",null,null],[14,"__hyper__deref!","","",null,null],[14,"__hyper__tm!","","",null,null],[14,"test_header!","","",null,null],[14,"__hyper_generate_header_serialization!","","",null,null],[14,"header!","","",null,null]],"paths":[[3,"Url"],[3,"EncodingOverride"],[4,"Host"],[4,"ParseError"],[4,"Context"],[3,"CharRanges"],[3,"EncodeSet"],[3,"PathFormatter"],[3,"UserInfoFormatter"],[3,"UrlNoFragmentFormatter"],[4,"Mapping"],[3,"Uts46Flags"],[4,"Error"],[3,"OpaqueOrigin"],[4,"Origin"],[4,"SchemeData"],[3,"RelativeSchemeData"],[3,"UrlParser"],[4,"SchemeType"],[3,"LanguageTag"],[4,"Error"],[4,"Body"],[4,"RedirectPolicy"],[3,"Config"],[3,"Pool"],[3,"PooledStream"],[3,"Request"],[3,"Response"],[8,"IntoUrl"],[3,"Client"],[3,"RequestBuilder"],[4,"Error"],[4,"Method"],[3,"CookiePair"],[3,"CookieJar"],[3,"Iter"],[3,"AttrVal"],[3,"EntityTag"],[3,"QualityItem"],[3,"Basic"],[3,"Bearer"],[3,"ContentDisposition"],[3,"Host"],[3,"StrictTransportSecurity"],[3,"Protocol"],[4,"Charset"],[4,"Encoding"],[4,"AccessControlAllowOrigin"],[4,"RangeUnit"],[4,"CacheDirective"],[4,"ConnectionOption"],[4,"DispositionType"],[4,"DispositionParam"],[4,"ContentRangeSpec"],[4,"Expect"],[4,"IfMatch"],[4,"IfNoneMatch"],[4,"IfRange"],[4,"Pragma"],[4,"Range"],[4,"ByteRangeSpec"],[4,"ProtocolName"],[4,"Vary"],[3,"Accept"],[3,"Vec"],[3,"BinaryHeap"],[3,"Hole"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"RawItems"],[3,"Node"],[3,"Handle"],[3,"ElemsAndEdges"],[3,"MoveTraversalImpl"],[3,"AbsTraversal"],[3,"NodeSlice"],[3,"MutNodeSlice"],[3,"BTreeMap"],[3,"AbsIter"],[3,"IdRef"],[3,"PartialSearchStack"],[3,"Pusher"],[3,"SearchStack"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"Range"],[3,"RangeMut"],[4,"Entry"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"BTreeSet"],[3,"Iter"],[3,"IntoIter"],[3,"Range"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Intersection"],[3,"Union"],[4,"Cow"],[3,"EnumSet"],[3,"Iter"],[3,"Argument"],[3,"FormatSpec"],[4,"Alignment"],[4,"Count"],[4,"Position"],[3,"Iter"],[3,"IntoIter"],[3,"Rawlink"],[3,"LinkedList"],[3,"IterMut"],[3,"RangeFrom"],[3,"RangeTo"],[3,"Range"],[3,"Utf16Units"],[3,"String"],[4,"SearchStep"],[3,"CharEqSearcher"],[3,"CharEqPattern"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[4,"StrSearcherImpl"],[3,"EmptyNeedle"],[3,"TwoWaySearcher"],[4,"MatchOnly"],[4,"RejectAndMatch"],[3,"FromUtf8Error"],[3,"FromUtf16Error"],[4,"ParseError"],[3,"Drain"],[3,"IntoIter"],[3,"Drain"],[3,"VecDeque"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[4,"Bound"],[3,"ExchangeHeapSingleton"],[3,"IntermediateBox"],[3,"Box"],[3,"AccessControlAllowCredentials"],[3,"AccessControlAllowHeaders"],[3,"AccessControlAllowMethods"],[3,"AccessControlExposeHeaders"],[3,"AccessControlMaxAge"],[3,"AccessControlRequestHeaders"],[3,"AccessControlRequestMethod"],[3,"AcceptCharset"],[3,"AcceptEncoding"],[3,"AcceptLanguage"],[3,"AcceptRanges"],[3,"Allow"],[3,"Authorization"],[3,"CacheControl"],[3,"Cookie"],[3,"Connection"],[3,"ContentEncoding"],[3,"ContentLanguage"],[3,"ContentLength"],[3,"ContentRange"],[3,"ContentType"],[3,"Mime"],[4,"TopLevel"],[4,"SubLevel"],[4,"Attr"],[4,"Value"],[3,"Date"],[3,"ETag"],[3,"Expires"],[3,"From"],[3,"IfModifiedSince"],[3,"IfUnmodifiedSince"],[3,"LastModified"],[3,"Location"],[3,"Referer"],[3,"Server"],[3,"SetCookie"],[3,"TransferEncoding"],[3,"Upgrade"],[3,"UserAgent"],[4,"Option"],[3,"Wrapping"],[3,"Decoded"],[4,"FullDecoded"],[4,"Part"],[3,"Formatted"],[4,"Sign"],[3,"Unpacked"],[4,"Sign"],[3,"Decimal"],[4,"ParseResult"],[3,"ParseFloatError"],[4,"FloatErrorKind"],[3,"Big32x40"],[3,"Big8x3"],[3,"Fp"],[4,"FpCategory"],[3,"ParseIntError"],[4,"IntErrorKind"],[3,"NonZero"],[3,"Unique"],[3,"Shared"],[3,"PhantomData"],[3,"RangeFull"],[4,"Ordering"],[8,"Any"],[3,"TypeId"],[3,"AtomicBool"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"AtomicPtr"],[4,"Ordering"],[3,"Cell"],[4,"BorrowState"],[3,"RefCell"],[3,"BorrowRef"],[3,"Ref"],[3,"RefMut"],[3,"BorrowRefMut"],[3,"UnsafeCell"],[3,"EscapeUnicode"],[4,"EscapeUnicodeState"],[3,"EscapeDefault"],[4,"EscapeDefaultState"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[4,"ChainState"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[3,"StepBy"],[3,"RangeInclusive"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[3,"Item"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Slice"],[3,"TraitObject"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"i8x16"],[3,"i16x8"],[3,"i32x4"],[3,"i64x2"],[3,"u8x16"],[3,"u16x8"],[3,"u32x4"],[3,"u64x2"],[3,"f32x4"],[3,"f64x2"],[3,"Iter"],[3,"IterMut"],[3,"Split"],[3,"SplitMut"],[3,"GenericSplitN"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"Windows"],[3,"Chunks"],[3,"ChunksMut"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"SplitInternal"],[3,"Split"],[3,"RSplit"],[3,"SplitTerminator"],[3,"RSplitTerminator"],[3,"SplitNInternal"],[3,"SplitN"],[3,"RSplitN"],[3,"MatchIndicesInternal"],[3,"MatchIndices"],[3,"RMatchIndices"],[3,"MatchesInternal"],[3,"Matches"],[3,"RMatches"],[3,"Lines"],[3,"LinesAny"],[3,"LinesAnyMap"],[3,"CharRange"],[3,"SipHasher"],[3,"Binary"],[3,"Octal"],[3,"Decimal"],[3,"LowerHex"],[3,"UpperHex"],[3,"Radix"],[3,"RadixFmt"],[3,"PadAdapter"],[3,"DebugStruct"],[3,"DebugTuple"],[3,"DebugInner"],[3,"DebugSet"],[3,"DebugList"],[3,"DebugMap"],[3,"Error"],[3,"ArgumentV1"],[4,"FlagV1"],[3,"Arguments"],[3,"Formatter"],[3,"HttpDate"],[3,"Quality"],[3,"ExtendedValue"],[8,"Scheme"],[8,"Header"],[8,"HeaderFormat"],[3,"Headers"],[3,"HeadersItems"],[3,"HeaderView"],[3,"HeaderFormatter"],[3,"Incoming"],[4,"HttpReader"],[4,"HttpWriter"],[3,"Http11Message"],[3,"Http11Protocol"],[3,"EndError"],[3,"Error"],[3,"Http2Protocol"],[3,"Http2Message"],[3,"RequestHead"],[3,"ResponseHead"],[8,"Protocol"],[8,"HttpMessage"],[3,"RawStatus"],[4,"HttpsStream"],[8,"NetworkListener"],[8,"NetworkStream"],[8,"NetworkConnector"],[8,"Ssl"],[3,"NetworkConnections"],[3,"HttpListener"],[3,"HttpStream"],[3,"HttpConnector"],[3,"HttpsListener"],[3,"HttpsConnector"],[3,"Listening"],[3,"Request"],[3,"Response"],[8,"Handler"],[3,"Server"],[4,"StatusCode"],[4,"StatusClass"],[4,"RequestUri"],[4,"HttpVersion"]]};
searchIndex['handlebars'] = {"items":[[0,"","handlebars","# Handlebars\nHandlebars is a modern and extensible templating solution originally created in the JavaScript world. It's used by many popular frameworks like [Ember.js](http://emberjs.com) and Chaplin. It's also ported to some other platforms such as [Java](https://github.com/jknack/handlebars.java).",null,null],[3,"Template","","",null,null],[12,"name","","",0,null],[12,"elements","","",0,null],[3,"Registry","","The single entry point of your Handlebars templates",null,null],[3,"RenderError","","",null,null],[12,"desc","","",1,null],[3,"RenderContext","","The context of a render call",null,null],[12,"writer","","the `Write` where page is generated",2,null],[12,"current_template","","current template name",2,null],[12,"root_template","","root template name",2,null],[3,"Helper","","",null,null],[3,"Context","","The context wrap data you render on your templates.",null,null],[4,"TemplateError","","Template parsing error",null,null],[13,"UnclosedBraces","","",3,null],[13,"UnexpectedClosingBraces","","",3,null],[13,"MismatchingClosedHelper","","",3,null],[13,"UnclosedHelper","","",3,null],[13,"UnclosedExpression","","",3,null],[4,"TemplateFileError","","",null,null],[13,"TemplateError","","",4,null],[13,"IOError","","",4,null],[4,"TemplateRenderError","","",null,null],[13,"TemplateError","","",5,null],[13,"RenderError","","",5,null],[13,"IOError","","",5,null],[11,"fmt","","",0,{"inputs":[{"name":"template"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"template"}],"output":{"name":"template"}}],[11,"eq","","",0,{"inputs":[{"name":"template"},{"name":"template"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"template"},{"name":"template"}],"output":{"name":"bool"}}],[11,"new","","",0,{"inputs":[{"name":"template"}],"output":{"name":"template"}}],[11,"compile","","",0,{"inputs":[{"name":"template"},{"name":"s"}],"output":{"name":"result"}}],[11,"compile_with_name","","",0,{"inputs":[{"name":"template"},{"name":"s"},{"name":"string"}],"output":{"name":"result"}}],[11,"to_string","","",0,{"inputs":[{"name":"template"}],"output":{"name":"string"}}],[11,"clone","","",3,{"inputs":[{"name":"templateerror"}],"output":{"name":"templateerror"}}],[11,"fmt","","",3,{"inputs":[{"name":"templateerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"templateerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",3,{"inputs":[{"name":"templateerror"}],"output":{"name":"str"}}],[11,"cause","","",3,{"inputs":[{"name":"templateerror"}],"output":{"name":"option"}}],[11,"fmt","","",4,{"inputs":[{"name":"templatefileerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"templatefileerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",4,{"inputs":[{"name":"templatefileerror"}],"output":{"name":"str"}}],[11,"cause","","",4,{"inputs":[{"name":"templatefileerror"}],"output":{"name":"option"}}],[11,"from","","",4,{"inputs":[{"name":"templatefileerror"},{"name":"templateerror"}],"output":{"name":"templatefileerror"}}],[11,"from","","",4,{"inputs":[{"name":"templatefileerror"},{"name":"ioerror"}],"output":{"name":"templatefileerror"}}],[11,"fmt","","",5,{"inputs":[{"name":"templaterendererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"templaterendererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",5,{"inputs":[{"name":"templaterendererror"}],"output":{"name":"str"}}],[11,"cause","","",5,{"inputs":[{"name":"templaterendererror"}],"output":{"name":"option"}}],[11,"from","","",5,{"inputs":[{"name":"templaterendererror"},{"name":"templateerror"}],"output":{"name":"templaterendererror"}}],[11,"from","","",5,{"inputs":[{"name":"templaterendererror"},{"name":"rendererror"}],"output":{"name":"templaterendererror"}}],[11,"from","","",5,{"inputs":[{"name":"templaterendererror"},{"name":"ioerror"}],"output":{"name":"templaterendererror"}}],[11,"new","","",6,{"inputs":[{"name":"registry"}],"output":{"name":"registry"}}],[11,"register_template","","Register a template",6,{"inputs":[{"name":"registry"},{"name":"str"},{"name":"template"}],"output":null}],[11,"register_template_string","","Register a template string",6,{"inputs":[{"name":"registry"},{"name":"str"},{"name":"string"}],"output":{"name":"result"}}],[11,"register_template_file","","Register a template from a path",6,{"inputs":[{"name":"registry"},{"name":"str"},{"name":"path"}],"output":{"name":"result"}}],[11,"register_template_source","","Register a template from `std::io::Read` source",6,{"inputs":[{"name":"registry"},{"name":"str"},{"name":"read"}],"output":{"name":"result"}}],[11,"unregister_template","","remove a template from the registry",6,{"inputs":[{"name":"registry"},{"name":"str"}],"output":null}],[11,"register_helper","","register a helper",6,{"inputs":[{"name":"registry"},{"name":"str"},{"name":"box"}],"output":{"name":"option"}}],[11,"register_escape_fn","","Register a new *escape fn* to be used from now on by this registry.",6,{"inputs":[{"name":"registry"},{"name":"f"}],"output":null}],[11,"unregister_escape_fn","","Restore the default *escape fn*.",6,{"inputs":[{"name":"registry"}],"output":null}],[11,"get_escape_fn","","Get a reference to the current *escape fn*.",6,{"inputs":[{"name":"registry"}],"output":{"name":"fn"}}],[11,"get_template","","Return a registered template,",6,{"inputs":[{"name":"registry"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_helper","","Return a registered helper",6,{"inputs":[{"name":"registry"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_templates","","Return all templates registered",6,{"inputs":[{"name":"registry"}],"output":{"name":"hashmap"}}],[11,"clear_templates","","Unregister all templates",6,{"inputs":[{"name":"registry"}],"output":null}],[11,"render","","Render a registered template with some data into a string",6,{"inputs":[{"name":"registry"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"renderw","","Render a registered template with some data to the `std::io::Write`",6,{"inputs":[{"name":"registry"},{"name":"str"},{"name":"context"},{"name":"write"}],"output":{"name":"result"}}],[11,"template_render","","render a template string using current registry without register it",6,{"inputs":[{"name":"registry"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"template_renderw","","render a template string using current registry without register it",6,{"inputs":[{"name":"registry"},{"name":"str"},{"name":"context"},{"name":"write"}],"output":{"name":"result"}}],[11,"template_renderw2","","render a template source using current registry without register it",6,{"inputs":[{"name":"registry"},{"name":"read"},{"name":"context"},{"name":"write"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"rendererror"}],"output":{"name":"rendererror"}}],[11,"fmt","","",1,{"inputs":[{"name":"rendererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"rendererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"rendererror"}],"output":{"name":"str"}}],[11,"from","","",1,{"inputs":[{"name":"rendererror"},{"name":"ioerror"}],"output":{"name":"rendererror"}}],[11,"new","","",1,{"inputs":[{"name":"rendererror"},{"name":"t"}],"output":{"name":"rendererror"}}],[11,"new","","Create a render context from a `Write`",2,{"inputs":[{"name":"rendercontext"},{"name":"write"}],"output":{"name":"rendercontext"}}],[11,"with_writer","","Create a new `RenderContext` with a different `Write`",2,{"inputs":[{"name":"rendercontext"},{"name":"write"}],"output":{"name":"rendercontext"}}],[11,"get_partial","","",2,{"inputs":[{"name":"rendercontext"},{"name":"string"}],"output":{"name":"option"}}],[11,"set_partial","","",2,{"inputs":[{"name":"rendercontext"},{"name":"string"},{"name":"template"}],"output":null}],[11,"get_path","","",2,{"inputs":[{"name":"rendercontext"}],"output":{"name":"string"}}],[11,"set_path","","",2,{"inputs":[{"name":"rendercontext"},{"name":"string"}],"output":null}],[11,"set_local_var","","",2,{"inputs":[{"name":"rendercontext"},{"name":"string"},{"name":"json"}],"output":null}],[11,"clear_local_vars","","",2,{"inputs":[{"name":"rendercontext"}],"output":null}],[11,"promote_local_vars","","",2,{"inputs":[{"name":"rendercontext"}],"output":null}],[11,"demote_local_vars","","",2,{"inputs":[{"name":"rendercontext"}],"output":null}],[11,"get_local_var","","",2,{"inputs":[{"name":"rendercontext"},{"name":"string"}],"output":{"name":"json"}}],[11,"writer","","",2,{"inputs":[{"name":"rendercontext"}],"output":{"name":"write"}}],[11,"fmt","","",2,{"inputs":[{"name":"rendercontext"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"name","","",7,{"inputs":[{"name":"helper"}],"output":{"name":"string"}}],[11,"params","","",7,{"inputs":[{"name":"helper"}],"output":{"name":"vec"}}],[11,"param","","",7,{"inputs":[{"name":"helper"},{"name":"usize"}],"output":{"name":"option"}}],[11,"hash","","",7,{"inputs":[{"name":"helper"}],"output":{"name":"btreemap"}}],[11,"hash_get","","",7,{"inputs":[{"name":"helper"},{"name":"str"}],"output":{"name":"option"}}],[11,"template","","",7,{"inputs":[{"name":"helper"}],"output":{"name":"option"}}],[11,"inverse","","",7,{"inputs":[{"name":"helper"}],"output":{"name":"option"}}],[11,"is_block","","",7,{"inputs":[{"name":"helper"}],"output":{"name":"bool"}}],[11,"render","","",0,{"inputs":[{"name":"template"},{"name":"context"},{"name":"registry"},{"name":"rendercontext"}],"output":{"name":"result"}}],[11,"new","regex::re_unicode","Compiles a regular expression. Once compiled, it can be used repeatedly\nto search, split or replace text in a string.",8,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"result"}}],[11,"with_size_limit","","Compiles a regular expression with the given size limit.",8,{"inputs":[{"name":"regex"},{"name":"usize"},{"name":"str"}],"output":{"name":"result"}}],[11,"is_match","","Returns true if and only if the regex matches the string given.",8,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"bool"}}],[11,"find","","Returns the start and end byte range of the leftmost-first match in\n`text`. If no match exists, then `None` is returned.",8,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"option"}}],[11,"find_iter","","Returns an iterator for each successive non-overlapping match in\n`text`, returning the start and end byte indices with respect to\n`text`.",8,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"findmatches"}}],[11,"captures","","Returns the capture groups corresponding to the leftmost-first\nmatch in `text`. Capture group `0` always corresponds to the entire\nmatch. If no match is found, then `None` is returned.",8,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"option"}}],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture groups matched\nin `text`. This is operationally the same as `find_iter`, except it\nyields information about submatches.",8,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"findcaptures"}}],[11,"split","","Returns an iterator of substrings of `text` delimited by a match of the\nregular expression. Namely, each element of the iterator corresponds to\ntext that *isn't* matched by the regular expression.",8,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"regexsplits"}}],[11,"splitn","","Returns an iterator of at most `limit` substrings of `text` delimited\nby a match of the regular expression. (A `limit` of `0` will return no\nsubstrings.) Namely, each element of the iterator corresponds to text\nthat *isn't* matched by the regular expression. The remainder of the\nstring that is not split will be the last element in the iterator.",8,{"inputs":[{"name":"regex"},{"name":"str"},{"name":"usize"}],"output":{"name":"regexsplitsn"}}],[11,"replace","","Replaces the leftmost-first match with the replacement provided.\nThe replacement can be a regular string (where `$N` and `$name` are\nexpanded to match capture groups) or a function that takes the matches'\n`Captures` and returns the replaced string.",8,{"inputs":[{"name":"regex"},{"name":"str"},{"name":"r"}],"output":{"name":"string"}}],[11,"replace_all","","Replaces all non-overlapping matches in `text` with the replacement\nprovided. This is the same as calling `replacen` with `limit` set to\n`0`.",8,{"inputs":[{"name":"regex"},{"name":"str"},{"name":"r"}],"output":{"name":"string"}}],[11,"replacen","","Replaces at most `limit` non-overlapping matches in `text` with the\nreplacement provided. If `limit` is 0, then all non-overlapping matches\nare replaced.",8,{"inputs":[{"name":"regex"},{"name":"str"},{"name":"usize"},{"name":"r"}],"output":{"name":"string"}}],[11,"shortest_match","","Returns the end location of a match in the text given.",8,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"option"}}],[11,"as_str","","Returns the original string of this regex.",8,{"inputs":[{"name":"regex"}],"output":{"name":"str"}}],[11,"capture_names","","Returns an iterator over the capture names.",8,{"inputs":[{"name":"regex"}],"output":{"name":"capturenames"}}],[11,"captures_len","","Returns the number of captures.",8,{"inputs":[{"name":"regex"}],"output":{"name":"usize"}}],[11,"fmt","regex::backtrack","",9,{"inputs":[{"name":"backtrack"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"backtrackcache"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create new empty cache for the backtracking engine.",10,{"inputs":[{"name":"backtrackcache"}],"output":{"name":"backtrackcache"}}],[11,"fmt","","",11,{"inputs":[{"name":"job"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"job"}],"output":{"name":"job"}}],[11,"exec","","Execute the backtracking matching engine.",9,{"inputs":[{"name":"backtrack"},{"name":"program"},{"name":"backtrackcache"},{"name":"params"},{"name":"i"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"fmt","regex::compile","",12,{"inputs":[{"name":"patch"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new regular expression compiler.",13,{"inputs":[{"name":"compiler"}],"output":{"name":"compiler"}}],[11,"size_limit","","The size of the resulting program is limited by size_limit. If\nthe program approximately exceeds the given size (in bytes), then\ncompilation will stop and return an error.",13,{"inputs":[{"name":"compiler"},{"name":"usize"}],"output":{"name":"compiler"}}],[11,"bytes","","If bytes is true, then the program is compiled as a byte based\nautomaton, which incorporates UTF-8 decoding into the machine. If it's\nfalse, then the automaton is Unicode scalar value based, e.g., an\nengine utilizing such an automaton is resposible for UTF-8 decoding.",13,{"inputs":[{"name":"compiler"},{"name":"bool"}],"output":{"name":"compiler"}}],[11,"only_utf8","","When disabled, the program compiled may match arbitrary bytes.",13,{"inputs":[{"name":"compiler"},{"name":"bool"}],"output":{"name":"compiler"}}],[11,"dfa","","When set, the machine returned is suitable for use in the DFA matching\nengine.",13,{"inputs":[{"name":"compiler"},{"name":"bool"}],"output":{"name":"compiler"}}],[11,"reverse","","When set, the machine returned is suitable for matching text in\nreverse. In particular, all concatenations are flipped.",13,{"inputs":[{"name":"compiler"},{"name":"bool"}],"output":{"name":"compiler"}}],[11,"compile","","Compile a regular expression given its AST.",13,null],[11,"fmt","","",14,{"inputs":[{"name":"hole"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"maybeinst"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"maybeinst"}],"output":{"name":"maybeinst"}}],[11,"fmt","","",16,{"inputs":[{"name":"insthole"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"insthole"}],"output":{"name":"insthole"}}],[11,"eq","","",17,{"inputs":[{"name":"suffixcacheentry"},{"name":"suffixcacheentry"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"suffixcacheentry"},{"name":"suffixcacheentry"}],"output":{"name":"bool"}}],[11,"hash","","",17,null],[11,"default","","",17,{"inputs":[{"name":"suffixcacheentry"}],"output":{"name":"suffixcacheentry"}}],[11,"fmt","","",17,{"inputs":[{"name":"suffixcacheentry"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"suffixcacheentry"}],"output":{"name":"suffixcacheentry"}}],[11,"eq","","",18,{"inputs":[{"name":"suffixcachekey"},{"name":"suffixcachekey"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"suffixcachekey"},{"name":"suffixcachekey"}],"output":{"name":"bool"}}],[11,"hash","","",18,null],[11,"default","","",18,{"inputs":[{"name":"suffixcachekey"}],"output":{"name":"suffixcachekey"}}],[11,"fmt","","",18,{"inputs":[{"name":"suffixcachekey"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"suffixcachekey"}],"output":{"name":"suffixcachekey"}}],[11,"fmt","regex::dfa","",19,{"inputs":[{"name":"dfacache"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",20,{"inputs":[{"name":"dfa"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_match","","",21,{"inputs":[{"name":"dfaresult"}],"output":{"name":"bool"}}],[11,"clone","","",22,{"inputs":[{"name":"state"}],"output":{"name":"state"}}],[11,"eq","","",23,{"inputs":[{"name":"statekey"},{"name":"statekey"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"statekey"},{"name":"statekey"}],"output":{"name":"bool"}}],[11,"hash","","",23,null],[11,"fmt","","",23,{"inputs":[{"name":"statekey"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",23,{"inputs":[{"name":"statekey"}],"output":{"name":"statekey"}}],[11,"fmt","","",24,{"inputs":[{"name":"byte"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"byte"}],"output":{"name":"byte"}}],[11,"eq","","",25,{"inputs":[{"name":"flags"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"flags"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"hash","","",25,null],[11,"clone","","",25,{"inputs":[{"name":"flags"}],"output":{"name":"flags"}}],[11,"new","","Create new empty cache for the DFA engine.",19,{"inputs":[{"name":"dfacache"}],"output":{"name":"dfacache"}}],[11,"exec","","The main entry point to executing a DFA, which returns the *end* of\na match if one exists, using Perl's \"leftmost-first\" semantics.",20,null],[11,"fmt","","",22,{"inputs":[{"name":"state"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",25,{"inputs":[{"name":"flags"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","regex::error","",26,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",26,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",26,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"fmt","","",26,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",26,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"error"}}],[11,"fmt","regex::exec","",27,{"inputs":[{"name":"exec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",27,{"inputs":[{"name":"exec"}],"output":{"name":"exec"}}],[11,"new","","Create a regex execution builder.",28,{"inputs":[{"name":"execbuilder"},{"name":"str"}],"output":{"name":"execbuilder"}}],[11,"new_many","","Like new, but compiles the union of the given regular expressions.",28,{"inputs":[{"name":"execbuilder"},{"name":"i"}],"output":{"name":"execbuilder"}}],[11,"automatic","","Set the matching engine to be automatically determined.",28,{"inputs":[{"name":"execbuilder"}],"output":{"name":"execbuilder"}}],[11,"nfa","","Sets the matching engine to use the NFA algorithm no matter what\noptimizations are possible.",28,{"inputs":[{"name":"execbuilder"}],"output":{"name":"execbuilder"}}],[11,"bounded_backtracking","","Sets the matching engine to use a bounded backtracking engine no\nmatter what optimizations are possible.",28,{"inputs":[{"name":"execbuilder"}],"output":{"name":"execbuilder"}}],[11,"size_limit","","Sets the size limit on a single compiled regular expression program.",28,{"inputs":[{"name":"execbuilder"},{"name":"usize"}],"output":{"name":"execbuilder"}}],[11,"bytes","","Compiles byte based programs for use with the NFA matching engines.",28,{"inputs":[{"name":"execbuilder"},{"name":"bool"}],"output":{"name":"execbuilder"}}],[11,"only_utf8","","When disabled, the program compiled may match arbitrary bytes.",28,{"inputs":[{"name":"execbuilder"},{"name":"bool"}],"output":{"name":"execbuilder"}}],[11,"build","","Build an executor that can run a regular expression.",28,{"inputs":[{"name":"execbuilder"}],"output":{"name":"result"}}],[11,"exec","","The main entry point for execution of a regular expression on text.",27,null],[11,"is_anchor_match","","Returns false if the regex has a start/end anchor, but none of the\nprefix/suffix literals match.",27,null],[11,"into_regex","","Build a Regex from this executor.",27,{"inputs":[{"name":"exec"}],"output":{"name":"regex"}}],[11,"into_regex_set","","Build a RegexSet from this executor.",27,{"inputs":[{"name":"exec"}],"output":{"name":"regexset"}}],[11,"into_byte_regex","","Build a Regex from this executor that can match arbitrary bytes.",27,{"inputs":[{"name":"exec"}],"output":{"name":"regex"}}],[11,"into_byte_regex_set","","Build a RegexSet from this executor that can match arbitrary bytes.",27,{"inputs":[{"name":"exec"}],"output":{"name":"regexsetbytes"}}],[11,"regex_strings","","The original regular expressions given by the caller that were\ncompiled.",27,null],[11,"matches","","Return a slice of instruction pointers to match slots.",27,null],[11,"captures","","Return a slice of capture names.",27,null],[11,"capture_name_idx","","Return a reference to named groups mapping (from group name to\ngroup position).",27,{"inputs":[{"name":"exec"}],"output":{"name":"arc"}}],[11,"fmt","","",29,{"inputs":[{"name":"matchengine"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",29,{"inputs":[{"name":"matchengine"}],"output":{"name":"matchengine"}}],[11,"fmt","","",30,{"inputs":[{"name":"programpool"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","mempool","Create a new memory pool with the given initialization function.",31,{"inputs":[{"name":"pool"},{"name":"box"}],"output":{"name":"pool"}}],[11,"get","","Get a new value from the pool.",31,{"inputs":[{"name":"pool"}],"output":{"name":"guard"}}],[11,"get_ref","","Get a new value from the pool.",31,{"inputs":[{"name":"pool"}],"output":{"name":"refguard"}}],[11,"clone","","",31,{"inputs":[{"name":"pool"}],"output":{"name":"pool"}}],[11,"fmt","","",31,{"inputs":[{"name":"pool"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",32,{"inputs":[{"name":"refguard"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",33,{"inputs":[{"name":"guard"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",32,null],[11,"deref","","",32,{"inputs":[{"name":"refguard"}],"output":{"name":"t"}}],[11,"deref_mut","","",32,{"inputs":[{"name":"refguard"}],"output":{"name":"t"}}],[11,"drop","","",33,null],[11,"deref","","",33,{"inputs":[{"name":"guard"}],"output":{"name":"t"}}],[11,"deref_mut","","",33,{"inputs":[{"name":"guard"}],"output":{"name":"t"}}],[11,"fmt","","",34,{"inputs":[{"name":"stack"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",35,{"inputs":[{"name":"spinlock"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","regex::exec","",30,null],[11,"clone","","",30,{"inputs":[{"name":"programpool"}],"output":{"name":"programpool"}}],[11,"fmt","","",36,{"inputs":[{"name":"programcache"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",36,{"inputs":[{"name":"programcache"}],"output":{"name":"programcache"}}],[11,"fmt","regex::input","",37,{"inputs":[{"name":"inputat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",37,{"inputs":[{"name":"inputat"}],"output":{"name":"inputat"}}],[11,"is_start","","Returns true iff this position is at the beginning of the input.",37,{"inputs":[{"name":"inputat"}],"output":{"name":"bool"}}],[11,"is_end","","Returns true iff this position is past the end of the input.",37,{"inputs":[{"name":"inputat"}],"output":{"name":"bool"}}],[11,"char","","Returns the character at this position.",37,{"inputs":[{"name":"inputat"}],"output":{"name":"char"}}],[11,"byte","","Returns the byte at this position.",37,{"inputs":[{"name":"inputat"}],"output":{"name":"option"}}],[11,"len","","Returns the UTF-8 width of the character at this position.",37,{"inputs":[{"name":"inputat"}],"output":{"name":"usize"}}],[11,"pos","","Returns the byte offset of this position.",37,{"inputs":[{"name":"inputat"}],"output":{"name":"usize"}}],[11,"next_pos","","Returns the byte offset of the next position in the input.",37,{"inputs":[{"name":"inputat"}],"output":{"name":"usize"}}],[11,"fmt","","",38,{"inputs":[{"name":"charinput"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",38,{"inputs":[{"name":"charinput"}],"output":{"name":"charinput"}}],[11,"new","","Return a new character input reader for the given string.",38,null],[11,"deref","","",38,null],[11,"at","","",38,{"inputs":[{"name":"charinput"},{"name":"usize"}],"output":{"name":"inputat"}}],[11,"next_char","","",38,{"inputs":[{"name":"charinput"},{"name":"inputat"}],"output":{"name":"char"}}],[11,"previous_char","","",38,{"inputs":[{"name":"charinput"},{"name":"inputat"}],"output":{"name":"char"}}],[11,"prefix_at","","",38,{"inputs":[{"name":"charinput"},{"name":"literalsearcher"},{"name":"inputat"}],"output":{"name":"option"}}],[11,"len","","",38,{"inputs":[{"name":"charinput"}],"output":{"name":"usize"}}],[11,"as_bytes","","",38,null],[11,"fmt","","",39,{"inputs":[{"name":"byteinput"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",39,{"inputs":[{"name":"byteinput"}],"output":{"name":"byteinput"}}],[11,"new","","Return a new byte-based input reader for the given string.",39,null],[11,"deref","","",39,null],[11,"at","","",39,{"inputs":[{"name":"byteinput"},{"name":"usize"}],"output":{"name":"inputat"}}],[11,"next_char","","",39,{"inputs":[{"name":"byteinput"},{"name":"inputat"}],"output":{"name":"char"}}],[11,"previous_char","","",39,{"inputs":[{"name":"byteinput"},{"name":"inputat"}],"output":{"name":"char"}}],[11,"prefix_at","","",39,{"inputs":[{"name":"byteinput"},{"name":"literalsearcher"},{"name":"inputat"}],"output":{"name":"option"}}],[11,"len","","",39,{"inputs":[{"name":"byteinput"}],"output":{"name":"usize"}}],[11,"as_bytes","","",39,null],[11,"cmp","","",40,{"inputs":[{"name":"char"},{"name":"char"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",40,{"inputs":[{"name":"char"},{"name":"char"}],"output":{"name":"option"}}],[11,"lt","","",40,{"inputs":[{"name":"char"},{"name":"char"}],"output":{"name":"bool"}}],[11,"le","","",40,{"inputs":[{"name":"char"},{"name":"char"}],"output":{"name":"bool"}}],[11,"gt","","",40,{"inputs":[{"name":"char"},{"name":"char"}],"output":{"name":"bool"}}],[11,"ge","","",40,{"inputs":[{"name":"char"},{"name":"char"}],"output":{"name":"bool"}}],[11,"eq","","",40,{"inputs":[{"name":"char"},{"name":"char"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"char"},{"name":"char"}],"output":{"name":"bool"}}],[11,"hash","","",40,null],[11,"clone","","",40,{"inputs":[{"name":"char"}],"output":{"name":"char"}}],[11,"fmt","","",40,{"inputs":[{"name":"char"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_none","","Returns true iff the character is absent.",40,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[11,"len_utf8","","Returns the length of the character's UTF-8 encoding.",40,{"inputs":[{"name":"char"}],"output":{"name":"usize"}}],[11,"is_word_char","","Returns true iff the character is a word character.",40,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[11,"is_word_byte","","Returns true iff the byte is a word byte.",40,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[11,"as_char","","Converts the character to a real primitive `char`.",40,{"inputs":[{"name":"char"}],"output":{"name":"option"}}],[11,"from","","",40,{"inputs":[{"name":"char"},{"name":"char"}],"output":{"name":"char"}}],[11,"from","","",40,{"inputs":[{"name":"char"},{"name":"option"}],"output":{"name":"char"}}],[11,"eq","","",40,{"inputs":[{"name":"char"},{"name":"char"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",40,{"inputs":[{"name":"char"},{"name":"char"}],"output":{"name":"option"}}],[11,"fmt","regex::literals","",41,{"inputs":[{"name":"literalsearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",41,{"inputs":[{"name":"literalsearcher"}],"output":{"name":"literalsearcher"}}],[11,"fmt","","",42,{"inputs":[{"name":"matcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",42,{"inputs":[{"name":"matcher"}],"output":{"name":"matcher"}}],[11,"empty","","Returns a matcher that never matches and never advances the input.",41,{"inputs":[{"name":"literalsearcher"}],"output":{"name":"literalsearcher"}}],[11,"prefixes","","Returns a matcher for literal prefixes from the given set.",41,{"inputs":[{"name":"literalsearcher"},{"name":"literals"}],"output":{"name":"literalsearcher"}}],[11,"suffixes","","Returns a matcher for literal suffixes from the given set.",41,{"inputs":[{"name":"literalsearcher"},{"name":"literals"}],"output":{"name":"literalsearcher"}}],[11,"complete","","Returns true if all matches comprise the entire regular expression.",41,{"inputs":[{"name":"literalsearcher"}],"output":{"name":"bool"}}],[11,"find","","Find the position of a literal in `haystack` if it exists.",41,null],[11,"find_start","","Like find, except matches must start at index `0`.",41,null],[11,"find_end","","Like find, except matches must end at index `haystack.len()`.",41,null],[11,"iter","","Returns an iterator over all literals to be matched.",41,{"inputs":[{"name":"literalsearcher"}],"output":{"name":"literaliter"}}],[11,"lcp","","Returns a matcher for the longest common prefix of this matcher.",41,{"inputs":[{"name":"literalsearcher"}],"output":{"name":"singlesearch"}}],[11,"lcs","","Returns a matcher for the longest common suffix of this matcher.",41,{"inputs":[{"name":"literalsearcher"}],"output":{"name":"singlesearch"}}],[11,"is_empty","","Returns true iff this prefix is empty.",41,{"inputs":[{"name":"literalsearcher"}],"output":{"name":"bool"}}],[11,"len","","Returns the number of prefixes in this machine.",41,{"inputs":[{"name":"literalsearcher"}],"output":{"name":"usize"}}],[11,"approximate_size","","Return the approximate heap usage of literals in bytes.",41,{"inputs":[{"name":"literalsearcher"}],"output":{"name":"usize"}}],[11,"next","","",43,{"inputs":[{"name":"literaliter"}],"output":{"name":"option"}}],[11,"fmt","","",44,{"inputs":[{"name":"singlebyteset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",44,{"inputs":[{"name":"singlebyteset"}],"output":{"name":"singlebyteset"}}],[11,"fmt","","",45,{"inputs":[{"name":"singlesearch"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",45,{"inputs":[{"name":"singlesearch"}],"output":{"name":"singlesearch"}}],[11,"find","","",45,null],[11,"len","","",45,{"inputs":[{"name":"singlesearch"}],"output":{"name":"usize"}}],[11,"char_len","","",45,{"inputs":[{"name":"singlesearch"}],"output":{"name":"usize"}}],[11,"fmt","regex::nfa","",46,{"inputs":[{"name":"nfa"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",47,{"inputs":[{"name":"nfacache"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",48,{"inputs":[{"name":"threads"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",49,{"inputs":[{"name":"followepsilon"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new allocation used by the NFA machine to record execution\nand captures.",47,{"inputs":[{"name":"nfacache"}],"output":{"name":"nfacache"}}],[11,"exec","","Execute the NFA matching engine.",46,{"inputs":[{"name":"nfa"},{"name":"program"},{"name":"nfacache"},{"name":"params"},{"name":"i"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"fmt","regex::params","",50,{"inputs":[{"name":"params"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",51,{"inputs":[{"name":"matchstyle"},{"name":"matchstyle"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"matchstyle"},{"name":"matchstyle"}],"output":{"name":"bool"}}],[11,"fmt","","",51,{"inputs":[{"name":"matchstyle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",51,{"inputs":[{"name":"matchstyle"}],"output":{"name":"matchstyle"}}],[11,"match_only","","",51,{"inputs":[{"name":"matchstyle"}],"output":{"name":"bool"}}],[11,"quit_after_first_match","","",51,{"inputs":[{"name":"matchstyle"}],"output":{"name":"bool"}}],[11,"new","","Creates a new set of search parameters.",50,null],[11,"reset","","Resets the parameters as if no search has happened.",50,null],[11,"set_match_short","","Force match-short semantics.",50,{"inputs":[{"name":"params"},{"name":"bool"}],"output":{"name":"params"}}],[11,"alloc_captures","","",50,{"inputs":[{"name":"params"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"alloc_matches","","",50,{"inputs":[{"name":"params"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"captures","","Returns all capture slots. (There are 2 slots for every capture group.)",50,null],[11,"captures_mut","","Returns mutable capture slots. (There are 2 slots for every capture\ngroup.)",50,null],[11,"is_match","","Returns true if one or more regular expressions matched.",50,{"inputs":[{"name":"params"}],"output":{"name":"bool"}}],[11,"matches","","Returns all matches.",50,null],[11,"clone","regex::prog","",52,{"inputs":[{"name":"program"}],"output":{"name":"program"}}],[11,"new","","Creates an empty instruction sequence. Fields are given default\nvalues.",52,{"inputs":[{"name":"program"}],"output":{"name":"program"}}],[11,"skip","","If pc is an index to a no-op instruction (like Save), then return the\nnext pc that is not a no-op instruction.",52,{"inputs":[{"name":"program"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"leads_to_match","","Return true if and only if an execution engine at instruction `pc` will\nalways lead to a match.",52,{"inputs":[{"name":"program"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"needs_dotstar","","Returns true if the current configuration demands that an implicit\n`.*?` be prepended to the instruction sequence.",52,{"inputs":[{"name":"program"}],"output":{"name":"bool"}}],[11,"uses_bytes","","Returns true if this program uses Byte instructions instead of\nChar/Range instructions.",52,{"inputs":[{"name":"program"}],"output":{"name":"bool"}}],[11,"only_utf8","","Returns true if this program exclusively matches valid UTF-8 bytes.",52,{"inputs":[{"name":"program"}],"output":{"name":"bool"}}],[11,"approximate_size","","Return the approximate heap usage of this instruction sequence in\nbytes.",52,{"inputs":[{"name":"program"}],"output":{"name":"usize"}}],[11,"deref","","",52,null],[11,"fmt","","",52,{"inputs":[{"name":"program"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",53,{"inputs":[{"name":"inst"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",53,{"inputs":[{"name":"inst"}],"output":{"name":"inst"}}],[11,"fmt","","",54,{"inputs":[{"name":"instsave"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",54,{"inputs":[{"name":"instsave"}],"output":{"name":"instsave"}}],[11,"fmt","","",55,{"inputs":[{"name":"instsplit"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",55,{"inputs":[{"name":"instsplit"}],"output":{"name":"instsplit"}}],[11,"fmt","","",56,{"inputs":[{"name":"instemptylook"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",56,{"inputs":[{"name":"instemptylook"}],"output":{"name":"instemptylook"}}],[11,"eq","","",57,{"inputs":[{"name":"emptylook"},{"name":"emptylook"}],"output":{"name":"bool"}}],[11,"ne","","",57,{"inputs":[{"name":"emptylook"},{"name":"emptylook"}],"output":{"name":"bool"}}],[11,"fmt","","",57,{"inputs":[{"name":"emptylook"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",57,{"inputs":[{"name":"emptylook"}],"output":{"name":"emptylook"}}],[11,"matches","","Tests whether the pair of characters matches this zero-width\ninstruction.",56,{"inputs":[{"name":"instemptylook"},{"name":"char"},{"name":"char"}],"output":{"name":"bool"}}],[11,"fmt","","",58,{"inputs":[{"name":"instchar"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",58,{"inputs":[{"name":"instchar"}],"output":{"name":"instchar"}}],[11,"fmt","","",59,{"inputs":[{"name":"instranges"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",59,{"inputs":[{"name":"instranges"}],"output":{"name":"instranges"}}],[11,"matches","","Tests whether the given input character matches this instruction.",59,{"inputs":[{"name":"instranges"},{"name":"char"}],"output":{"name":"bool"}}],[11,"num_chars","","Return the number of distinct characters represented by all of the\nranges.",59,{"inputs":[{"name":"instranges"}],"output":{"name":"usize"}}],[11,"fmt","","",60,{"inputs":[{"name":"instbytes"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",60,{"inputs":[{"name":"instbytes"}],"output":{"name":"instbytes"}}],[11,"matches","","Returns true if and only if the given byte is in this range.",60,{"inputs":[{"name":"instbytes"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"clone","regex::re_bytes","",61,{"inputs":[{"name":"regex"}],"output":{"name":"regex"}}],[11,"fmt","","Shows the original regular expression.",61,{"inputs":[{"name":"regex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Shows the original regular expression.",61,{"inputs":[{"name":"regex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","Attempts to parse a string into a regular expression",61,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"result"}}],[11,"new","","Compiles a regular expression. Once compiled, it can be used repeatedly\nto search, split or replace text in a string.",61,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"result"}}],[11,"with_size_limit","","Compiles a regular expression with the given size limit.",61,{"inputs":[{"name":"regex"},{"name":"usize"},{"name":"str"}],"output":{"name":"result"}}],[11,"is_match","","Returns true if and only if the regex matches the string given.",61,null],[11,"find","","Returns the start and end byte range of the leftmost-first match in\n`text`. If no match exists, then `None` is returned.",61,null],[11,"find_iter","","Returns an iterator for each successive non-overlapping match in\n`text`, returning the start and end byte indices with respect to\n`text`.",61,null],[11,"captures","","Returns the capture groups corresponding to the leftmost-first\nmatch in `text`. Capture group `0` always corresponds to the entire\nmatch. If no match is found, then `None` is returned.",61,null],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture groups matched\nin `text`. This is operationally the same as `find_iter`, except it\nyields information about submatches.",61,null],[11,"split","","Returns an iterator of substrings of `text` delimited by a match of the\nregular expression. Namely, each element of the iterator corresponds to\ntext that *isn't* matched by the regular expression.",61,null],[11,"splitn","","Returns an iterator of at most `limit` substrings of `text` delimited\nby a match of the regular expression. (A `limit` of `0` will return no\nsubstrings.) Namely, each element of the iterator corresponds to text\nthat *isn't* matched by the regular expression. The remainder of the\nstring that is not split will be the last element in the iterator.",61,null],[11,"replace","","Replaces the leftmost-first match with the replacement provided. The\nreplacement can be a regular byte string (where `$N` and `$name` are\nexpanded to match capture groups) or a function that takes the matches'\n`Captures` and returns the replaced byte string.",61,null],[11,"replace_all","","Replaces all non-overlapping matches in `text` with the replacement\nprovided. This is the same as calling `replacen` with `limit` set to\n`0`.",61,null],[11,"replacen","","Replaces at most `limit` non-overlapping matches in `text` with the\nreplacement provided. If `limit` is 0, then all non-overlapping matches\nare replaced.",61,null],[11,"shortest_match","","Returns the end location of a match in the text given.",61,null],[11,"as_str","","Returns the original string of this regex.",61,{"inputs":[{"name":"regex"}],"output":{"name":"str"}}],[11,"capture_names","","Returns an iterator over the capture names.",61,{"inputs":[{"name":"regex"}],"output":{"name":"capturenames"}}],[11,"captures_len","","Returns the number of captures.",61,{"inputs":[{"name":"regex"}],"output":{"name":"usize"}}],[11,"next","","",62,{"inputs":[{"name":"findmatches"}],"output":{"name":"option"}}],[11,"next","","",63,{"inputs":[{"name":"findcaptures"}],"output":{"name":"option"}}],[11,"next","","",64,{"inputs":[{"name":"splits"}],"output":{"name":"option"}}],[11,"next","","",65,{"inputs":[{"name":"splitsn"}],"output":{"name":"option"}}],[11,"next","","",66,{"inputs":[{"name":"capturenames"}],"output":{"name":"option"}}],[11,"size_hint","","",66,null],[11,"pos","","Returns the start and end positions of the Nth capture group. Returns\n`None` if `i` is not a valid capture group or if the capture group did\nnot match anything. The positions returned are *always* byte indices\nwith respect to the original byte string matched.",67,{"inputs":[{"name":"captures"},{"name":"usize"}],"output":{"name":"option"}}],[11,"at","","Returns the matched string for the capture group `i`.  If `i` isn't\na valid capture group or didn't match anything, then `None` is\nreturned.",67,{"inputs":[{"name":"captures"},{"name":"usize"}],"output":{"name":"option"}}],[11,"name","","Returns the matched string for the capture group named `name`.  If\n`name` isn't a valid capture group or didn't match anything, then\n`None` is returned.",67,{"inputs":[{"name":"captures"},{"name":"str"}],"output":{"name":"option"}}],[11,"iter","","Creates an iterator of all the capture groups in order of appearance\nin the regular expression.",67,{"inputs":[{"name":"captures"}],"output":{"name":"subcaptures"}}],[11,"iter_pos","","Creates an iterator of all the capture group positions in order of\nappearance in the regular expression. Positions are byte indices\nin terms of the original string matched.",67,{"inputs":[{"name":"captures"}],"output":{"name":"subcapturespos"}}],[11,"iter_named","","Creates an iterator of all named groups as an tuple with the group\nname and the value. The iterator returns these values in arbitrary\norder.",67,{"inputs":[{"name":"captures"}],"output":{"name":"subcapturesnamed"}}],[11,"expand","","Expands all instances of `$name` in `text` to the corresponding capture\ngroup `name`, and writes them to the `dst` buffer given.",67,null],[11,"len","","Returns the number of captured groups.",67,{"inputs":[{"name":"captures"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if and only if there are no captured groups.",67,{"inputs":[{"name":"captures"}],"output":{"name":"bool"}}],[11,"index","","",67,null],[11,"index","","",67,null],[11,"next","","",68,{"inputs":[{"name":"subcaptures"}],"output":{"name":"option"}}],[11,"next","","",69,{"inputs":[{"name":"subcapturespos"}],"output":{"name":"option"}}],[11,"next","","",70,{"inputs":[{"name":"subcapturesnamed"}],"output":{"name":"option"}}],[11,"replace_append","","",71,null],[11,"no_expansion","","",71,{"inputs":[{"name":"noexpand"}],"output":{"name":"option"}}],[11,"clone","regex::re_unicode","",8,{"inputs":[{"name":"regex"}],"output":{"name":"regex"}}],[11,"clone","","",72,{"inputs":[{"name":"_regex"}],"output":{"name":"_regex"}}],[11,"clone","","",73,{"inputs":[{"name":"exnative"}],"output":{"name":"exnative"}}],[11,"fmt","","Shows the original regular expression.",8,{"inputs":[{"name":"regex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Shows the original regular expression.",8,{"inputs":[{"name":"regex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"regex"},{"name":"regex"}],"output":{"name":"bool"}}],[11,"from_str","","Attempts to parse a string into a regular expression",8,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"result"}}],[11,"next","","",74,{"inputs":[{"name":"capturenames"}],"output":{"name":"option"}}],[11,"size_hint","","",74,null],[11,"reg_replace","","",75,{"inputs":[{"name":"noexpand"},{"name":"captures"}],"output":{"name":"cow"}}],[11,"no_expand","","",75,{"inputs":[{"name":"noexpand"}],"output":{"name":"option"}}],[11,"next","","",76,{"inputs":[{"name":"regexsplits"}],"output":{"name":"option"}}],[11,"next","","",77,{"inputs":[{"name":"regexsplitsn"}],"output":{"name":"option"}}],[11,"next","","",78,{"inputs":[{"name":"namedgroupsiter"}],"output":{"name":"option"}}],[11,"pos","","Returns the start and end positions of the Nth capture group. Returns\n`None` if `i` is not a valid capture group or if the capture group did\nnot match anything. The positions returned are *always* byte indices\nwith respect to the original string matched.",79,{"inputs":[{"name":"captures"},{"name":"usize"}],"output":{"name":"option"}}],[11,"at","","Returns the matched string for the capture group `i`.  If `i` isn't\na valid capture group or didn't match anything, then `None` is\nreturned.",79,{"inputs":[{"name":"captures"},{"name":"usize"}],"output":{"name":"option"}}],[11,"name","","Returns the matched string for the capture group named `name`.  If\n`name` isn't a valid capture group or didn't match anything, then\n`None` is returned.",79,{"inputs":[{"name":"captures"},{"name":"str"}],"output":{"name":"option"}}],[11,"iter","","Creates an iterator of all the capture groups in order of appearance\nin the regular expression.",79,{"inputs":[{"name":"captures"}],"output":{"name":"subcaptures"}}],[11,"iter_pos","","Creates an iterator of all the capture group positions in order of\nappearance in the regular expression. Positions are byte indices\nin terms of the original string matched.",79,{"inputs":[{"name":"captures"}],"output":{"name":"subcapturespos"}}],[11,"iter_named","","Creates an iterator of all named groups as an tuple with the group\nname and the value. The iterator returns these values in arbitrary\norder.",79,{"inputs":[{"name":"captures"}],"output":{"name":"subcapturesnamed"}}],[11,"expand","","Expands all instances of `$name` in `text` to the corresponding capture\ngroup `name`.",79,{"inputs":[{"name":"captures"},{"name":"str"}],"output":{"name":"string"}}],[11,"len","","Returns the number of captured groups.",79,{"inputs":[{"name":"captures"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if and only if there are no captured groups.",79,{"inputs":[{"name":"captures"}],"output":{"name":"bool"}}],[11,"index","","",79,{"inputs":[{"name":"captures"},{"name":"usize"}],"output":{"name":"str"}}],[11,"index","","",79,{"inputs":[{"name":"captures"},{"name":"str"}],"output":{"name":"str"}}],[11,"next","","",80,{"inputs":[{"name":"subcaptures"}],"output":{"name":"option"}}],[11,"next","","",81,{"inputs":[{"name":"subcapturespos"}],"output":{"name":"option"}}],[11,"next","","",82,{"inputs":[{"name":"subcapturesnamed"}],"output":{"name":"option"}}],[11,"next","","",83,{"inputs":[{"name":"findcaptures"}],"output":{"name":"option"}}],[11,"next","","",84,{"inputs":[{"name":"findmatches"}],"output":{"name":"option"}}],[11,"clone","regex::set","",85,{"inputs":[{"name":"regexset"}],"output":{"name":"regexset"}}],[11,"new","","Create a new regex set with the given regular expressions.",85,{"inputs":[{"name":"regexset"},{"name":"i"}],"output":{"name":"result"}}],[11,"is_match","","Returns true if and only if one of the regexes in this set matches\nthe text given.",85,{"inputs":[{"name":"regexset"},{"name":"str"}],"output":{"name":"bool"}}],[11,"matches","","Returns the set of regular expressions that match in the given text.",85,{"inputs":[{"name":"regexset"},{"name":"str"}],"output":{"name":"setmatches"}}],[11,"len","","Returns the total number of regular expressions in this set.",85,{"inputs":[{"name":"regexset"}],"output":{"name":"usize"}}],[11,"fmt","","",86,{"inputs":[{"name":"setmatches"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",86,{"inputs":[{"name":"setmatches"}],"output":{"name":"setmatches"}}],[11,"matched_any","","Whether this set contains any matches.",86,{"inputs":[{"name":"setmatches"}],"output":{"name":"bool"}}],[11,"matched","","Whether the regex at the given index matched.",86,{"inputs":[{"name":"setmatches"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"len","","The total number of regexes in the set that created these matches.",86,{"inputs":[{"name":"setmatches"}],"output":{"name":"usize"}}],[11,"iter","","Returns an iterator over indexes in the regex that matched.",86,{"inputs":[{"name":"setmatches"}],"output":{"name":"setmatchesiter"}}],[11,"into_iter","","",86,null],[11,"next","","",87,{"inputs":[{"name":"setmatchesintoiter"}],"output":{"name":"option"}}],[11,"clone","","",88,{"inputs":[{"name":"setmatchesiter"}],"output":{"name":"setmatchesiter"}}],[11,"next","","",88,{"inputs":[{"name":"setmatchesiter"}],"output":{"name":"option"}}],[11,"clone","","",89,{"inputs":[{"name":"regexsetbytes"}],"output":{"name":"regexsetbytes"}}],[11,"new","","Create a new regex set with the given regular expressions.",89,{"inputs":[{"name":"regexsetbytes"},{"name":"i"}],"output":{"name":"result"}}],[11,"is_match","","Returns true if and only if one of the regexes in this set matches\nthe text given.",89,null],[11,"matches","","Returns the set of regular expressions that match in the given text.",89,null],[11,"len","","Returns the total number of regular expressions in this set.",89,{"inputs":[{"name":"regexsetbytes"}],"output":{"name":"usize"}}],[11,"fmt","","",90,{"inputs":[{"name":"setmatchesbytes"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",90,{"inputs":[{"name":"setmatchesbytes"}],"output":{"name":"setmatchesbytes"}}],[11,"matched_any","","Whether this set contains any matches.",90,{"inputs":[{"name":"setmatchesbytes"}],"output":{"name":"bool"}}],[11,"matched","","Whether the regex at the given index matched.",90,{"inputs":[{"name":"setmatchesbytes"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"len","","The total number of regexes in the set that created these matches.",90,{"inputs":[{"name":"setmatchesbytes"}],"output":{"name":"usize"}}],[11,"iter","","Returns an iterator over indexes in the regex that matched.",90,{"inputs":[{"name":"setmatchesbytes"}],"output":{"name":"setmatchesiterbytes"}}],[11,"into_iter","","",90,null],[11,"next","","",91,{"inputs":[{"name":"setmatchesintoiterbytes"}],"output":{"name":"option"}}],[11,"clone","","",92,{"inputs":[{"name":"setmatchesiterbytes"}],"output":{"name":"setmatchesiterbytes"}}],[11,"next","","",92,{"inputs":[{"name":"setmatchesiterbytes"}],"output":{"name":"option"}}],[11,"fmt","","",85,{"inputs":[{"name":"regexset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",89,{"inputs":[{"name":"regexsetbytes"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","regex::sparse","",93,{"inputs":[{"name":"sparseset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",93,{"inputs":[{"name":"sparseset"},{"name":"usize"}],"output":{"name":"sparseset"}}],[11,"len","","",93,{"inputs":[{"name":"sparseset"}],"output":{"name":"usize"}}],[11,"is_empty","","",93,{"inputs":[{"name":"sparseset"}],"output":{"name":"bool"}}],[11,"capacity","","",93,{"inputs":[{"name":"sparseset"}],"output":{"name":"usize"}}],[11,"add","","",93,null],[11,"contains_ip","","",93,{"inputs":[{"name":"sparseset"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"clear","","",93,null],[11,"deref","","",93,null],[11,"from_reader","rustc_serialize::json","Decodes a json value from an `&mut io::Read`",94,{"inputs":[{"name":"json"},{"name":"read"}],"output":{"name":"result"}}],[11,"from_str","","Decodes a json value from a string",94,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"result"}}],[11,"pretty","","Borrow this json object as a pretty object to generate a pretty\nrepresentation for it via `Display`.",94,{"inputs":[{"name":"json"}],"output":{"name":"prettyjson"}}],[11,"find","","If the Json value is an Object, returns the value associated with the provided key.\nOtherwise, returns None.",94,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"option"}}],[11,"find_path","","Attempts to get a nested Json Object for each key in `keys`.\nIf any key is found not to exist, find_path will return None.\nOtherwise, it will return the Json value associated with the final key.",94,null],[11,"search","","If the Json value is an Object, performs a depth-first search until\na value associated with the provided key is found. If no value is found\nor the Json value is not an Object, returns None.",94,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"option"}}],[11,"is_object","","Returns true if the Json value is an Object. Returns false otherwise.",94,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_object","","If the Json value is an Object, returns the associated BTreeMap.\nReturns None otherwise.",94,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_object_mut","","If the Json value is an Object, returns the associated mutable BTreeMap.\nReturns None otherwise.",94,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_array","","Returns true if the Json value is an Array. Returns false otherwise.",94,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_array","","If the Json value is an Array, returns the associated vector.\nReturns None otherwise.",94,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_array_mut","","If the Json value is an Array, returns the associated mutable vector.\nReturns None otherwise.",94,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_string","","Returns true if the Json value is a String. Returns false otherwise.",94,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_string","","If the Json value is a String, returns the associated str.\nReturns None otherwise.",94,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_number","","Returns true if the Json value is a Number. Returns false otherwise.",94,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"is_i64","","Returns true if the Json value is a i64. Returns false otherwise.",94,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"is_u64","","Returns true if the Json value is a u64. Returns false otherwise.",94,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"is_f64","","Returns true if the Json value is a f64. Returns false otherwise.",94,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_i64","","If the Json value is a number, return or cast it to a i64.\nReturns None otherwise.",94,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_u64","","If the Json value is a number, return or cast it to a u64.\nReturns None otherwise.",94,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_f64","","If the Json value is a number, return or cast it to a f64.\nReturns None otherwise.",94,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_boolean","","Returns true if the Json value is a Boolean. Returns false otherwise.",94,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_boolean","","If the Json value is a Boolean, returns the associated bool.\nReturns None otherwise.",94,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_null","","Returns true if the Json value is a Null. Returns false otherwise.",94,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_null","","If the Json value is a Null, returns ().\nReturns None otherwise.",94,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"encode","collections::string","",95,{"inputs":[{"name":"string"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",95,{"inputs":[{"name":"string"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::boxed","",96,{"inputs":[{"name":"box"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",96,{"inputs":[{"name":"box"},{"name":"d"}],"output":{"name":"result"}}],[11,"decode","","",96,{"inputs":[{"name":"box"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::rc","",97,{"inputs":[{"name":"rc"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",97,{"inputs":[{"name":"rc"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::borrow","",98,{"inputs":[{"name":"cow"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",98,{"inputs":[{"name":"cow"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::vec","",99,{"inputs":[{"name":"vec"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",99,{"inputs":[{"name":"vec"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::option","",100,{"inputs":[{"name":"option"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",100,{"inputs":[{"name":"option"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::marker","",101,{"inputs":[{"name":"phantomdata"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",101,{"inputs":[{"name":"phantomdata"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::path","",102,{"inputs":[{"name":"path"},{"name":"s"}],"output":{"name":"result"}}],[11,"encode","","",103,{"inputs":[{"name":"pathbuf"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",103,{"inputs":[{"name":"pathbuf"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::cell","",104,{"inputs":[{"name":"cell"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",104,{"inputs":[{"name":"cell"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",105,{"inputs":[{"name":"refcell"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",105,{"inputs":[{"name":"refcell"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::arc","",106,{"inputs":[{"name":"arc"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",106,{"inputs":[{"name":"arc"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::linked_list","",107,{"inputs":[{"name":"linkedlist"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",107,{"inputs":[{"name":"linkedlist"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::vec_deque","",108,{"inputs":[{"name":"vecdeque"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",108,{"inputs":[{"name":"vecdeque"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::btree::map","",109,{"inputs":[{"name":"btreemap"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",109,{"inputs":[{"name":"btreemap"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::btree::set","",110,{"inputs":[{"name":"btreeset"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",110,{"inputs":[{"name":"btreeset"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::collections::hash::map","",111,{"inputs":[{"name":"hashmap"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",111,{"inputs":[{"name":"hashmap"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::collections::hash::set","",112,{"inputs":[{"name":"hashset"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",112,{"inputs":[{"name":"hashset"},{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","rustc_serialize::base64","",113,{"inputs":[{"name":"characterset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",113,{"inputs":[{"name":"characterset"}],"output":{"name":"characterset"}}],[11,"fmt","","",114,{"inputs":[{"name":"newline"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",114,{"inputs":[{"name":"newline"}],"output":{"name":"newline"}}],[11,"fmt","","",115,{"inputs":[{"name":"config"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",115,{"inputs":[{"name":"config"}],"output":{"name":"config"}}],[11,"clone","","",116,{"inputs":[{"name":"frombase64error"}],"output":{"name":"frombase64error"}}],[11,"fmt","","",116,{"inputs":[{"name":"frombase64error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",116,{"inputs":[{"name":"frombase64error"}],"output":{"name":"str"}}],[11,"fmt","","",116,{"inputs":[{"name":"frombase64error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","rustc_serialize::hex","",117,{"inputs":[{"name":"fromhexerror"}],"output":{"name":"fromhexerror"}}],[11,"fmt","","",117,{"inputs":[{"name":"fromhexerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",117,{"inputs":[{"name":"fromhexerror"}],"output":{"name":"str"}}],[11,"fmt","","",117,{"inputs":[{"name":"fromhexerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_serialize::json","",94,{"inputs":[{"name":"json"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",94,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"option"}}],[11,"lt","","",94,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"le","","",94,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"gt","","",94,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ge","","",94,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"eq","","",94,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ne","","",94,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"clone","","",94,{"inputs":[{"name":"json"}],"output":{"name":"json"}}],[11,"eq","","",118,{"inputs":[{"name":"errorcode"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"ne","","",118,{"inputs":[{"name":"errorcode"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"clone","","",118,{"inputs":[{"name":"errorcode"}],"output":{"name":"errorcode"}}],[11,"fmt","","",119,{"inputs":[{"name":"parsererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",119,{"inputs":[{"name":"parsererror"},{"name":"parsererror"}],"output":{"name":"bool"}}],[11,"fmt","","",120,{"inputs":[{"name":"decodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",120,{"inputs":[{"name":"decodererror"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"ne","","",120,{"inputs":[{"name":"decodererror"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"fmt","","",121,{"inputs":[{"name":"encodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",121,{"inputs":[{"name":"encodererror"}],"output":{"name":"encodererror"}}],[11,"fmt","","",118,{"inputs":[{"name":"errorcode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",120,{"inputs":[{"name":"decodererror"}],"output":{"name":"str"}}],[11,"cause","","",120,{"inputs":[{"name":"decodererror"}],"output":{"name":"option"}}],[11,"fmt","","",120,{"inputs":[{"name":"decodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",120,{"inputs":[{"name":"decodererror"},{"name":"parsererror"}],"output":{"name":"decodererror"}}],[11,"description","","",119,{"inputs":[{"name":"parsererror"}],"output":{"name":"str"}}],[11,"fmt","","",119,{"inputs":[{"name":"parsererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",119,{"inputs":[{"name":"parsererror"},{"name":"error"}],"output":{"name":"parsererror"}}],[11,"description","","",121,{"inputs":[{"name":"encodererror"}],"output":{"name":"str"}}],[11,"fmt","","",121,{"inputs":[{"name":"encodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",121,{"inputs":[{"name":"encodererror"},{"name":"error"}],"output":{"name":"encodererror"}}],[11,"new_pretty","","Creates a new encoder whose output will be written in human-readable\nJSON to the specified writer",122,{"inputs":[{"name":"encoder"},{"name":"write"}],"output":{"name":"encoder"}}],[11,"new","","Creates a new encoder whose output will be written in compact\nJSON to the specified writer",122,{"inputs":[{"name":"encoder"},{"name":"write"}],"output":{"name":"encoder"}}],[11,"set_indent","","Set the number of spaces to indent for each level.\nThis is safe to set during encoding.",122,{"inputs":[{"name":"encoder"},{"name":"u32"}],"output":{"name":"result"}}],[11,"emit_nil","","",122,{"inputs":[{"name":"encoder"}],"output":{"name":"result"}}],[11,"emit_usize","","",122,{"inputs":[{"name":"encoder"},{"name":"usize"}],"output":{"name":"result"}}],[11,"emit_u64","","",122,{"inputs":[{"name":"encoder"},{"name":"u64"}],"output":{"name":"result"}}],[11,"emit_u32","","",122,{"inputs":[{"name":"encoder"},{"name":"u32"}],"output":{"name":"result"}}],[11,"emit_u16","","",122,{"inputs":[{"name":"encoder"},{"name":"u16"}],"output":{"name":"result"}}],[11,"emit_u8","","",122,{"inputs":[{"name":"encoder"},{"name":"u8"}],"output":{"name":"result"}}],[11,"emit_isize","","",122,{"inputs":[{"name":"encoder"},{"name":"isize"}],"output":{"name":"result"}}],[11,"emit_i64","","",122,{"inputs":[{"name":"encoder"},{"name":"i64"}],"output":{"name":"result"}}],[11,"emit_i32","","",122,{"inputs":[{"name":"encoder"},{"name":"i32"}],"output":{"name":"result"}}],[11,"emit_i16","","",122,{"inputs":[{"name":"encoder"},{"name":"i16"}],"output":{"name":"result"}}],[11,"emit_i8","","",122,{"inputs":[{"name":"encoder"},{"name":"i8"}],"output":{"name":"result"}}],[11,"emit_bool","","",122,{"inputs":[{"name":"encoder"},{"name":"bool"}],"output":{"name":"result"}}],[11,"emit_f64","","",122,{"inputs":[{"name":"encoder"},{"name":"f64"}],"output":{"name":"result"}}],[11,"emit_f32","","",122,{"inputs":[{"name":"encoder"},{"name":"f32"}],"output":{"name":"result"}}],[11,"emit_char","","",122,{"inputs":[{"name":"encoder"},{"name":"char"}],"output":{"name":"result"}}],[11,"emit_str","","",122,{"inputs":[{"name":"encoder"},{"name":"str"}],"output":{"name":"result"}}],[11,"emit_enum","","",122,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_enum_variant","","",122,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_enum_variant_arg","","",122,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_enum_struct_variant","","",122,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_enum_struct_variant_field","","",122,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_struct","","",122,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_struct_field","","",122,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_tuple","","",122,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_tuple_arg","","",122,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_tuple_struct","","",122,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_tuple_struct_arg","","",122,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_option","","",122,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_option_none","","",122,{"inputs":[{"name":"encoder"}],"output":{"name":"result"}}],[11,"emit_option_some","","",122,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_seq","","",122,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_seq_elt","","",122,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_map","","",122,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_map_elt_key","","",122,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_map_elt_val","","",122,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"encode","","",94,{"inputs":[{"name":"json"},{"name":"s"}],"output":{"name":"result"}}],[11,"index","","",94,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"json"}}],[11,"index","","",94,{"inputs":[{"name":"json"},{"name":"usize"}],"output":{"name":"json"}}],[11,"fmt","","",123,{"inputs":[{"name":"jsonevent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",123,{"inputs":[{"name":"jsonevent"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"ne","","",123,{"inputs":[{"name":"jsonevent"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"fmt","","",124,{"inputs":[{"name":"parserstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",124,{"inputs":[{"name":"parserstate"},{"name":"parserstate"}],"output":{"name":"bool"}}],[11,"ne","","",124,{"inputs":[{"name":"parserstate"},{"name":"parserstate"}],"output":{"name":"bool"}}],[11,"fmt","","",125,{"inputs":[{"name":"stackelement"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",125,{"inputs":[{"name":"stackelement"}],"output":{"name":"stackelement"}}],[11,"eq","","",125,{"inputs":[{"name":"stackelement"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"ne","","",125,{"inputs":[{"name":"stackelement"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"fmt","","",126,{"inputs":[{"name":"internalstackelement"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",126,{"inputs":[{"name":"internalstackelement"}],"output":{"name":"internalstackelement"}}],[11,"eq","","",126,{"inputs":[{"name":"internalstackelement"},{"name":"internalstackelement"}],"output":{"name":"bool"}}],[11,"ne","","",126,{"inputs":[{"name":"internalstackelement"},{"name":"internalstackelement"}],"output":{"name":"bool"}}],[11,"new","","",127,{"inputs":[{"name":"stack"}],"output":{"name":"stack"}}],[11,"len","","Returns The number of elements in the Stack.",127,{"inputs":[{"name":"stack"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the stack is empty.",127,{"inputs":[{"name":"stack"}],"output":{"name":"bool"}}],[11,"get","","Provides access to the StackElement at a given index.\nlower indices are at the bottom of the stack while higher indices are\nat the top.",127,{"inputs":[{"name":"stack"},{"name":"usize"}],"output":{"name":"stackelement"}}],[11,"is_equal_to","","Compares this stack with an array of StackElements.",127,null],[11,"starts_with","","Returns true if the bottom-most elements of this stack are the same as\nthe ones passed as parameter.",127,null],[11,"ends_with","","Returns true if the top-most elements of this stack are the same as\nthe ones passed as parameter.",127,null],[11,"top","","Returns the top-most element (if any).",127,{"inputs":[{"name":"stack"}],"output":{"name":"option"}}],[11,"next","","",128,{"inputs":[{"name":"parser"}],"output":{"name":"option"}}],[11,"new","","Creates the JSON parser.",128,{"inputs":[{"name":"parser"},{"name":"t"}],"output":{"name":"parser"}}],[11,"stack","","Provides access to the current position in the logical structure of the\nJSON stream.",128,{"inputs":[{"name":"parser"}],"output":{"name":"stack"}}],[11,"new","","Create a JSON Builder.",129,{"inputs":[{"name":"builder"},{"name":"t"}],"output":{"name":"builder"}}],[11,"build","","",129,{"inputs":[{"name":"builder"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder instance for decoding the specified JSON value.",130,{"inputs":[{"name":"decoder"},{"name":"json"}],"output":{"name":"decoder"}}],[11,"read_nil","","",130,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_usize","","",130,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_u8","","",130,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_u16","","",130,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_u32","","",130,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_u64","","",130,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_isize","","",130,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_i8","","",130,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_i16","","",130,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_i32","","",130,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_i64","","",130,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_f32","","",130,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_f64","","",130,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_bool","","",130,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_char","","",130,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_str","","",130,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_enum","","",130,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_enum_variant","","",130,null],[11,"read_enum_variant_arg","","",130,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_enum_struct_variant","","",130,null],[11,"read_enum_struct_variant_field","","",130,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_struct","","",130,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_struct_field","","",130,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_tuple","","",130,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_tuple_arg","","",130,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_tuple_struct","","",130,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_tuple_struct_arg","","",130,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_option","","",130,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_seq","","",130,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_seq_elt","","",130,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_map","","",130,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_map_elt_key","","",130,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_map_elt_val","","",130,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"error","","",130,{"inputs":[{"name":"decoder"},{"name":"str"}],"output":{"name":"decodererror"}}],[11,"to_json","","",94,{"inputs":[{"name":"json"}],"output":{"name":"json"}}],[11,"to_json","collections::string","",95,{"inputs":[{"name":"string"}],"output":{"name":"json"}}],[11,"to_json","collections::vec","",99,{"inputs":[{"name":"vec"}],"output":{"name":"json"}}],[11,"to_json","collections::btree::map","",109,{"inputs":[{"name":"btreemap"}],"output":{"name":"json"}}],[11,"to_json","std::collections::hash::map","",111,{"inputs":[{"name":"hashmap"}],"output":{"name":"json"}}],[11,"to_json","core::option","",100,{"inputs":[{"name":"option"}],"output":{"name":"json"}}],[11,"write_str","rustc_serialize::json","",131,{"inputs":[{"name":"formatshim"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",94,{"inputs":[{"name":"json"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",132,{"inputs":[{"name":"prettyjson"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",133,{"inputs":[{"name":"asjson"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"indent","","Set the indentation level for the emitted JSON",134,{"inputs":[{"name":"asprettyjson"},{"name":"u32"}],"output":{"name":"asprettyjson"}}],[11,"fmt","","Encodes a json value into a string",134,{"inputs":[{"name":"asprettyjson"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",94,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","handlebars","",135,{"inputs":[{"name":"context"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"null","","Create a context with null data",135,{"inputs":[{"name":"context"}],"output":{"name":"context"}}],[11,"wraps","","Create a context with given data",135,{"inputs":[{"name":"context"},{"name":"t"}],"output":{"name":"context"}}],[11,"extend","","Extend current context with another JSON object\nIf current context is a JSON object, it's identical to a normal merge\nOtherwise, the current value will be stored in new JSON object with key `this`, and merged\nkeys are also available.",135,{"inputs":[{"name":"context"},{"name":"object"}],"output":{"name":"context"}}],[11,"navigate","","Navigate the context with base path and relative path\nTypically you will set base path to `RenderContext.get_path()`\nand set relative path to helper argument or so.",135,{"inputs":[{"name":"context"},{"name":"str"},{"name":"str"}],"output":{"name":"json"}}],[11,"render","rustc_serialize::json","",94,{"inputs":[{"name":"json"}],"output":{"name":"string"}}],[11,"is_truthy","","",94,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[6,"EscapeFn","handlebars","This type represents an *escape fn*, that is a function who's purpose it is\nto escape potentially problematic characters in a string.",null,null],[8,"Renderable","","",null,null],[10,"render","","",136,{"inputs":[{"name":"renderable"},{"name":"context"},{"name":"registry"},{"name":"rendercontext"}],"output":{"name":"result"}}],[8,"HelperDef","","Helper Definition",null,null],[10,"call","","",137,{"inputs":[{"name":"helperdef"},{"name":"context"},{"name":"helper"},{"name":"registry"},{"name":"rendercontext"}],"output":{"name":"result"}}],[8,"JsonRender","","",null,null],[10,"render","","",138,{"inputs":[{"name":"jsonrender"}],"output":{"name":"string"}}],[8,"JsonTruthy","","",null,null],[10,"is_truthy","","",139,{"inputs":[{"name":"jsontruthy"}],"output":{"name":"bool"}}]],"paths":[[3,"Template"],[3,"RenderError"],[3,"RenderContext"],[4,"TemplateError"],[4,"TemplateFileError"],[4,"TemplateRenderError"],[3,"Registry"],[3,"Helper"],[3,"Regex"],[3,"Backtrack"],[3,"BacktrackCache"],[4,"Job"],[3,"Patch"],[3,"Compiler"],[4,"Hole"],[4,"MaybeInst"],[4,"InstHole"],[3,"SuffixCacheEntry"],[3,"SuffixCacheKey"],[3,"DfaCache"],[3,"Dfa"],[4,"DfaResult"],[3,"State"],[3,"StateKey"],[3,"Byte"],[3,"Flags"],[4,"Error"],[3,"Exec"],[3,"ExecBuilder"],[4,"MatchEngine"],[3,"ProgramPool"],[3,"Pool"],[3,"RefGuard"],[3,"Guard"],[3,"Stack"],[3,"SpinLock"],[3,"ProgramCache"],[3,"InputAt"],[3,"CharInput"],[3,"ByteInput"],[3,"Char"],[3,"LiteralSearcher"],[4,"Matcher"],[4,"LiteralIter"],[3,"SingleByteSet"],[3,"SingleSearch"],[3,"Nfa"],[3,"NfaCache"],[3,"Threads"],[4,"FollowEpsilon"],[3,"Params"],[4,"MatchStyle"],[3,"Program"],[4,"Inst"],[3,"InstSave"],[3,"InstSplit"],[3,"InstEmptyLook"],[4,"EmptyLook"],[3,"InstChar"],[3,"InstRanges"],[3,"InstBytes"],[3,"Regex"],[3,"FindMatches"],[3,"FindCaptures"],[3,"Splits"],[3,"SplitsN"],[3,"CaptureNames"],[3,"Captures"],[3,"SubCaptures"],[3,"SubCapturesPos"],[3,"SubCapturesNamed"],[3,"NoExpand"],[4,"_Regex"],[3,"ExNative"],[3,"CaptureNames"],[3,"NoExpand"],[3,"RegexSplits"],[3,"RegexSplitsN"],[4,"NamedGroupsIter"],[3,"Captures"],[3,"SubCaptures"],[3,"SubCapturesPos"],[3,"SubCapturesNamed"],[3,"FindCaptures"],[3,"FindMatches"],[3,"RegexSet"],[3,"SetMatches"],[3,"SetMatchesIntoIter"],[3,"SetMatchesIter"],[3,"RegexSetBytes"],[3,"SetMatchesBytes"],[3,"SetMatchesIntoIterBytes"],[3,"SetMatchesIterBytes"],[3,"SparseSet"],[4,"Json"],[3,"String"],[3,"Box"],[3,"Rc"],[4,"Cow"],[3,"Vec"],[4,"Option"],[3,"PhantomData"],[3,"Path"],[3,"PathBuf"],[3,"Cell"],[3,"RefCell"],[3,"Arc"],[3,"LinkedList"],[3,"VecDeque"],[3,"BTreeMap"],[3,"BTreeSet"],[3,"HashMap"],[3,"HashSet"],[4,"CharacterSet"],[4,"Newline"],[3,"Config"],[4,"FromBase64Error"],[4,"FromHexError"],[4,"ErrorCode"],[4,"ParserError"],[4,"DecoderError"],[4,"EncoderError"],[3,"Encoder"],[4,"JsonEvent"],[4,"ParserState"],[4,"StackElement"],[4,"InternalStackElement"],[3,"Stack"],[3,"Parser"],[3,"Builder"],[3,"Decoder"],[3,"FormatShim"],[3,"PrettyJson"],[3,"AsJson"],[3,"AsPrettyJson"],[3,"Context"],[8,"Renderable"],[8,"HelperDef"],[8,"JsonRender"],[8,"JsonTruthy"]]};
searchIndex['num'] = {"items":[[0,"","num","A collection of numeric types and traits for Rust.",null,null],[5,"zero","","Returns the additive identity, `0`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"abs","","Computes the absolute value.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"pow","","Raises a value to the power of exp, using exponentiation by squaring.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[0,"bigint","","A Big integer (signed version: `BigInt`, unsigned version: `BigUint`).",null,null],[3,"BigUint","num::bigint","A big unsigned integer type.",null,null],[3,"BigInt","","A big signed integer type.",null,null],[4,"Sign","","A Sign is a `BigInt`'s composing element.",null,null],[13,"Minus","","",0,null],[13,"NoSign","","",0,null],[13,"Plus","","",0,null],[4,"ParseBigIntError","","",null,null],[13,"ParseInt","","",1,null],[13,"Other","","",1,null],[0,"big_digit","","",null,null],[5,"from_doublebigdigit","num::bigint::big_digit","Split one `DoubleBigDigit` into two `BigDigit`s.",null,null],[5,"to_doublebigdigit","","Join two `BigDigit`s into one `DoubleBigDigit`",null,{"inputs":[{"name":"bigdigit"},{"name":"bigdigit"}],"output":{"name":"doublebigdigit"}}],[17,"BITS","","",null,null],[17,"BASE","","",null,null],[6,"BigDigit","num::bigint","A `BigDigit` is a `BigUint`'s composing element.",null,null],[6,"DoubleBigDigit","","A `DoubleBigDigit` is the internal type used to do the computations.  Its\nsize is the double of the size of `BigDigit`.",null,null],[17,"ZERO_BIG_DIGIT","","",null,null],[8,"ToBigUint","","A generic trait for converting a value to a `BigUint`.",null,null],[10,"to_biguint","","Converts the value of `self` to a `BigUint`.",2,{"inputs":[{"name":"tobiguint"}],"output":{"name":"option"}}],[8,"ToBigInt","","A generic trait for converting a value to a `BigInt`.",null,null],[10,"to_bigint","","Converts the value of `self` to a `BigInt`.",3,{"inputs":[{"name":"tobigint"}],"output":{"name":"option"}}],[8,"RandBigInt","","",null,null],[10,"gen_biguint","","Generate a random `BigUint` of the given bit size.",4,{"inputs":[{"name":"randbigint"},{"name":"usize"}],"output":{"name":"biguint"}}],[10,"gen_bigint","","Generate a random BigInt of the given bit size.",4,{"inputs":[{"name":"randbigint"},{"name":"usize"}],"output":{"name":"bigint"}}],[10,"gen_biguint_below","","Generate a random `BigUint` less than the given bound. Fails\nwhen the bound is zero.",4,{"inputs":[{"name":"randbigint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[10,"gen_biguint_range","","Generate a random `BigUint` within the given range. The lower\nbound is inclusive; the upper bound is exclusive. Fails when\nthe upper bound is not greater than the lower bound.",4,{"inputs":[{"name":"randbigint"},{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[10,"gen_bigint_range","","Generate a random `BigInt` within the given range. The lower\nbound is inclusive; the upper bound is exclusive. Fails when\nthe upper bound is not greater than the lower bound.",4,{"inputs":[{"name":"randbigint"},{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"hash","","",5,null],[11,"fmt","","",5,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"decode","","",5,{"inputs":[{"name":"biguint"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",5,{"inputs":[{"name":"biguint"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"cmp","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"ordering"}}],[11,"default","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"fmt","","",5,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",5,{"inputs":[{"name":"biguint"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_str_radix","","Creates and initializes a `BigUint`.",5,{"inputs":[{"name":"biguint"},{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"bitand","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitand","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitxor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitxor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"shl","","",5,{"inputs":[{"name":"biguint"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"shr","","",5,{"inputs":[{"name":"biguint"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"zero","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"is_zero","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"bool"}}],[11,"one","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"add","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"add","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"neg","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"checked_add","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_sub","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_mul","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_div","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"div_rem","","",5,null],[11,"div_floor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mod_floor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div_mod_floor","","",5,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",5,{"inputs":[{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",5,{"inputs":[{"name":"biguint"}],"output":{"name":"bool"}}],[11,"to_i64","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"to_u64","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"to_f32","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"to_f64","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"from_i64","","",5,{"inputs":[{"name":"biguint"},{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",5,{"inputs":[{"name":"biguint"},{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f64","","",5,{"inputs":[{"name":"biguint"},{"name":"f64"}],"output":{"name":"option"}}],[11,"from","","",5,{"inputs":[{"name":"biguint"},{"name":"u64"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"biguint"},{"name":"u8"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"biguint"},{"name":"u16"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"biguint"},{"name":"u32"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"biguint"},{"name":"usize"}],"output":{"name":"self"}}],[11,"to_biguint","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_biguint","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"new","","Creates and initializes a `BigUint`.",5,{"inputs":[{"name":"biguint"},{"name":"vec"}],"output":{"name":"biguint"}}],[11,"from_slice","","Creates and initializes a `BigUint`.",5,null],[11,"from_bytes_be","","Creates and initializes a `BigUint`.",5,null],[11,"from_bytes_le","","Creates and initializes a `BigUint`.",5,null],[11,"to_bytes_le","","Returns the byte representation of the `BigUint` in little-endian byte order.",5,{"inputs":[{"name":"biguint"}],"output":{"name":"vec"}}],[11,"to_bytes_be","","Returns the byte representation of the `BigUint` in big-endian byte order.",5,{"inputs":[{"name":"biguint"}],"output":{"name":"vec"}}],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix.\n`radix` must be in the range `[2, 36]`.",5,{"inputs":[{"name":"biguint"},{"name":"u32"}],"output":{"name":"string"}}],[11,"parse_bytes","","Creates and initializes a `BigUint`.",5,null],[11,"bits","","Determines the fewest bits necessary to express the `BigUint`.",5,{"inputs":[{"name":"biguint"}],"output":{"name":"usize"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"sign"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"sign"}],"output":{"name":"sign"}}],[11,"cmp","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"decode","","",0,{"inputs":[{"name":"sign"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",0,{"inputs":[{"name":"sign"},{"name":"__s"}],"output":{"name":"result"}}],[11,"neg","","Negate Sign value.",0,{"inputs":[{"name":"sign"}],"output":{"name":"sign"}}],[11,"mul","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"sign"}}],[11,"hash","","",6,null],[11,"fmt","","",6,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"decode","","",6,{"inputs":[{"name":"bigint"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",6,{"inputs":[{"name":"bigint"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"cmp","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"ordering"}}],[11,"default","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"fmt","","",6,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",6,{"inputs":[{"name":"bigint"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_str_radix","","Creates and initializes a BigInt.",6,{"inputs":[{"name":"bigint"},{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"shl","","",6,{"inputs":[{"name":"bigint"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"shr","","",6,{"inputs":[{"name":"bigint"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"zero","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"is_zero","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"one","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"abs","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"abs_sub","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"signum","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"is_positive","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_negative","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"add","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"add","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"neg","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"checked_add","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_sub","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_mul","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_div","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"div_rem","","",6,null],[11,"div_floor","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mod_floor","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div_mod_floor","","",6,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"to_i64","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_u64","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_f32","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_f64","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"from_i64","","",6,{"inputs":[{"name":"bigint"},{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",6,{"inputs":[{"name":"bigint"},{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f64","","",6,{"inputs":[{"name":"bigint"},{"name":"f64"}],"output":{"name":"option"}}],[11,"from","","",6,{"inputs":[{"name":"bigint"},{"name":"i64"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"bigint"},{"name":"i8"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"bigint"},{"name":"i16"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"bigint"},{"name":"i32"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"bigint"},{"name":"isize"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"bigint"},{"name":"u64"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"bigint"},{"name":"u8"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"bigint"},{"name":"u16"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"bigint"},{"name":"u32"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"bigint"},{"name":"usize"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"bigint"},{"name":"biguint"}],"output":{"name":"self"}}],[11,"to_bigint","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_bigint","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"new","","Creates and initializes a BigInt.",6,{"inputs":[{"name":"bigint"},{"name":"sign"},{"name":"vec"}],"output":{"name":"bigint"}}],[11,"from_biguint","","Creates and initializes a `BigInt`.",6,{"inputs":[{"name":"bigint"},{"name":"sign"},{"name":"biguint"}],"output":{"name":"bigint"}}],[11,"from_slice","","Creates and initializes a `BigInt`.",6,null],[11,"from_bytes_be","","Creates and initializes a `BigInt`.",6,null],[11,"from_bytes_le","","Creates and initializes a `BigInt`.",6,null],[11,"to_bytes_le","","Returns the sign and the byte representation of the `BigInt` in little-endian byte order.",6,null],[11,"to_bytes_be","","Returns the sign and the byte representation of the `BigInt` in big-endian byte order.",6,null],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix.\n`radix` must be in the range `[2, 36]`.",6,{"inputs":[{"name":"bigint"},{"name":"u32"}],"output":{"name":"string"}}],[11,"sign","","Returns the sign of the `BigInt` as a `Sign`.",6,{"inputs":[{"name":"bigint"}],"output":{"name":"sign"}}],[11,"parse_bytes","","Creates and initializes a `BigInt`.",6,null],[11,"to_biguint","","Converts this `BigInt` into a `BigUint`, if it's not negative.",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_add","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_sub","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_mul","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_div","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"eq","","",1,{"inputs":[{"name":"parsebiginterror"},{"name":"parsebiginterror"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"parsebiginterror"},{"name":"parsebiginterror"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"parsebiginterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"parsebiginterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"parsebiginterror"}],"output":{"name":"str"}}],[11,"from","","",1,{"inputs":[{"name":"parsebiginterror"},{"name":"parseinterror"}],"output":{"name":"parsebiginterror"}}],[0,"complex","num","Complex numbers.",null,null],[3,"Complex","num::complex","A complex number in Cartesian form.",null,null],[12,"re","","Real portion of the complex number",7,null],[12,"im","","Imaginary portion of the complex number",7,null],[6,"Complex32","","",null,null],[6,"Complex64","","",null,null],[11,"fmt","","",7,{"inputs":[{"name":"complex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",7,null],[11,"clone","","",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"eq","","",7,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"bool"}}],[11,"decode","","",7,{"inputs":[{"name":"complex"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",7,{"inputs":[{"name":"complex"},{"name":"__s"}],"output":{"name":"result"}}],[11,"new","","Create a new Complex",7,{"inputs":[{"name":"complex"},{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"i","","Returns imaginary unit",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"norm_sqr","","Returns the square of the norm (since `T` doesn't necessarily\nhave a sqrt function), i.e. `re^2 + im^2`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"t"}}],[11,"scale","","Multiplies `self` by the scalar `t`.",7,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"unscale","","Divides `self` by the scalar `t`.",7,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"conj","","Returns the complex conjugate. i.e. `re - i im`",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"inv","","Returns `1/self`",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"norm","","Calculate |self|",7,{"inputs":[{"name":"complex"}],"output":{"name":"t"}}],[11,"arg","","Calculate the principal Arg of self.",7,{"inputs":[{"name":"complex"}],"output":{"name":"t"}}],[11,"to_polar","","Convert to polar form (r, theta), such that `self = r * exp(i\n* theta)`",7,null],[11,"from_polar","","Convert a polar representation into a complex number.",7,{"inputs":[{"name":"complex"},{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"exp","","Computes `e^(self)`, where `e` is the base of the natural logarithm.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"ln","","Computes the principal value of natural logarithm of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"sqrt","","Computes the principal value of the square root of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"sin","","Computes the sine of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"cos","","Computes the cosine of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"tan","","Computes the tangent of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"asin","","Computes the principal value of the inverse sine of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"acos","","Computes the principal value of the inverse cosine of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"atan","","Computes the principal value of the inverse tangent of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"sinh","","Computes the hyperbolic sine of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"cosh","","Computes the hyperbolic cosine of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"tanh","","Computes the hyperbolic tangent of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"asinh","","Computes the principal value of inverse hyperbolic sine of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"acosh","","Computes the principal value of inverse hyperbolic cosine of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"atanh","","Computes the principal value of inverse hyperbolic tangent of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"is_nan","","Checks if the given complex number is NaN",7,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"is_infinite","","Checks if the given complex number is infinite",7,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"is_finite","","Checks if the given complex number is finite",7,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"is_normal","","Checks if the given complex number is normal",7,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"from","","",7,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"from","","",7,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"add","","",7,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"add","","",7,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"sub","","",7,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"sub","","",7,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"mul","","",7,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"mul","","",7,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"div","","",7,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"div","","",7,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"neg","","",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"add","","",7,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"sub","","",7,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"mul","","",7,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"div","","",7,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"add","","",7,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"sub","","",7,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"mul","","",7,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"div","","",7,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"zero","","",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"is_zero","","",7,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"one","","",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"fmt","","",7,{"inputs":[{"name":"complex"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"integer","num","Integer trait and functions.",null,null],[5,"div_rem","num::integer","Simultaneous integer division and modulus",null,null],[5,"div_floor","","Floored integer division",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"mod_floor","","Floored integer modulus",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"div_mod_floor","","Simultaneous floored integer division and modulus",null,null],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`. The\nresult is always positive.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[8,"Integer","","",null,null],[10,"div_floor","","Floored integer division.",8,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"mod_floor","","Floored integer modulo, satisfying:",8,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"gcd","","Greatest Common Divisor (GCD).",8,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"lcm","","Lowest Common Multiple (LCM).",8,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"divides","","Deprecated, use `is_multiple_of` instead.",8,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_multiple_of","","Returns `true` if `other` is a multiple of `self`.",8,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_even","","Returns `true` if the number is even.",8,{"inputs":[{"name":"integer"}],"output":{"name":"bool"}}],[10,"is_odd","","Returns `true` if the number is odd.",8,{"inputs":[{"name":"integer"}],"output":{"name":"bool"}}],[10,"div_rem","","Simultaneous truncated integer division and modulus.\nReturns `(quotient, remainder)`.",8,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus.\nReturns `(quotient, remainder)`.",8,null],[0,"iter","num","External iterators for generic mathematics",null,null],[3,"Range","num::iter","An iterator over the range [start, stop)",null,null],[3,"RangeInclusive","","An iterator over the range [start, stop]",null,null],[3,"RangeStep","","An iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,null],[3,"RangeStepInclusive","","An iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting\nat start (inclusive), and ending at stop (exclusive)).",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"range"}}],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"rangeinclusive"}}],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestep"}}],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestepinclusive"}}],[11,"clone","","",9,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"next","","",9,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"size_hint","","",9,null],[11,"next_back","","",9,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"clone","","",10,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"rangeinclusive"}}],[11,"next","","",10,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"size_hint","","",10,null],[11,"next_back","","",10,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"clone","","",11,{"inputs":[{"name":"rangestep"}],"output":{"name":"rangestep"}}],[11,"next","","",11,{"inputs":[{"name":"rangestep"}],"output":{"name":"option"}}],[11,"clone","","",12,{"inputs":[{"name":"rangestepinclusive"}],"output":{"name":"rangestepinclusive"}}],[11,"next","","",12,{"inputs":[{"name":"rangestepinclusive"}],"output":{"name":"option"}}],[0,"traits","num","Numeric traits for generic mathematics",null,null],[3,"ParseFloatError","num::traits","",null,null],[12,"kind","","",13,null],[4,"FloatErrorKind","","",null,null],[13,"Empty","","",14,null],[13,"Invalid","","",14,null],[5,"cast","","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"Num","","The base trait for numeric types",null,null],[16,"FromStrRadixErr","","Parse error for `from_str_radix`",15,null],[10,"from_str_radix","","Convert from a string and radix <= 36.",15,{"inputs":[{"name":"num"},{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",16,{"inputs":[{"name":"zero"}],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",16,{"inputs":[{"name":"zero"}],"output":{"name":"bool"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",17,{"inputs":[{"name":"one"}],"output":{"name":"self"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",18,{"inputs":[{"name":"signed"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",18,{"inputs":[{"name":"signed"},{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns the sign of the number.",18,{"inputs":[{"name":"signed"}],"output":{"name":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",18,{"inputs":[{"name":"signed"}],"output":{"name":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",18,{"inputs":[{"name":"signed"}],"output":{"name":"bool"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[8,"Bounded","","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",19,{"inputs":[{"name":"bounded"}],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",19,{"inputs":[{"name":"bounded"}],"output":{"name":"self"}}],[8,"Saturating","","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator.\nReturns a+b, saturating at the numeric bounds instead of overflowing.",20,{"inputs":[{"name":"saturating"},{"name":"self"}],"output":{"name":"self"}}],[10,"saturating_sub","","Saturating subtraction operator.\nReturns a-b, saturating at the numeric bounds instead of overflowing.",20,{"inputs":[{"name":"saturating"},{"name":"self"}],"output":{"name":"self"}}],[8,"CheckedAdd","","Performs addition that returns `None` instead of wrapping around on\noverflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is\nreturned.",21,{"inputs":[{"name":"checkedadd"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens,\n`None` is returned.",22,{"inputs":[{"name":"checkedsub"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or\noverflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow\nor overflow happens, `None` is returned.",23,{"inputs":[{"name":"checkedmul"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of\nwrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by\nzero. If any of that happens, `None` is returned.",24,{"inputs":[{"name":"checkeddiv"},{"name":"self"}],"output":{"name":"option"}}],[8,"PrimInt","","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",25,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",25,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation\nof `self`.",25,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation\nof `self`.",25,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping\nthe truncated bits to the end of the resulting integer.",25,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping\nthe truncated bits to the beginning of the resulting integer.",25,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",25,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying\nthe \"sign bit\" in the most significant bits even for unsigned types.",25,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",25,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling\nzeros in the most significant bits.",25,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",25,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"from_be","","Convert an integer from big endian to the target's endianness.",25,{"inputs":[{"name":"primint"},{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target's endianness.",25,{"inputs":[{"name":"primint"},{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target's endianness.",25,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"to_le","","Convert `self` to little endian from the target's endianness.",25,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",25,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",26,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",26,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",26,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",26,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",26,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",26,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",26,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",26,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",26,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",26,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",26,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",26,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",27,{"inputs":[{"name":"fromprimitive"},{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",27,{"inputs":[{"name":"fromprimitive"},{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",27,{"inputs":[{"name":"fromprimitive"},{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",27,{"inputs":[{"name":"fromprimitive"},{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",27,{"inputs":[{"name":"fromprimitive"},{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",27,{"inputs":[{"name":"fromprimitive"},{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",27,{"inputs":[{"name":"fromprimitive"},{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",27,{"inputs":[{"name":"fromprimitive"},{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",27,{"inputs":[{"name":"fromprimitive"},{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",27,{"inputs":[{"name":"fromprimitive"},{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",27,{"inputs":[{"name":"fromprimitive"},{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",27,{"inputs":[{"name":"fromprimitive"},{"name":"f64"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into\na primitive via the `ToPrimitive` trait.",28,{"inputs":[{"name":"numcast"},{"name":"t"}],"output":{"name":"option"}}],[8,"Float","","",null,null],[10,"nan","","Returns the `NaN` value.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",29,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and\nfalse otherwise.",29,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",29,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite,\n[subnormal][subnormal], or `NaN`.",29,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property\nis going to be tested, it is generally faster to use the specific\npredicate instead.",29,{"inputs":[{"name":"float"}],"output":{"name":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from\n`0.0`.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"trunc","","Return the integer part of a number.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"fract","","Returns the fractional part of a number.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the\nnumber is `Float::nan()`.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and\n`Float::infinity()`.",29,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and\n`Float::neg_infinity()`.",29,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding\nerror. This produces a more accurate result with better performance than\na separate multiplication operation followed by an add.",29,{"inputs":[{"name":"float"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"powi","","Raise a number to an integer power.",29,{"inputs":[{"name":"float"},{"name":"i32"}],"output":{"name":"self"}}],[10,"powf","","Raise a number to a floating point power.",29,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sqrt","","Take the square root of a number.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"exp2","","Returns `2^(self)`.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",29,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"max","","Returns the maximum of the two numbers.",29,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","Returns the minimum of the two numbers.",29,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",29,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"cbrt","","Take the cubic root of a number.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given\nlegs of length `x` and `y`.",29,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in\nthe range [-pi/2, pi/2] or NaN if the number is outside the range\n[-1, 1].",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in\nthe range [0, pi] or NaN if the number is outside the range\n[-1, 1].",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the\nrange [-pi/2, pi/2];",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",29,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns\n`(sin(x), cos(x))`.",29,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the\nnumber is close to zero.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if\nthe operations were performed separately.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"sinh","","Hyperbolic sine function.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"cosh","","Hyperbolic cosine function.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"tanh","","Hyperbolic tangent function.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively.\nThe original number can be recovered by `sign * mantissa * 2 ^ exponent`.\nThe floating point encoding is documented in the [Reference][floating-point].",29,null],[11,"fmt","","",13,{"inputs":[{"name":"parsefloaterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",14,{"inputs":[{"name":"floaterrorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"rational","num","Rational numbers",null,null],[3,"Ratio","num::rational","Represents the ratio between 2 numbers.",null,null],[3,"ParseRatioError","","",null,null],[6,"Rational","","Alias for a `Ratio` of machine-sized integers.",null,null],[6,"Rational32","","",null,null],[6,"Rational64","","",null,null],[6,"BigRational","","Alias for arbitrary precision rationals.",null,null],[11,"fmt","","",30,{"inputs":[{"name":"ratio"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",30,null],[11,"clone","","",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"decode","","",30,{"inputs":[{"name":"ratio"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",30,{"inputs":[{"name":"ratio"},{"name":"__s"}],"output":{"name":"result"}}],[11,"from_integer","","Creates a ratio representing the integer `t`.",30,{"inputs":[{"name":"ratio"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"new_raw","","Creates a ratio without checking for `denom == 0` or reducing.",30,{"inputs":[{"name":"ratio"},{"name":"t"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"new","","Create a new Ratio. Fails if `denom == 0`.",30,{"inputs":[{"name":"ratio"},{"name":"t"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"to_integer","","Converts to an integer.",30,{"inputs":[{"name":"ratio"}],"output":{"name":"t"}}],[11,"numer","","Gets an immutable reference to the numerator.",30,{"inputs":[{"name":"ratio"}],"output":{"name":"t"}}],[11,"denom","","Gets an immutable reference to the denominator.",30,{"inputs":[{"name":"ratio"}],"output":{"name":"t"}}],[11,"is_integer","","Returns true if the rational number is an integer (denominator is 1).",30,{"inputs":[{"name":"ratio"}],"output":{"name":"bool"}}],[11,"reduced","","Returns a `reduce`d copy of self.",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"recip","","Returns the reciprocal.",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"floor","","Rounds towards minus infinity.",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"ceil","","Rounds towards plus infinity.",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"round","","Rounds to the nearest integer. Rounds half-way cases away from zero.",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"trunc","","Rounds towards zero.",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"fract","","Returns the fractional part of a number.",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"pow","","Raises the ratio to the power of an exponent",30,{"inputs":[{"name":"ratio"},{"name":"i32"}],"output":{"name":"ratio"}}],[11,"from_float","","Converts a float into a rational number.",30,{"inputs":[{"name":"ratio"},{"name":"t"}],"output":{"name":"option"}}],[11,"eq","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"bool"}}],[11,"lt","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"bool"}}],[11,"gt","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"bool"}}],[11,"le","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"bool"}}],[11,"ge","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"option"}}],[11,"cmp","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ordering"}}],[11,"mul","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"mul","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"div","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"div","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"add","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"add","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"sub","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"sub","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"rem","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"rem","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"neg","","",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"zero","","",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"is_zero","","",30,{"inputs":[{"name":"ratio"}],"output":{"name":"bool"}}],[11,"one","","",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"from_str_radix","","Parses `numer/denom` where the numbers are in base `radix`.",30,{"inputs":[{"name":"ratio"},{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"abs","","",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"abs_sub","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"signum","","",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"is_positive","","",30,{"inputs":[{"name":"ratio"}],"output":{"name":"bool"}}],[11,"is_negative","","",30,{"inputs":[{"name":"ratio"}],"output":{"name":"bool"}}],[11,"fmt","","Renders as `numer/denom`. If denom=1, renders as numer.",30,{"inputs":[{"name":"ratio"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","Parses `numer/denom` or just `numer`.",30,{"inputs":[{"name":"ratio"},{"name":"str"}],"output":{"name":"result"}}],[11,"eq","","",31,{"inputs":[{"name":"parseratioerror"},{"name":"parseratioerror"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"parseratioerror"},{"name":"parseratioerror"}],"output":{"name":"bool"}}],[11,"fmt","","",31,{"inputs":[{"name":"parseratioerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"parseratioerror"}],"output":{"name":"parseratioerror"}}],[11,"fmt","","",31,{"inputs":[{"name":"parseratioerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",31,{"inputs":[{"name":"parseratioerror"}],"output":{"name":"str"}}]],"paths":[[4,"Sign"],[4,"ParseBigIntError"],[8,"ToBigUint"],[8,"ToBigInt"],[8,"RandBigInt"],[3,"BigUint"],[3,"BigInt"],[3,"Complex"],[8,"Integer"],[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"],[3,"ParseFloatError"],[4,"FloatErrorKind"],[8,"Num"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Bounded"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"PrimInt"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"Float"],[3,"Ratio"],[3,"ParseRatioError"]]};
searchIndex['cookie'] = {"items":[[0,"","cookie","",null,null],[3,"CookieJar","","A jar of cookies for managing a session",null,null],[3,"Cookie","","",null,null],[12,"name","","",0,null],[12,"value","","",0,null],[12,"expires","","",0,null],[12,"max_age","","",0,null],[12,"domain","","",0,null],[12,"path","","",0,null],[12,"secure","","",0,null],[12,"httponly","","",0,null],[12,"custom","","",0,null],[3,"AttrVal","","",null,null],[11,"new","","Creates a new empty cookie jar with the given signing key.",1,null],[11,"add_original","","Adds an original cookie from a request.",1,{"inputs":[{"name":"cookiejar"},{"name":"cookie"}],"output":null}],[11,"add","","Adds a new cookie to this cookie jar.",1,{"inputs":[{"name":"cookiejar"},{"name":"cookie"}],"output":null}],[11,"remove","","Removes a cookie from this cookie jar.",1,{"inputs":[{"name":"cookiejar"},{"name":"str"}],"output":null}],[11,"find","","Finds a cookie inside of this cookie jar.",1,{"inputs":[{"name":"cookiejar"},{"name":"str"}],"output":{"name":"option"}}],[11,"permanent","","Creates a child jar for permanent cookie storage.",1,{"inputs":[{"name":"cookiejar"}],"output":{"name":"cookiejar"}}],[11,"delta","","Calculates the changes that have occurred to this cookie jar over time,\nreturning a vector of `Set-Cookie` headers.",1,{"inputs":[{"name":"cookiejar"}],"output":{"name":"vec"}}],[11,"iter","","Return an iterator over the cookies in this jar.",1,{"inputs":[{"name":"cookiejar"}],"output":{"name":"iter"}}],[11,"fmt","","",0,{"inputs":[{"name":"cookie"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"cookie"}],"output":{"name":"cookie"}}],[11,"eq","","",0,{"inputs":[{"name":"cookie"},{"name":"cookie"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"cookie"},{"name":"cookie"}],"output":{"name":"bool"}}],[11,"new","","",0,{"inputs":[{"name":"cookie"},{"name":"string"},{"name":"string"}],"output":{"name":"cookie"}}],[11,"parse","","",0,{"inputs":[{"name":"cookie"},{"name":"str"}],"output":{"name":"result"}}],[11,"pair","","",0,{"inputs":[{"name":"cookie"}],"output":{"name":"attrval"}}],[11,"fmt","","",2,{"inputs":[{"name":"attrval"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"cookie"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",0,{"inputs":[{"name":"cookie"},{"name":"str"}],"output":{"name":"result"}}]],"paths":[[3,"Cookie"],[3,"CookieJar"],[3,"AttrVal"]]};
searchIndex['url'] = {"items":[[0,"","url","<a href=\"https://github.com/servo/rust-url\"><img style=\"position: absolute; top: 0; left: 0; border: 0;\" src=\"../github.png\" alt=\"Fork me on GitHub\"></a>\n<style>.sidebar { margin-top: 53px }</style>",null,null],[3,"Url","","The parsed representation of an absolute URL.",null,null],[12,"scheme","","The scheme (a.k.a. protocol) of the URL, in ASCII lower case.",0,null],[12,"scheme_data","","The components of the URL whose representation depends on where the scheme is *relative*.",0,null],[12,"query","","The query string of the URL.",0,null],[12,"fragment","","The fragment identifier of the URL.",0,null],[3,"OpaqueOrigin","","Opaque identifier for URLs that have file or other schemes",null,null],[3,"RelativeSchemeData","","Components for URLs in a *relative* scheme such as HTTP.",null,null],[12,"username","","The username of the URL, as a possibly empty, percent-encoded string.",1,null],[12,"password","","The password of the URL.",1,null],[12,"host","","The host of the URL, either a domain name or an IPv4 address",1,null],[12,"port","","The port number of the URL.\n`None` for file-like schemes, or to indicate the default port number.",1,null],[12,"default_port","","The default port number for the URL’s scheme.\n`None` for file-like schemes.",1,null],[12,"path","","The path of the URL, as vector of percent-encoded strings.",1,null],[3,"UrlParser","","A set of optional parameters for URL parsing.",null,null],[4,"Host","","The host name of an URL.",null,null],[13,"Domain","","A (DNS) domain name.",2,null],[13,"Ipv4","","A IPv4 address, represented by four sequences of up to three ASCII digits.",2,null],[13,"Ipv6","","An IPv6 address, represented inside `[...]` square brackets\nso that `:` colon characters in the address are not ambiguous\nwith the port number delimiter.",2,null],[4,"ParseError","","Errors that can occur during parsing.",null,null],[13,"EmptyHost","","",3,null],[13,"InvalidScheme","","",3,null],[13,"InvalidPort","","",3,null],[13,"InvalidIpv4Address","","",3,null],[13,"InvalidIpv6Address","","",3,null],[13,"InvalidDomainCharacter","","",3,null],[13,"InvalidCharacter","","",3,null],[13,"InvalidBackslash","","",3,null],[13,"InvalidPercentEncoded","","",3,null],[13,"InvalidAtSymbolInUser","","",3,null],[13,"ExpectedTwoSlashes","","",3,null],[13,"ExpectedInitialSlash","","",3,null],[13,"NonUrlCodePoint","","",3,null],[13,"RelativeUrlWithScheme","","",3,null],[13,"RelativeUrlWithoutBase","","",3,null],[13,"RelativeUrlWithNonRelativeBase","","",3,null],[13,"NonAsciiDomainsNotSupportedYet","","",3,null],[13,"CannotSetJavascriptFragment","","",3,null],[13,"CannotSetPortWithFileLikeScheme","","",3,null],[13,"CannotSetUsernameWithNonRelativeScheme","","",3,null],[13,"CannotSetPasswordWithNonRelativeScheme","","",3,null],[13,"CannotSetHostPortWithNonRelativeScheme","","",3,null],[13,"CannotSetHostWithNonRelativeScheme","","",3,null],[13,"CannotSetPortWithNonRelativeScheme","","",3,null],[13,"CannotSetPathWithNonRelativeScheme","","",3,null],[4,"Origin","","The origin of the URL",null,null],[13,"UID","","A globally unique identifier",4,null],[13,"Tuple","","Consists of the URL's scheme, host and port",4,null],[4,"SchemeData","","The components of the URL whose representation depends on where the scheme is *relative*.",null,null],[13,"Relative","","Components for URLs in a *relative* scheme such as HTTP.",5,null],[13,"NonRelative","","No further structure is assumed for *non-relative* schemes such as `data` and `mailto`.",5,null],[4,"SchemeType","","Determines the behavior of the URL parser for a given scheme.",null,null],[13,"NonRelative","","Indicate that the scheme is *non-relative*.",6,null],[13,"Relative","","Indicate that the scheme is *relative*, and what the default port number is.",6,null],[13,"FileLike","","Indicate a *relative* scheme similar to the *file* scheme.",6,null],[5,"parse_path","","Parse `input` as a “standalone” URL path,\nwith an optional query string and fragment identifier.",null,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[5,"whatwg_scheme_type_mapper","","http://url.spec.whatwg.org/#special-scheme",null,{"inputs":[{"name":"str"}],"output":{"name":"schemetype"}}],[11,"cmp","","",2,{"inputs":[{"name":"host"},{"name":"host"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"host"},{"name":"host"}],"output":{"name":"option"}}],[11,"lt","","",2,{"inputs":[{"name":"host"},{"name":"host"}],"output":{"name":"bool"}}],[11,"le","","",2,{"inputs":[{"name":"host"},{"name":"host"}],"output":{"name":"bool"}}],[11,"gt","","",2,{"inputs":[{"name":"host"},{"name":"host"}],"output":{"name":"bool"}}],[11,"ge","","",2,{"inputs":[{"name":"host"},{"name":"host"}],"output":{"name":"bool"}}],[11,"hash","","",2,null],[11,"fmt","","",2,{"inputs":[{"name":"host"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"host"}],"output":{"name":"host"}}],[11,"eq","","",2,{"inputs":[{"name":"host"},{"name":"host"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"host"},{"name":"host"}],"output":{"name":"bool"}}],[11,"parse","","Parse a host: either an IPv6 address in [] square brackets, or a domain.",2,{"inputs":[{"name":"host"},{"name":"str"}],"output":{"name":"parseresult"}}],[11,"serialize","","Serialize the host as a string.",2,{"inputs":[{"name":"host"}],"output":{"name":"string"}}],[11,"fmt","","",2,{"inputs":[{"name":"host"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"parseerror"}],"output":{"name":"parseerror"}}],[11,"eq","","",3,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"description","","",3,{"inputs":[{"name":"parseerror"}],"output":{"name":"str"}}],[11,"fmt","","",3,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"urlutils","","These methods are not meant for use in Rust code,\nonly to help implement the JavaScript URLUtils API: http://url.spec.whatwg.org/#urlutils",null,null],[3,"UrlUtilsWrapper","url::urlutils","",null,null],[12,"url","","",7,null],[12,"parser","","",7,null],[0,"percent_encoding","url","",null,null],[3,"EncodeSet","url::percent_encoding","Represents a set of characters / bytes that should be percent-encoded.",null,null],[5,"percent_encode_to","","Percent-encode the given bytes, and push the result to `output`.",null,null],[5,"percent_encode","","Percent-encode the given bytes.",null,null],[5,"utf8_percent_encode_to","","Percent-encode the UTF-8 encoding of the given string, and push the result to `output`.",null,{"inputs":[{"name":"str"},{"name":"encodeset"},{"name":"string"}],"output":null}],[5,"utf8_percent_encode","","Percent-encode the UTF-8 encoding of the given string.",null,{"inputs":[{"name":"str"},{"name":"encodeset"}],"output":{"name":"string"}}],[5,"percent_decode_to","","Percent-decode the given bytes, and push the result to `output`.",null,null],[5,"percent_decode","","Percent-decode the given bytes.",null,null],[5,"lossy_utf8_percent_decode","","Percent-decode the given bytes, and decode the result as UTF-8.",null,null],[5,"from_hex","","Convert the given hex character into its numeric value.",null,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[7,"SIMPLE_ENCODE_SET","","This encode set is used for fragment identifier and non-relative scheme data.",null,null],[7,"QUERY_ENCODE_SET","","This encode set is used in the URL parser for query strings.",null,null],[7,"DEFAULT_ENCODE_SET","","This encode set is used for path components.",null,null],[7,"USERINFO_ENCODE_SET","","This encode set is used in the URL parser for usernames and passwords.",null,null],[7,"PASSWORD_ENCODE_SET","","This encode set should be used when setting the password field of a parsed URL.",null,null],[7,"USERNAME_ENCODE_SET","","This encode set should be used when setting the username field of a parsed URL.",null,null],[7,"FORM_URLENCODED_ENCODE_SET","","This encode set is used in `application/x-www-form-urlencoded` serialization.",null,null],[7,"HTTP_VALUE_ENCODE_SET","","This encode set is used for HTTP header values and is defined at\nhttps://tools.ietf.org/html/rfc5987#section-3.2",null,null],[11,"clone","","",8,{"inputs":[{"name":"encodeset"}],"output":{"name":"encodeset"}}],[0,"form_urlencoded","url","Parser and serializer for the [`application/x-www-form-urlencoded` format](\nhttp://url.spec.whatwg.org/#application/x-www-form-urlencoded),\nas used by HTML forms.",null,null],[5,"parse","url::form_urlencoded","Convert a byte string in the `application/x-www-form-urlencoded` format\ninto a vector of (name, value) pairs.",null,null],[5,"serialize","","Convert an iterator of (name, value) pairs\ninto a string in the `application/x-www-form-urlencoded` format.",null,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[0,"punycode","url","Punycode ([RFC 3492](http://tools.ietf.org/html/rfc3492)) implementation.",null,null],[5,"decode_to_string","url::punycode","Convert Punycode to an Unicode `String`.",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[5,"decode","","Convert Punycode to Unicode.",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[5,"encode_str","","Convert an Unicode `str` to Punycode.",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[5,"encode","","Convert Unicode to Punycode.",null,null],[0,"format","url","Formatting utilities for URLs.",null,null],[3,"PathFormatter","url::format","Formatter and serializer for URL path data.",null,null],[12,"path","","The path as a slice of string-like objects (String or &str).",9,null],[3,"UserInfoFormatter","","Formatter and serializer for URL username and password data.",null,null],[12,"username","","URL username as a string slice.",10,null],[12,"password","","URL password as an optional string slice.",10,null],[3,"UrlNoFragmentFormatter","","Formatter for URLs which ignores the fragment field.",null,null],[12,"url","","",11,null],[11,"fmt","","",9,{"inputs":[{"name":"pathformatter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"userinfoformatter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"urlnofragmentformatter"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"idna","url","International domain names",null,null],[3,"Uts46Flags","url::idna","",null,null],[12,"use_std3_ascii_rules","","",12,null],[12,"transitional_processing","","",12,null],[12,"verify_dns_length","","",12,null],[4,"Error","","",null,null],[13,"PunycodeError","","",13,null],[13,"ValidityCriteria","","",13,null],[13,"DissallowedByStd3AsciiRules","","",13,null],[13,"DissallowedMappedInStd3","","",13,null],[13,"DissallowedCharacter","","",13,null],[13,"TooLongForDns","","",13,null],[5,"uts46_to_ascii","","http://www.unicode.org/reports/tr46/#ToASCII",null,{"inputs":[{"name":"str"},{"name":"uts46flags"}],"output":{"name":"result"}}],[5,"domain_to_ascii","","https://url.spec.whatwg.org/#concept-domain-to-ascii",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"uts46_to_unicode","","http://www.unicode.org/reports/tr46/#ToUnicode",null,null],[5,"domain_to_unicode","","https://url.spec.whatwg.org/#concept-domain-to-unicode",null,null],[11,"clone","","",12,{"inputs":[{"name":"uts46flags"}],"output":{"name":"uts46flags"}}],[11,"fmt","","",13,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"eq","","",13,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[6,"ErrorHandler","url","This is called on non-fatal parse errors.",null,null],[6,"ParseResult","","",null,null],[11,"cmp","","",0,{"inputs":[{"name":"url"},{"name":"url"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"url"},{"name":"url"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"url"},{"name":"url"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"url"},{"name":"url"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"url"},{"name":"url"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"url"},{"name":"url"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"url"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"url"}],"output":{"name":"url"}}],[11,"eq","","",0,{"inputs":[{"name":"url"},{"name":"url"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"url"},{"name":"url"}],"output":{"name":"bool"}}],[11,"fmt","","",14,{"inputs":[{"name":"opaqueorigin"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"opaqueorigin"}],"output":{"name":"opaqueorigin"}}],[11,"eq","","",14,{"inputs":[{"name":"opaqueorigin"},{"name":"opaqueorigin"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"opaqueorigin"},{"name":"opaqueorigin"}],"output":{"name":"bool"}}],[11,"new","","Creates a new opaque origin with a random UUID.",14,{"inputs":[{"name":"opaqueorigin"}],"output":{"name":"opaqueorigin"}}],[11,"fmt","","",4,{"inputs":[{"name":"origin"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"origin"}],"output":{"name":"origin"}}],[11,"eq","","",4,{"inputs":[{"name":"origin"},{"name":"origin"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"origin"},{"name":"origin"}],"output":{"name":"bool"}}],[11,"cmp","","",5,{"inputs":[{"name":"schemedata"},{"name":"schemedata"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"schemedata"},{"name":"schemedata"}],"output":{"name":"option"}}],[11,"lt","","",5,{"inputs":[{"name":"schemedata"},{"name":"schemedata"}],"output":{"name":"bool"}}],[11,"le","","",5,{"inputs":[{"name":"schemedata"},{"name":"schemedata"}],"output":{"name":"bool"}}],[11,"gt","","",5,{"inputs":[{"name":"schemedata"},{"name":"schemedata"}],"output":{"name":"bool"}}],[11,"ge","","",5,{"inputs":[{"name":"schemedata"},{"name":"schemedata"}],"output":{"name":"bool"}}],[11,"hash","","",5,null],[11,"fmt","","",5,{"inputs":[{"name":"schemedata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"schemedata"}],"output":{"name":"schemedata"}}],[11,"eq","","",5,{"inputs":[{"name":"schemedata"},{"name":"schemedata"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"schemedata"},{"name":"schemedata"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"relativeschemedata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"relativeschemedata"}],"output":{"name":"relativeschemedata"}}],[11,"eq","","",1,{"inputs":[{"name":"relativeschemedata"},{"name":"relativeschemedata"}],"output":{"name":"bool"}}],[11,"hash","","",1,{"inputs":[{"name":"relativeschemedata"},{"name":"h"}],"output":null}],[11,"partial_cmp","","",1,{"inputs":[{"name":"relativeschemedata"},{"name":"relativeschemedata"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"relativeschemedata"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"from_str","","",0,{"inputs":[{"name":"url"},{"name":"str"}],"output":{"name":"parseresult"}}],[11,"new","","Return a new UrlParser with default parameters.",15,{"inputs":[{"name":"urlparser"}],"output":{"name":"urlparser"}}],[11,"base_url","","Set the base URL used for resolving relative URL references, and return the `UrlParser`.\nThe default is no base URL, so that relative URLs references fail to parse.",15,{"inputs":[{"name":"urlparser"},{"name":"url"}],"output":{"name":"urlparser"}}],[11,"error_handler","","Set an error handler for non-fatal parse errors, and return the `UrlParser`.",15,{"inputs":[{"name":"urlparser"},{"name":"errorhandler"}],"output":{"name":"urlparser"}}],[11,"scheme_type_mapper","","Set a *scheme type mapper*, and return the `UrlParser`.",15,null],[11,"parse","","Parse `input` as an URL, with all the parameters previously set in the `UrlParser`.",15,{"inputs":[{"name":"urlparser"},{"name":"str"}],"output":{"name":"parseresult"}}],[11,"parse_path","","Parse `input` as a “standalone” URL path,\nwith an optional query string and fragment identifier.",15,{"inputs":[{"name":"urlparser"},{"name":"str"}],"output":{"name":"parseresult"}}],[11,"cmp","","",6,{"inputs":[{"name":"schemetype"},{"name":"schemetype"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"schemetype"},{"name":"schemetype"}],"output":{"name":"option"}}],[11,"lt","","",6,{"inputs":[{"name":"schemetype"},{"name":"schemetype"}],"output":{"name":"bool"}}],[11,"le","","",6,{"inputs":[{"name":"schemetype"},{"name":"schemetype"}],"output":{"name":"bool"}}],[11,"gt","","",6,{"inputs":[{"name":"schemetype"},{"name":"schemetype"}],"output":{"name":"bool"}}],[11,"ge","","",6,{"inputs":[{"name":"schemetype"},{"name":"schemetype"}],"output":{"name":"bool"}}],[11,"hash","","",6,null],[11,"clone","","",6,{"inputs":[{"name":"schemetype"}],"output":{"name":"schemetype"}}],[11,"fmt","","",6,{"inputs":[{"name":"schemetype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"schemetype"},{"name":"schemetype"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"schemetype"},{"name":"schemetype"}],"output":{"name":"bool"}}],[11,"default_port","","",6,{"inputs":[{"name":"schemetype"}],"output":{"name":"option"}}],[11,"same_as","","",6,{"inputs":[{"name":"schemetype"},{"name":"schemetype"}],"output":{"name":"bool"}}],[11,"parse","","Parse an URL with the default `UrlParser` parameters.",0,{"inputs":[{"name":"url"},{"name":"str"}],"output":{"name":"parseresult"}}],[11,"from_file_path","","Convert a file name as `std::path::Path` into an URL in the `file` scheme.",0,{"inputs":[{"name":"url"},{"name":"p"}],"output":{"name":"result"}}],[11,"from_directory_path","","Convert a directory name as `std::path::Path` into an URL in the `file` scheme.",0,{"inputs":[{"name":"url"},{"name":"p"}],"output":{"name":"result"}}],[11,"to_file_path","","Assuming the URL is in the `file` scheme or similar,\nconvert its path to an absolute `std::path::Path`.",0,{"inputs":[{"name":"url"}],"output":{"name":"result"}}],[11,"serialize","","Return the serialization of this URL as a string.",0,{"inputs":[{"name":"url"}],"output":{"name":"string"}}],[11,"origin","","Return the origin of this URL (https://url.spec.whatwg.org/#origin)",0,{"inputs":[{"name":"url"}],"output":{"name":"origin"}}],[11,"serialize_no_fragment","","Return the serialization of this URL, without the fragment identifier, as a string",0,{"inputs":[{"name":"url"}],"output":{"name":"string"}}],[11,"non_relative_scheme_data","","If the URL is *non-relative*, return the string scheme data.",0,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"non_relative_scheme_data_mut","","If the URL is *non-relative*, return a mutable reference to the string scheme data.",0,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"relative_scheme_data","","If the URL is in a *relative scheme*, return the structured scheme data.",0,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"relative_scheme_data_mut","","If the URL is in a *relative scheme*,\nreturn a mutable reference to the structured scheme data.",0,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"username","","If the URL is in a *relative scheme*, return its username.",0,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"username_mut","","If the URL is in a *relative scheme*, return a mutable reference to its username.",0,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"lossy_percent_decode_username","","Percent-decode the URL’s username, if any.",0,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"password","","If the URL is in a *relative scheme*, return its password, if any.",0,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"password_mut","","If the URL is in a *relative scheme*, return a mutable reference to its password, if any.",0,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"lossy_percent_decode_password","","Percent-decode the URL’s password, if any.",0,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"serialize_userinfo","","Serialize the URL's username and password, if any.",0,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"host","","If the URL is in a *relative scheme*, return its structured host.",0,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"host_mut","","If the URL is in a *relative scheme*, return a mutable reference to its structured host.",0,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"domain","","If the URL is in a *relative scheme* and its host is a domain,\nreturn the domain as a string.",0,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"domain_mut","","If the URL is in a *relative scheme* and its host is a domain,\nreturn a mutable reference to the domain string.",0,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"serialize_host","","If the URL is in a *relative scheme*, serialize its host as a string.",0,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"port","","If the URL is in a *relative scheme* and has a port number, return it.",0,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"port_mut","","If the URL is in a *relative scheme*, return a mutable reference to its port.",0,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"port_or_default","","If the URL is in a *relative scheme* that is not a file-like,\nreturn its port number, even if it is the default.",0,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"path","","If the URL is in a *relative scheme*, return its path components.",0,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"path_mut","","If the URL is in a *relative scheme*, return a mutable reference to its path components.",0,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"serialize_path","","If the URL is in a *relative scheme*, serialize its path as a string.",0,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"query_pairs","","Parse the URL’s query string, if any, as `application/x-www-form-urlencoded`\nand return a vector of (key, value) pairs.",0,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"set_query_from_pairs","","Serialize an iterator of (key, value) pairs as `application/x-www-form-urlencoded`\nand set it as the URL’s query string.",0,{"inputs":[{"name":"url"},{"name":"i"}],"output":null}],[11,"lossy_percent_decode_query","","Percent-decode the URL’s query string, if any.",0,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"lossy_percent_decode_fragment","","Percent-decode the URL’s fragment identifier, if any.",0,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"join","","Join a path with a base URL.",0,{"inputs":[{"name":"url"},{"name":"str"}],"output":{"name":"parseresult"}}],[11,"encode","","",0,{"inputs":[{"name":"url"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",0,{"inputs":[{"name":"url"},{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"url"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"schemedata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"lossy_percent_decode_username","","Percent-decode the URL’s username.",1,{"inputs":[{"name":"relativeschemedata"}],"output":{"name":"string"}}],[11,"lossy_percent_decode_password","","Percent-decode the URL’s password, if any.",1,{"inputs":[{"name":"relativeschemedata"}],"output":{"name":"option"}}],[11,"to_file_path","","Assuming the URL is in the `file` scheme or similar,\nconvert its path to an absolute `std::path::Path`.",1,{"inputs":[{"name":"relativeschemedata"}],"output":{"name":"result"}}],[11,"domain","","If the host is a domain, return the domain as a string.",1,{"inputs":[{"name":"relativeschemedata"}],"output":{"name":"option"}}],[11,"domain_mut","","If the host is a domain, return a mutable reference to the domain string.",1,{"inputs":[{"name":"relativeschemedata"}],"output":{"name":"option"}}],[11,"port_or_default","","Return the port number of the URL, even if it is the default.\nReturn `None` for file-like URLs.",1,{"inputs":[{"name":"relativeschemedata"}],"output":{"name":"option"}}],[11,"serialize_path","","Serialize the path as a string.",1,{"inputs":[{"name":"relativeschemedata"}],"output":{"name":"string"}}],[11,"serialize_userinfo","","Serialize the userinfo as a string.",1,{"inputs":[{"name":"relativeschemedata"}],"output":{"name":"string"}}],[11,"fmt","","",1,{"inputs":[{"name":"relativeschemedata"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Url"],[3,"RelativeSchemeData"],[4,"Host"],[4,"ParseError"],[4,"Origin"],[4,"SchemeData"],[4,"SchemeType"],[3,"UrlUtilsWrapper"],[3,"EncodeSet"],[3,"PathFormatter"],[3,"UserInfoFormatter"],[3,"UrlNoFragmentFormatter"],[3,"Uts46Flags"],[4,"Error"],[3,"OpaqueOrigin"],[3,"UrlParser"]]};
searchIndex['uuid'] = {"items":[[0,"","uuid","Generate and parse UUIDs",null,null],[3,"Uuid","","A Universally Unique Identifier (UUID)",null,null],[4,"UuidVersion","","The version of the UUID, denoting the generating algorithm",null,null],[13,"Mac","","Version 1: MAC address",0,null],[13,"Dce","","Version 2: DCE Security",0,null],[13,"Md5","","Version 3: MD5 hash",0,null],[13,"Random","","Version 4: Random",0,null],[13,"Sha1","","Version 5: SHA-1 hash",0,null],[4,"UuidVariant","","The reserved variants of UUIDs",null,null],[13,"NCS","","Reserved by the NCS for backward compatibility",1,null],[13,"RFC4122","","As described in the RFC4122 Specification (default)",1,null],[13,"Microsoft","","Reserved by Microsoft for backward compatibility",1,null],[13,"Future","","Reserved for future expansion",1,null],[4,"ParseError","","Error details for string parsing failures",null,null],[13,"InvalidLength","","",2,null],[13,"InvalidCharacter","","",2,null],[13,"InvalidGroups","","",2,null],[13,"InvalidGroupLength","","",2,null],[6,"UuidBytes","","A 128-bit (16 byte) buffer containing the ID",null,null],[11,"clone","","",0,{"inputs":[{"name":"uuidversion"}],"output":{"name":"uuidversion"}}],[11,"eq","","",0,{"inputs":[{"name":"uuidversion"},{"name":"uuidversion"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"uuidversion"},{"name":"uuidversion"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"uuidvariant"}],"output":{"name":"uuidvariant"}}],[11,"eq","","",1,{"inputs":[{"name":"uuidvariant"},{"name":"uuidvariant"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"uuidvariant"},{"name":"uuidvariant"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"uuid"}],"output":{"name":"uuid"}}],[11,"hash","","",3,{"inputs":[{"name":"uuid"},{"name":"s"}],"output":null}],[11,"fmt","","",2,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"parseerror"}],"output":{"name":"parseerror"}}],[11,"eq","","",2,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",2,{"inputs":[{"name":"parseerror"}],"output":{"name":"str"}}],[11,"nil","","Returns a nil or empty UUID (containing all zeroes)",3,{"inputs":[{"name":"uuid"}],"output":{"name":"uuid"}}],[11,"new","","Create a new UUID of the specified version",3,{"inputs":[{"name":"uuid"},{"name":"uuidversion"}],"output":{"name":"option"}}],[11,"new_v4","","Creates a new random UUID",3,{"inputs":[{"name":"uuid"}],"output":{"name":"uuid"}}],[11,"from_fields","","Creates a UUID using the supplied field values",3,null],[11,"from_bytes","","Creates a UUID using the supplied bytes",3,null],[11,"get_variant","","Returns the variant of the UUID structure",3,{"inputs":[{"name":"uuid"}],"output":{"name":"option"}}],[11,"get_version_num","","Returns the version number of the UUID",3,{"inputs":[{"name":"uuid"}],"output":{"name":"usize"}}],[11,"get_version","","Returns the version of the UUID",3,{"inputs":[{"name":"uuid"}],"output":{"name":"option"}}],[11,"as_bytes","","Return an array of 16 octets containing the UUID data",3,null],[11,"to_simple_string","","Returns the UUID as a string of 32 hexadecimal digits",3,{"inputs":[{"name":"uuid"}],"output":{"name":"string"}}],[11,"to_hyphenated_string","","Returns a string of hexadecimal digits, separated into groups with a hyphen.",3,{"inputs":[{"name":"uuid"}],"output":{"name":"string"}}],[11,"to_urn_string","","Returns the UUID formatted as a full URN string",3,{"inputs":[{"name":"uuid"}],"output":{"name":"string"}}],[11,"parse_str","","Parses a UUID from a string of hexadecimal digits with optional hyphens",3,{"inputs":[{"name":"uuid"},{"name":"str"}],"output":{"name":"result"}}],[11,"is_nil","","Tests if the UUID is nil",3,{"inputs":[{"name":"uuid"}],"output":{"name":"bool"}}],[11,"default","","Returns the nil UUID, which is all zeroes",3,{"inputs":[{"name":"uuid"}],"output":{"name":"uuid"}}],[11,"from_str","","Parse a hex string and interpret as a UUID",3,{"inputs":[{"name":"uuid"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"uuid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"uuid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"uuid"},{"name":"uuid"}],"output":{"name":"bool"}}],[11,"encode","","Encode a UUID as a hyphenated string",3,{"inputs":[{"name":"uuid"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","Decode a UUID from a string",3,{"inputs":[{"name":"uuid"},{"name":"d"}],"output":{"name":"result"}}],[11,"rand","","",3,{"inputs":[{"name":"uuid"},{"name":"r"}],"output":{"name":"uuid"}}]],"paths":[[4,"UuidVersion"],[4,"UuidVariant"],[4,"ParseError"],[3,"Uuid"]]};
searchIndex['rand'] = {"items":[[0,"","rand","Utilities for random number generation",null,null],[3,"Generator","","Iterator which will generate a stream of random items.",null,null],[3,"AsciiGenerator","","Iterator which will continuously generate random ascii characters.",null,null],[3,"XorShiftRng","","An Xorshift[1] random number\ngenerator.",null,null],[3,"Open01","","A wrapper for generating floating point numbers uniformly in the\nopen interval `(0,1)` (not including either endpoint).",null,null],[3,"Closed01","","A wrapper for generating floating point numbers uniformly in the\nclosed interval `[0,1]` (including both endpoints).",null,null],[3,"StdRng","","The standard RNG. This is designed to be efficient on the current\nplatform.",null,null],[3,"ThreadRng","","The thread-local RNG.",null,null],[5,"weak_rng","","Create a weak random number generator with a default algorithm and seed.",null,{"inputs":[],"output":{"name":"xorshiftrng"}}],[5,"thread_rng","","Retrieve the lazily-initialized thread-local random number\ngenerator, seeded by the system. Intended to be used in method\nchaining style, e.g. `thread_rng().gen::<i32>()`.",null,{"inputs":[],"output":{"name":"threadrng"}}],[5,"random","","Generates a random value using the thread-local random number generator.",null,{"inputs":[],"output":{"name":"t"}}],[5,"sample","","Randomly sample up to `amount` elements from an iterator.",null,{"inputs":[{"name":"r"},{"name":"i"},{"name":"usize"}],"output":{"name":"vec"}}],[0,"distributions","","Sampling from random distributions.",null,null],[3,"RandSample","rand::distributions","A wrapper for generating types that implement `Rand` via the\n`Sample` & `IndependentSample` traits.",null,null],[3,"Weighted","","A value with a particular weight for use with `WeightedChoice`.",null,null],[12,"weight","","The numerical weight of this item",0,null],[12,"item","","The actual item which is being weighted",0,null],[3,"WeightedChoice","","A distribution that selects from a finite collection of weighted items.",null,null],[0,"range","","Generating numbers between two others.",null,null],[3,"Range","rand::distributions::range","Sample values uniformly between two bounds.",null,null],[8,"SampleRange","","The helper trait for types that have a sensible way to sample\nuniformly between two values. This should not be used directly,\nand is only to facilitate `Range`.",null,null],[10,"construct_range","","Construct the `Range` object that `sample_range`\nrequires. This should not ever be called directly, only via\n`Range::new`, which will check that `low < high`, so this\nfunction doesn't have to repeat the check.",1,{"inputs":[{"name":"samplerange"},{"name":"self"},{"name":"self"}],"output":{"name":"range"}}],[10,"sample_range","","Sample a value from the given `Range` with the given `Rng` as\na source of randomness.",1,{"inputs":[{"name":"samplerange"},{"name":"range"},{"name":"r"}],"output":{"name":"self"}}],[11,"clone","","",2,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"new","","Create a new `Range` instance that samples uniformly from\n`[low, high)`. Panics if `low >= high`.",2,{"inputs":[{"name":"range"},{"name":"x"},{"name":"x"}],"output":{"name":"range"}}],[11,"sample","","",2,{"inputs":[{"name":"range"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","","",2,{"inputs":[{"name":"range"},{"name":"r"}],"output":{"name":"sup"}}],[0,"gamma","rand::distributions","The Gamma and derived distributions.",null,null],[3,"Gamma","rand::distributions::gamma","The Gamma distribution `Gamma(shape, scale)` distribution.",null,null],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of\nfreedom.",null,null],[3,"FisherF","","The Fisher F distribution `F(m, n)`.",null,null],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of\nfreedom.",null,null],[11,"clone","","",3,{"inputs":[{"name":"gamma"}],"output":{"name":"gamma"}}],[11,"new","","Construct an object representing the `Gamma(shape, scale)`\ndistribution.",3,{"inputs":[{"name":"gamma"},{"name":"f64"},{"name":"f64"}],"output":{"name":"gamma"}}],[11,"sample","","",3,{"inputs":[{"name":"gamma"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",3,{"inputs":[{"name":"gamma"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",4,{"inputs":[{"name":"chisquared"}],"output":{"name":"chisquared"}}],[11,"new","","Create a new chi-squared distribution with degrees-of-freedom\n`k`. Panics if `k < 0`.",4,{"inputs":[{"name":"chisquared"},{"name":"f64"}],"output":{"name":"chisquared"}}],[11,"sample","","",4,{"inputs":[{"name":"chisquared"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",4,{"inputs":[{"name":"chisquared"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",5,{"inputs":[{"name":"fisherf"}],"output":{"name":"fisherf"}}],[11,"new","","Create a new `FisherF` distribution, with the given\nparameter. Panics if either `m` or `n` are not positive.",5,{"inputs":[{"name":"fisherf"},{"name":"f64"},{"name":"f64"}],"output":{"name":"fisherf"}}],[11,"sample","","",5,{"inputs":[{"name":"fisherf"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",5,{"inputs":[{"name":"fisherf"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",6,{"inputs":[{"name":"studentt"}],"output":{"name":"studentt"}}],[11,"new","","Create a new Student t distribution with `n` degrees of\nfreedom. Panics if `n <= 0`.",6,{"inputs":[{"name":"studentt"},{"name":"f64"}],"output":{"name":"studentt"}}],[11,"sample","","",6,{"inputs":[{"name":"studentt"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",6,{"inputs":[{"name":"studentt"},{"name":"r"}],"output":{"name":"f64"}}],[0,"normal","rand::distributions","The normal and derived distributions.",null,null],[3,"StandardNormal","rand::distributions::normal","A wrapper around an `f64` to generate N(0, 1) random numbers\n(a.k.a.  a standard normal, or Gaussian).",null,null],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`.",null,null],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`.",null,null],[11,"clone","","",7,{"inputs":[{"name":"standardnormal"}],"output":{"name":"standardnormal"}}],[11,"rand","","",7,{"inputs":[{"name":"standardnormal"},{"name":"r"}],"output":{"name":"standardnormal"}}],[11,"clone","","",8,{"inputs":[{"name":"normal"}],"output":{"name":"normal"}}],[11,"new","","Construct a new `Normal` distribution with the given mean and\nstandard deviation.",8,{"inputs":[{"name":"normal"},{"name":"f64"},{"name":"f64"}],"output":{"name":"normal"}}],[11,"sample","","",8,{"inputs":[{"name":"normal"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",8,{"inputs":[{"name":"normal"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",9,{"inputs":[{"name":"lognormal"}],"output":{"name":"lognormal"}}],[11,"new","","Construct a new `LogNormal` distribution with the given mean\nand standard deviation.",9,{"inputs":[{"name":"lognormal"},{"name":"f64"},{"name":"f64"}],"output":{"name":"lognormal"}}],[11,"sample","","",9,{"inputs":[{"name":"lognormal"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",9,{"inputs":[{"name":"lognormal"},{"name":"r"}],"output":{"name":"f64"}}],[0,"exponential","rand::distributions","The exponential distribution.",null,null],[3,"Exp1","rand::distributions::exponential","A wrapper around an `f64` to generate Exp(1) random numbers.",null,null],[3,"Exp","","The exponential distribution `Exp(lambda)`.",null,null],[11,"clone","","",10,{"inputs":[{"name":"exp1"}],"output":{"name":"exp1"}}],[11,"rand","","",10,{"inputs":[{"name":"exp1"},{"name":"r"}],"output":{"name":"exp1"}}],[11,"clone","","",11,{"inputs":[{"name":"exp"}],"output":{"name":"exp"}}],[11,"new","","Construct a new `Exp` with the given shape parameter\n`lambda`. Panics if `lambda <= 0`.",11,{"inputs":[{"name":"exp"},{"name":"f64"}],"output":{"name":"exp"}}],[11,"sample","","",11,{"inputs":[{"name":"exp"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",11,{"inputs":[{"name":"exp"},{"name":"r"}],"output":{"name":"f64"}}],[8,"Sample","rand::distributions","Types that can be used to create a random instance of `Support`.",null,null],[10,"sample","","Generate a random value of `Support`, using `rng` as the\nsource of randomness.",12,{"inputs":[{"name":"sample"},{"name":"r"}],"output":{"name":"support"}}],[8,"IndependentSample","","`Sample`s that do not require keeping track of state.",null,null],[10,"ind_sample","","Generate a random value.",13,{"inputs":[{"name":"independentsample"},{"name":"r"}],"output":{"name":"support"}}],[11,"clone","","",14,{"inputs":[{"name":"randsample"}],"output":{"name":"self"}}],[11,"sample","","",14,{"inputs":[{"name":"randsample"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","","",14,{"inputs":[{"name":"randsample"},{"name":"r"}],"output":{"name":"sup"}}],[11,"new","","",14,{"inputs":[{"name":"randsample"}],"output":{"name":"randsample"}}],[11,"clone","","",0,{"inputs":[{"name":"weighted"}],"output":{"name":"weighted"}}],[11,"new","","Create a new `WeightedChoice`.",15,null],[11,"sample","","",15,{"inputs":[{"name":"weightedchoice"},{"name":"r"}],"output":{"name":"t"}}],[11,"ind_sample","","",15,{"inputs":[{"name":"weightedchoice"},{"name":"r"}],"output":{"name":"t"}}],[0,"isaac","rand","The ISAAC random number generator.",null,null],[3,"IsaacRng","rand::isaac","A random number generator that uses the ISAAC algorithm[1].",null,null],[3,"Isaac64Rng","","A random number generator that uses ISAAC-64[1], the 64-bit\nvariant of the ISAAC algorithm.",null,null],[11,"new_unseeded","","Create an ISAAC random number generator using the default\nfixed seed.",16,{"inputs":[{"name":"isaacrng"}],"output":{"name":"isaacrng"}}],[11,"clone","","",16,{"inputs":[{"name":"isaacrng"}],"output":{"name":"isaacrng"}}],[11,"next_u32","","",16,{"inputs":[{"name":"isaacrng"}],"output":{"name":"u32"}}],[11,"reseed","","",16,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can\nbe any length, although the maximum number of elements used is\n256 and any more will be silently ignored. A generator\nconstructed with a given seed will generate the same sequence\nof values as all other generators constructed with that seed.",16,null],[11,"rand","","",16,{"inputs":[{"name":"isaacrng"},{"name":"r"}],"output":{"name":"isaacrng"}}],[11,"new_unseeded","","Create a 64-bit ISAAC random number generator using the\ndefault fixed seed.",17,{"inputs":[{"name":"isaac64rng"}],"output":{"name":"isaac64rng"}}],[11,"clone","","",17,{"inputs":[{"name":"isaac64rng"}],"output":{"name":"isaac64rng"}}],[11,"next_u32","","",17,{"inputs":[{"name":"isaac64rng"}],"output":{"name":"u32"}}],[11,"next_u64","","",17,{"inputs":[{"name":"isaac64rng"}],"output":{"name":"u64"}}],[11,"reseed","","",17,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can\nbe any length, although the maximum number of elements used is\n256 and any more will be silently ignored. A generator\nconstructed with a given seed will generate the same sequence\nof values as all other generators constructed with that seed.",17,null],[11,"rand","","",17,{"inputs":[{"name":"isaac64rng"},{"name":"r"}],"output":{"name":"isaac64rng"}}],[0,"chacha","rand","The ChaCha random number generator.",null,null],[3,"ChaChaRng","rand::chacha","A random number generator that uses the ChaCha20 algorithm [1].",null,null],[11,"clone","","",18,{"inputs":[{"name":"chacharng"}],"output":{"name":"chacharng"}}],[11,"new_unseeded","","Create an ChaCha random number generator using the default\nfixed key of 8 zero words.",18,{"inputs":[{"name":"chacharng"}],"output":{"name":"chacharng"}}],[11,"set_counter","","Sets the internal 128-bit ChaCha counter to\na user-provided value. This permits jumping\narbitrarily ahead (or backwards) in the pseudorandom stream.",18,{"inputs":[{"name":"chacharng"},{"name":"u64"},{"name":"u64"}],"output":null}],[11,"next_u32","","",18,{"inputs":[{"name":"chacharng"}],"output":{"name":"u32"}}],[11,"reseed","","",18,null],[11,"from_seed","","Create a ChaCha generator from a seed,\nobtained from a variable-length u32 array.\nOnly up to 8 words are used; if less than 8\nwords are used, the remaining are set to zero.",18,null],[11,"rand","","",18,{"inputs":[{"name":"chacharng"},{"name":"r"}],"output":{"name":"chacharng"}}],[0,"reseeding","rand","A wrapper around another RNG that reseeds it after it\ngenerates a certain number of random bytes.",null,null],[3,"ReseedingRng","rand::reseeding","A wrapper around any RNG which reseeds the underlying RNG after it\nhas generated a certain number of random bytes.",null,null],[12,"reseeder","","Controls the behaviour when reseeding the RNG.",19,null],[3,"ReseedWithDefault","","Reseed an RNG using a `Default` instance. This reseeds by\nreplacing the RNG with the result of a `Default::default` call.",null,null],[8,"Reseeder","","Something that can be used to reseed an RNG via `ReseedingRng`.",null,null],[10,"reseed","","Reseed the given RNG.",20,{"inputs":[{"name":"reseeder"},{"name":"r"}],"output":null}],[11,"new","","Create a new `ReseedingRng` with the given parameters.",19,{"inputs":[{"name":"reseedingrng"},{"name":"r"},{"name":"u64"},{"name":"rsdr"}],"output":{"name":"reseedingrng"}}],[11,"reseed_if_necessary","","Reseed the internal RNG if the number of bytes that have been\ngenerated exceed the threshold.",19,{"inputs":[{"name":"reseedingrng"}],"output":null}],[11,"next_u32","","",19,{"inputs":[{"name":"reseedingrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",19,{"inputs":[{"name":"reseedingrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",19,null],[11,"reseed","","",19,null],[11,"from_seed","","Create a new `ReseedingRng` from the given reseeder and\nseed. This uses a default value for `generation_threshold`.",19,null],[11,"clone","","",21,{"inputs":[{"name":"reseedwithdefault"}],"output":{"name":"reseedwithdefault"}}],[11,"reseed","","",21,{"inputs":[{"name":"reseedwithdefault"},{"name":"r"}],"output":null}],[11,"default","","",21,{"inputs":[{"name":"reseedwithdefault"}],"output":{"name":"reseedwithdefault"}}],[11,"rand","rand","",22,{"inputs":[{"name":"open01"},{"name":"r"}],"output":{"name":"open01"}}],[11,"rand","","",23,{"inputs":[{"name":"closed01"},{"name":"r"}],"output":{"name":"closed01"}}],[11,"rand","","",22,{"inputs":[{"name":"open01"},{"name":"r"}],"output":{"name":"open01"}}],[11,"rand","","",23,{"inputs":[{"name":"closed01"},{"name":"r"}],"output":{"name":"closed01"}}],[11,"rand","core::option","",24,{"inputs":[{"name":"option"},{"name":"r"}],"output":{"name":"option"}}],[0,"os","rand","Interfaces to the operating system provided random number\ngenerators.",null,null],[3,"OsRng","rand::os","A random number generator that retrieves randomness straight from\nthe operating system. Platform sources:",null,null],[11,"new","","Create a new `OsRng`.",25,{"inputs":[{"name":"osrng"}],"output":{"name":"result"}}],[11,"next_u32","","",25,{"inputs":[{"name":"osrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",25,{"inputs":[{"name":"osrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",25,null],[0,"read","rand","A wrapper around any Read to treat it as an RNG.",null,null],[3,"ReadRng","rand::read","An RNG that reads random bytes straight from a `Read`. This will\nwork best with an infinite reader, but this is not required.",null,null],[11,"new","","Create a new `ReadRng` from a `Read`.",26,{"inputs":[{"name":"readrng"},{"name":"r"}],"output":{"name":"readrng"}}],[11,"next_u32","","",26,{"inputs":[{"name":"readrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",26,{"inputs":[{"name":"readrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",26,null],[8,"Rand","rand","A type that can be randomly generated using an `Rng`.",null,null],[10,"rand","","Generates a random instance of this type using the specified source of\nrandomness.",27,{"inputs":[{"name":"rand"},{"name":"r"}],"output":{"name":"self"}}],[8,"Rng","","A random number generator.",null,null],[10,"next_u32","","Return the next random u32.",28,{"inputs":[{"name":"rng"}],"output":{"name":"u32"}}],[11,"next_u64","","Return the next random u64.",28,{"inputs":[{"name":"rng"}],"output":{"name":"u64"}}],[11,"next_f32","","Return the next random f32 selected from the half-open\ninterval `[0, 1)`.",28,{"inputs":[{"name":"rng"}],"output":{"name":"f32"}}],[11,"next_f64","","Return the next random f64 selected from the half-open\ninterval `[0, 1)`.",28,{"inputs":[{"name":"rng"}],"output":{"name":"f64"}}],[11,"fill_bytes","","Fill `dest` with random data.",28,null],[11,"gen","","Return a random value of a `Rand` type.",28,{"inputs":[{"name":"rng"}],"output":{"name":"t"}}],[11,"gen_iter","","Return an iterator that will yield an infinite number of randomly\ngenerated items.",28,{"inputs":[{"name":"rng"}],"output":{"name":"generator"}}],[11,"gen_range","","Generate a random value in the range [`low`, `high`).",28,{"inputs":[{"name":"rng"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[11,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",28,{"inputs":[{"name":"rng"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",28,{"inputs":[{"name":"rng"}],"output":{"name":"asciigenerator"}}],[11,"choose","","Return a random element from `values`.",28,null],[11,"shuffle","","Shuffle a mutable slice in place.",28,null],[8,"SeedableRng","","A random number generator that can be explicitly seeded to produce\nthe same stream of randomness multiple times.",null,null],[10,"reseed","","Reseed an RNG with the given seed.",29,{"inputs":[{"name":"seedablerng"},{"name":"seed"}],"output":null}],[10,"from_seed","","Create a new RNG with the given seed.",29,{"inputs":[{"name":"seedablerng"},{"name":"seed"}],"output":{"name":"self"}}],[11,"next_u32","alloc::boxed","",30,{"inputs":[{"name":"box"}],"output":{"name":"u32"}}],[11,"next_u64","","",30,{"inputs":[{"name":"box"}],"output":{"name":"u64"}}],[11,"next_f32","","",30,{"inputs":[{"name":"box"}],"output":{"name":"f32"}}],[11,"next_f64","","",30,{"inputs":[{"name":"box"}],"output":{"name":"f64"}}],[11,"fill_bytes","","",30,null],[11,"next","rand","",31,{"inputs":[{"name":"generator"}],"output":{"name":"option"}}],[11,"next","","",32,{"inputs":[{"name":"asciigenerator"}],"output":{"name":"option"}}],[11,"clone","","",33,{"inputs":[{"name":"xorshiftrng"}],"output":{"name":"xorshiftrng"}}],[11,"new_unseeded","","Creates a new XorShiftRng instance which is not seeded.",33,{"inputs":[{"name":"xorshiftrng"}],"output":{"name":"xorshiftrng"}}],[11,"next_u32","","",33,{"inputs":[{"name":"xorshiftrng"}],"output":{"name":"u32"}}],[11,"reseed","","Reseed an XorShiftRng. This will panic if `seed` is entirely 0.",33,null],[11,"from_seed","","Create a new XorShiftRng. This will panic if `seed` is entirely 0.",33,null],[11,"rand","","",33,{"inputs":[{"name":"xorshiftrng"},{"name":"r"}],"output":{"name":"xorshiftrng"}}],[11,"clone","","",34,{"inputs":[{"name":"stdrng"}],"output":{"name":"stdrng"}}],[11,"new","","Create a randomly seeded instance of `StdRng`.",34,{"inputs":[{"name":"stdrng"}],"output":{"name":"result"}}],[11,"next_u32","","",34,{"inputs":[{"name":"stdrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",34,{"inputs":[{"name":"stdrng"}],"output":{"name":"u64"}}],[11,"reseed","","",34,null],[11,"from_seed","","",34,null],[11,"clone","","",35,{"inputs":[{"name":"threadrng"}],"output":{"name":"threadrng"}}],[11,"next_u32","","",35,{"inputs":[{"name":"threadrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",35,{"inputs":[{"name":"threadrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",35,null]],"paths":[[3,"Weighted"],[8,"SampleRange"],[3,"Range"],[3,"Gamma"],[3,"ChiSquared"],[3,"FisherF"],[3,"StudentT"],[3,"StandardNormal"],[3,"Normal"],[3,"LogNormal"],[3,"Exp1"],[3,"Exp"],[8,"Sample"],[8,"IndependentSample"],[3,"RandSample"],[3,"WeightedChoice"],[3,"IsaacRng"],[3,"Isaac64Rng"],[3,"ChaChaRng"],[3,"ReseedingRng"],[8,"Reseeder"],[3,"ReseedWithDefault"],[3,"Open01"],[3,"Closed01"],[4,"Option"],[3,"OsRng"],[3,"ReadRng"],[8,"Rand"],[8,"Rng"],[8,"SeedableRng"],[3,"Box"],[3,"Generator"],[3,"AsciiGenerator"],[3,"XorShiftRng"],[3,"StdRng"],[3,"ThreadRng"]]};
searchIndex['num_cpus'] = {"items":[[0,"","num_cpus","Replaces the deprecated functionality of std::os::num_cpus.",null,null],[5,"get","","Returns the number of CPUs of the current machine.",null,{"inputs":[],"output":{"name":"usize"}}]],"paths":[]};
searchIndex['time'] = {"items":[[0,"","time","Simple time handling.",null,null],[3,"Duration","","ISO 8601 time duration with nanosecond precision.\nThis also allows for the negative duration; see individual methods for details.",null,null],[3,"Timespec","","A record specifying a time value in seconds and nanoseconds, where\nnanoseconds represent the offset from the given second.",null,null],[12,"sec","","",0,null],[12,"nsec","","",0,null],[3,"PreciseTime","","An opaque structure representing a moment in time.",null,null],[3,"SteadyTime","","A structure representing a moment in time.",null,null],[3,"Tm","","Holds a calendar date and time broken down into its components (year, month,\nday, and so on), also called a broken-down time value.",null,null],[12,"tm_sec","","Seconds after the minute - [0, 60]",1,null],[12,"tm_min","","Minutes after the hour - [0, 59]",1,null],[12,"tm_hour","","Hours after midnight - [0, 23]",1,null],[12,"tm_mday","","Day of the month - [1, 31]",1,null],[12,"tm_mon","","Months since January - [0, 11]",1,null],[12,"tm_year","","Years since 1900",1,null],[12,"tm_wday","","Days since Sunday - [0, 6]. 0 = Sunday, 1 = Monday, ..., 6 = Saturday.",1,null],[12,"tm_yday","","Days since January 1 - [0, 365]",1,null],[12,"tm_isdst","","Daylight Saving Time flag.",1,null],[12,"tm_utcoff","","Identifies the time zone that was used to compute this broken-down time\nvalue, including any adjustment for Daylight Saving Time. This is the\nnumber of seconds east of UTC. For example, for U.S. Pacific Daylight\nTime, the value is -7*60*60 = -25200.",1,null],[12,"tm_nsec","","Nanoseconds after the second - [0, 10<sup>9</sup> - 1]",1,null],[3,"TmFmt","","A wrapper around a `Tm` and format string that implements Display.",null,null],[4,"ParseError","","",null,null],[13,"InvalidSecond","","",2,null],[13,"InvalidMinute","","",2,null],[13,"InvalidHour","","",2,null],[13,"InvalidDay","","",2,null],[13,"InvalidMonth","","",2,null],[13,"InvalidYear","","",2,null],[13,"InvalidDayOfWeek","","",2,null],[13,"InvalidDayOfMonth","","",2,null],[13,"InvalidDayOfYear","","",2,null],[13,"InvalidZoneOffset","","",2,null],[13,"InvalidTime","","",2,null],[13,"InvalidSecondsSinceEpoch","","",2,null],[13,"MissingFormatConverter","","",2,null],[13,"InvalidFormatSpecifier","","",2,null],[13,"UnexpectedCharacter","","",2,null],[5,"strptime","","Parses the time from the string according to the format string.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[5,"get_time","","Returns the current time as a `timespec` containing the seconds and\nnanoseconds since 1970-01-01T00:00:00Z.",null,{"inputs":[],"output":{"name":"timespec"}}],[5,"precise_time_ns","","Returns the current value of a high-resolution performance counter\nin nanoseconds since an unspecified epoch.",null,{"inputs":[],"output":{"name":"u64"}}],[5,"precise_time_s","","Returns the current value of a high-resolution performance counter\nin seconds since an unspecified epoch.",null,{"inputs":[],"output":{"name":"f64"}}],[5,"tzset","","",null,{"inputs":[],"output":null}],[5,"empty_tm","","",null,{"inputs":[],"output":{"name":"tm"}}],[5,"at_utc","","Returns the specified time in UTC",null,{"inputs":[{"name":"timespec"}],"output":{"name":"tm"}}],[5,"now_utc","","Returns the current time in UTC",null,{"inputs":[],"output":{"name":"tm"}}],[5,"at","","Returns the specified time in the local timezone",null,{"inputs":[{"name":"timespec"}],"output":{"name":"tm"}}],[5,"now","","Returns the current time in the local timezone",null,{"inputs":[],"output":{"name":"tm"}}],[5,"strftime","","Formats the time according to the format string.",null,{"inputs":[{"name":"str"},{"name":"tm"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"tmfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"duration"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"eq","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"duration"}],"output":{"name":"duration"}}],[11,"weeks","","Makes a new `Duration` with given number of weeks.\nEquivalent to `Duration::seconds(weeks * 7 * 24 * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",4,{"inputs":[{"name":"duration"},{"name":"i64"}],"output":{"name":"duration"}}],[11,"days","","Makes a new `Duration` with given number of days.\nEquivalent to `Duration::seconds(days * 24 * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",4,{"inputs":[{"name":"duration"},{"name":"i64"}],"output":{"name":"duration"}}],[11,"hours","","Makes a new `Duration` with given number of hours.\nEquivalent to `Duration::seconds(hours * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",4,{"inputs":[{"name":"duration"},{"name":"i64"}],"output":{"name":"duration"}}],[11,"minutes","","Makes a new `Duration` with given number of minutes.\nEquivalent to `Duration::seconds(minutes * 60)` with overflow checks.\nPanics when the duration is out of bounds.",4,{"inputs":[{"name":"duration"},{"name":"i64"}],"output":{"name":"duration"}}],[11,"seconds","","Makes a new `Duration` with given number of seconds.\nPanics when the duration is more than `i64::MAX` milliseconds\nor less than `i64::MIN` milliseconds.",4,{"inputs":[{"name":"duration"},{"name":"i64"}],"output":{"name":"duration"}}],[11,"milliseconds","","Makes a new `Duration` with given number of milliseconds.",4,{"inputs":[{"name":"duration"},{"name":"i64"}],"output":{"name":"duration"}}],[11,"microseconds","","Makes a new `Duration` with given number of microseconds.",4,{"inputs":[{"name":"duration"},{"name":"i64"}],"output":{"name":"duration"}}],[11,"nanoseconds","","Makes a new `Duration` with given number of nanoseconds.",4,{"inputs":[{"name":"duration"},{"name":"i64"}],"output":{"name":"duration"}}],[11,"span","","Runs a closure, returning the duration of time it took to run the\nclosure.",4,{"inputs":[{"name":"duration"},{"name":"f"}],"output":{"name":"duration"}}],[11,"num_weeks","","Returns the total number of whole weeks in the duration.",4,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_days","","Returns the total number of whole days in the duration.",4,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_hours","","Returns the total number of whole hours in the duration.",4,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_minutes","","Returns the total number of whole minutes in the duration.",4,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_seconds","","Returns the total number of whole seconds in the duration.",4,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_milliseconds","","Returns the total number of whole milliseconds in the duration,",4,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_microseconds","","Returns the total number of whole microseconds in the duration,\nor `None` on overflow (exceeding 2^63 microseconds in either direction).",4,{"inputs":[{"name":"duration"}],"output":{"name":"option"}}],[11,"num_nanoseconds","","Returns the total number of whole nanoseconds in the duration,\nor `None` on overflow (exceeding 2^63 nanoseconds in either direction).",4,{"inputs":[{"name":"duration"}],"output":{"name":"option"}}],[11,"checked_add","","Add two durations, returning `None` if overflow occurred.",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"option"}}],[11,"checked_sub","","Subtract two durations, returning `None` if overflow occurred.",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"option"}}],[11,"min_value","","The minimum possible `Duration`: `i64::MIN` milliseconds.",4,{"inputs":[{"name":"duration"}],"output":{"name":"duration"}}],[11,"max_value","","The maximum possible `Duration`: `i64::MAX` milliseconds.",4,{"inputs":[{"name":"duration"}],"output":{"name":"duration"}}],[11,"zero","","A duration where the stored seconds and nanoseconds are equal to zero.",4,{"inputs":[{"name":"duration"}],"output":{"name":"duration"}}],[11,"is_zero","","Returns `true` if the duration equals `Duration::zero()`.",4,{"inputs":[{"name":"duration"}],"output":{"name":"bool"}}],[11,"neg","","",4,{"inputs":[{"name":"duration"}],"output":{"name":"duration"}}],[11,"add","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"sub","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"mul","","",4,{"inputs":[{"name":"duration"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"div","","",4,{"inputs":[{"name":"duration"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"fmt","","",4,{"inputs":[{"name":"duration"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"timespec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"timespec"}],"output":{"name":"timespec"}}],[11,"new","","",0,{"inputs":[{"name":"timespec"},{"name":"i64"},{"name":"i32"}],"output":{"name":"timespec"}}],[11,"add","","",0,{"inputs":[{"name":"timespec"},{"name":"duration"}],"output":{"name":"timespec"}}],[11,"sub","","",0,{"inputs":[{"name":"timespec"},{"name":"duration"}],"output":{"name":"timespec"}}],[11,"sub","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"duration"}}],[11,"clone","","",5,{"inputs":[{"name":"precisetime"}],"output":{"name":"precisetime"}}],[11,"now","","Returns a `PreciseTime` representing the current moment in time.",5,{"inputs":[{"name":"precisetime"}],"output":{"name":"precisetime"}}],[11,"to","","Returns a `Duration` representing the span of time from the value of\n`self` to the value of `later`.",5,{"inputs":[{"name":"precisetime"},{"name":"precisetime"}],"output":{"name":"duration"}}],[11,"fmt","","",6,{"inputs":[{"name":"steadytime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"cmp","","",6,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"option"}}],[11,"lt","","",6,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"le","","",6,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"gt","","",6,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"ge","","",6,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"steadytime"}],"output":{"name":"steadytime"}}],[11,"now","","Returns a `SteadyTime` representing the current moment in time.",6,{"inputs":[{"name":"steadytime"}],"output":{"name":"steadytime"}}],[11,"fmt","","",6,{"inputs":[{"name":"steadytime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"sub","","",6,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"duration"}}],[11,"sub","","",6,{"inputs":[{"name":"steadytime"},{"name":"duration"}],"output":{"name":"steadytime"}}],[11,"add","","",6,{"inputs":[{"name":"steadytime"},{"name":"duration"}],"output":{"name":"steadytime"}}],[11,"hash","","",1,null],[11,"fmt","","",1,{"inputs":[{"name":"tm"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"tm"}],"output":{"name":"tm"}}],[11,"add","","The resulting Tm is in UTC.",1,{"inputs":[{"name":"tm"},{"name":"duration"}],"output":{"name":"tm"}}],[11,"sub","","The resulting Tm is in UTC.",1,{"inputs":[{"name":"tm"},{"name":"duration"}],"output":{"name":"tm"}}],[11,"sub","","",1,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"duration"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"ordering"}}],[11,"to_timespec","","Convert time to the seconds from January 1, 1970",1,{"inputs":[{"name":"tm"}],"output":{"name":"timespec"}}],[11,"to_local","","Convert time to the local timezone",1,{"inputs":[{"name":"tm"}],"output":{"name":"tm"}}],[11,"to_utc","","Convert time to the UTC",1,{"inputs":[{"name":"tm"}],"output":{"name":"tm"}}],[11,"ctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO\nC, in the local timezone.",1,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"asctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO\nC.",1,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"strftime","","Formats the time according to the format string.",1,{"inputs":[{"name":"tm"},{"name":"str"}],"output":{"name":"result"}}],[11,"rfc822","","Returns a TmFmt that outputs according to RFC 822.",1,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"rfc822z","","Returns a TmFmt that outputs according to RFC 822 with Zulu time.",1,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"rfc3339","","Returns a TmFmt that outputs according to RFC 3339. RFC 3339 is\ncompatible with ISO 8601.",1,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"clone","","",2,{"inputs":[{"name":"parseerror"}],"output":{"name":"parseerror"}}],[11,"fmt","","",2,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",2,{"inputs":[{"name":"parseerror"}],"output":{"name":"str"}}],[11,"fmt","","",3,{"inputs":[{"name":"tmfmt"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Timespec"],[3,"Tm"],[4,"ParseError"],[3,"TmFmt"],[3,"Duration"],[3,"PreciseTime"],[3,"SteadyTime"]]};
searchIndex['regex'] = {"items":[[0,"","regex","This crate provides a native implementation of regular expressions that is\nheavily based on RE2 both in syntax and in implementation. Notably,\nbackreferences and arbitrary lookahead/lookbehind assertions are not\nprovided. In return, regular expression searching provided by this package\nhas excellent worst-case performance. The specific syntax supported is\ndocumented further down.",null,null],[3,"RegexSet","","Match multiple (possibly overlapping) regular expressions in a single scan.",null,null],[3,"SetMatches","","A set of matches returned by a regex set.",null,null],[3,"SetMatchesIntoIter","","An owned iterator over the set of matches from a regex set.",null,null],[3,"SetMatchesIter","","A borrowed iterator over the set of matches from a regex set.",null,null],[3,"Regex","","A compiled regular expression for matching Unicode strings.",null,null],[3,"Captures","","Captures represents a group of captured strings for a single match.",null,null],[3,"SubCaptures","","An iterator over capture groups for a particular match of a regular\nexpression.",null,null],[3,"SubCapturesPos","","An iterator over capture group positions for a particular match of a\nregular expression.",null,null],[3,"SubCapturesNamed","","An Iterator over named capture groups as a tuple with the group\nname and the value.",null,null],[3,"CaptureNames","","An iterator over the names of all possible captures.",null,null],[3,"FindCaptures","","An iterator that yields all non-overlapping capture groups matching a\nparticular regular expression.",null,null],[3,"FindMatches","","An iterator over all non-overlapping matches for a particular string.",null,null],[3,"NoExpand","","NoExpand indicates literal string replacement.",null,null],[3,"RegexSplits","","Yields all substrings delimited by a regular expression match.",null,null],[3,"RegexSplitsN","","Yields at most `N` substrings delimited by a regular expression match.",null,null],[4,"Error","","An error that occurred during parsing or compiling a regular expression.",null,null],[13,"Syntax","","A syntax error.",0,null],[13,"CompiledTooBig","","The compiled program exceeded the set size limit.\nThe argument is the size limit imposed.",0,null],[13,"InvalidSet","","**DEPRECATED:** Will be removed on next major version bump.",0,null],[5,"quote","","Escapes all regular expression meta characters in `text`.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"is_match","","Tests if the given regular expression matches somewhere in the text given.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[0,"bytes","","Match regular expressions on arbitrary bytes.",null,null],[3,"RegexSet","regex::bytes","Match multiple (possibly overlapping) regular expressions in a single scan.",null,null],[3,"SetMatches","","A set of matches returned by a regex set.",null,null],[3,"SetMatchesIterBytes","","A borrowed iterator over the set of matches from a regex set.",null,null],[3,"SetMatchesIntoIterBytes","","An owned iterator over the set of matches from a regex set.",null,null],[3,"Regex","","A compiled regular expression for matching arbitrary bytes.",null,null],[3,"FindMatches","","An iterator over all non-overlapping matches for a particular string.",null,null],[3,"FindCaptures","","An iterator that yields all non-overlapping capture groups matching a\nparticular regular expression.",null,null],[3,"Splits","","Yields all substrings delimited by a regular expression match.",null,null],[3,"SplitsN","","Yields at most `N` substrings delimited by a regular expression match.",null,null],[3,"CaptureNames","","An iterator over the names of all possible captures.",null,null],[3,"Captures","","Captures represents a group of captured byte strings for a single match.",null,null],[3,"SubCaptures","","An iterator over capture groups for a particular match of a regular\nexpression.",null,null],[3,"SubCapturesPos","","An iterator over capture group positions for a particular match of a\nregular expression.",null,null],[3,"SubCapturesNamed","","An Iterator over named capture groups as a tuple with the group name and\nthe value.",null,null],[3,"NoExpand","","NoExpand indicates literal byte string replacement.",null,null],[8,"Replacer","","Replacer describes types that can be used to replace matches in a byte\nstring.",null,null],[10,"replace_append","","Appends text to `dst` to replace the current match.",1,{"inputs":[{"name":"replacer"},{"name":"captures"},{"name":"vec"}],"output":null}],[11,"no_expansion","","Return a fixed unchanging replacement byte string.",1,{"inputs":[{"name":"replacer"}],"output":{"name":"option"}}],[11,"fmt","regex","",0,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"fmt","","",0,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"error"}}],[11,"new","mempool","Create a new memory pool with the given initialization function.",2,{"inputs":[{"name":"pool"},{"name":"box"}],"output":{"name":"pool"}}],[11,"get","","Get a new value from the pool.",2,{"inputs":[{"name":"pool"}],"output":{"name":"guard"}}],[11,"get_ref","","Get a new value from the pool.",2,{"inputs":[{"name":"pool"}],"output":{"name":"refguard"}}],[11,"clone","","",2,{"inputs":[{"name":"pool"}],"output":{"name":"pool"}}],[11,"fmt","","",2,{"inputs":[{"name":"pool"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"refguard"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"guard"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",3,null],[11,"deref","","",3,{"inputs":[{"name":"refguard"}],"output":{"name":"t"}}],[11,"deref_mut","","",3,{"inputs":[{"name":"refguard"}],"output":{"name":"t"}}],[11,"drop","","",4,null],[11,"deref","","",4,{"inputs":[{"name":"guard"}],"output":{"name":"t"}}],[11,"deref_mut","","",4,{"inputs":[{"name":"guard"}],"output":{"name":"t"}}],[11,"fmt","","",5,{"inputs":[{"name":"stack"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"spinlock"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"no_expansion","regex::re_bytes","Return a fixed unchanging replacement byte string.",1,{"inputs":[{"name":"replacer"}],"output":{"name":"option"}}],[11,"clone","regex::bytes","",7,{"inputs":[{"name":"regex"}],"output":{"name":"regex"}}],[11,"fmt","","Shows the original regular expression.",7,{"inputs":[{"name":"regex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Shows the original regular expression.",7,{"inputs":[{"name":"regex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","Attempts to parse a string into a regular expression",7,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"result"}}],[11,"new","","Compiles a regular expression. Once compiled, it can be used repeatedly\nto search, split or replace text in a string.",7,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"result"}}],[11,"with_size_limit","","Compiles a regular expression with the given size limit.",7,{"inputs":[{"name":"regex"},{"name":"usize"},{"name":"str"}],"output":{"name":"result"}}],[11,"is_match","","Returns true if and only if the regex matches the string given.",7,null],[11,"find","","Returns the start and end byte range of the leftmost-first match in\n`text`. If no match exists, then `None` is returned.",7,null],[11,"find_iter","","Returns an iterator for each successive non-overlapping match in\n`text`, returning the start and end byte indices with respect to\n`text`.",7,null],[11,"captures","","Returns the capture groups corresponding to the leftmost-first\nmatch in `text`. Capture group `0` always corresponds to the entire\nmatch. If no match is found, then `None` is returned.",7,null],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture groups matched\nin `text`. This is operationally the same as `find_iter`, except it\nyields information about submatches.",7,null],[11,"split","","Returns an iterator of substrings of `text` delimited by a match of the\nregular expression. Namely, each element of the iterator corresponds to\ntext that *isn't* matched by the regular expression.",7,null],[11,"splitn","","Returns an iterator of at most `limit` substrings of `text` delimited\nby a match of the regular expression. (A `limit` of `0` will return no\nsubstrings.) Namely, each element of the iterator corresponds to text\nthat *isn't* matched by the regular expression. The remainder of the\nstring that is not split will be the last element in the iterator.",7,null],[11,"replace","","Replaces the leftmost-first match with the replacement provided. The\nreplacement can be a regular byte string (where `$N` and `$name` are\nexpanded to match capture groups) or a function that takes the matches'\n`Captures` and returns the replaced byte string.",7,null],[11,"replace_all","","Replaces all non-overlapping matches in `text` with the replacement\nprovided. This is the same as calling `replacen` with `limit` set to\n`0`.",7,null],[11,"replacen","","Replaces at most `limit` non-overlapping matches in `text` with the\nreplacement provided. If `limit` is 0, then all non-overlapping matches\nare replaced.",7,null],[11,"shortest_match","","Returns the end location of a match in the text given.",7,null],[11,"as_str","","Returns the original string of this regex.",7,{"inputs":[{"name":"regex"}],"output":{"name":"str"}}],[11,"capture_names","","Returns an iterator over the capture names.",7,{"inputs":[{"name":"regex"}],"output":{"name":"capturenames"}}],[11,"captures_len","","Returns the number of captures.",7,{"inputs":[{"name":"regex"}],"output":{"name":"usize"}}],[11,"next","","",8,{"inputs":[{"name":"findmatches"}],"output":{"name":"option"}}],[11,"next","","",9,{"inputs":[{"name":"findcaptures"}],"output":{"name":"option"}}],[11,"next","","",10,{"inputs":[{"name":"splits"}],"output":{"name":"option"}}],[11,"next","","",11,{"inputs":[{"name":"splitsn"}],"output":{"name":"option"}}],[11,"next","","",12,{"inputs":[{"name":"capturenames"}],"output":{"name":"option"}}],[11,"size_hint","","",12,null],[11,"pos","","Returns the start and end positions of the Nth capture group. Returns\n`None` if `i` is not a valid capture group or if the capture group did\nnot match anything. The positions returned are *always* byte indices\nwith respect to the original byte string matched.",13,{"inputs":[{"name":"captures"},{"name":"usize"}],"output":{"name":"option"}}],[11,"at","","Returns the matched string for the capture group `i`.  If `i` isn't\na valid capture group or didn't match anything, then `None` is\nreturned.",13,{"inputs":[{"name":"captures"},{"name":"usize"}],"output":{"name":"option"}}],[11,"name","","Returns the matched string for the capture group named `name`.  If\n`name` isn't a valid capture group or didn't match anything, then\n`None` is returned.",13,{"inputs":[{"name":"captures"},{"name":"str"}],"output":{"name":"option"}}],[11,"iter","","Creates an iterator of all the capture groups in order of appearance\nin the regular expression.",13,{"inputs":[{"name":"captures"}],"output":{"name":"subcaptures"}}],[11,"iter_pos","","Creates an iterator of all the capture group positions in order of\nappearance in the regular expression. Positions are byte indices\nin terms of the original string matched.",13,{"inputs":[{"name":"captures"}],"output":{"name":"subcapturespos"}}],[11,"iter_named","","Creates an iterator of all named groups as an tuple with the group\nname and the value. The iterator returns these values in arbitrary\norder.",13,{"inputs":[{"name":"captures"}],"output":{"name":"subcapturesnamed"}}],[11,"expand","","Expands all instances of `$name` in `text` to the corresponding capture\ngroup `name`, and writes them to the `dst` buffer given.",13,null],[11,"len","","Returns the number of captured groups.",13,{"inputs":[{"name":"captures"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if and only if there are no captured groups.",13,{"inputs":[{"name":"captures"}],"output":{"name":"bool"}}],[11,"index","","",13,null],[11,"index","","",13,null],[11,"next","","",14,{"inputs":[{"name":"subcaptures"}],"output":{"name":"option"}}],[11,"next","","",15,{"inputs":[{"name":"subcapturespos"}],"output":{"name":"option"}}],[11,"next","","",16,{"inputs":[{"name":"subcapturesnamed"}],"output":{"name":"option"}}],[11,"replace_append","","",17,{"inputs":[{"name":"noexpand"},{"name":"captures"},{"name":"vec"}],"output":null}],[11,"no_expansion","","",17,{"inputs":[{"name":"noexpand"}],"output":{"name":"option"}}],[11,"clone","regex","",18,{"inputs":[{"name":"regex"}],"output":{"name":"regex"}}],[11,"fmt","","Shows the original regular expression.",18,{"inputs":[{"name":"regex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Shows the original regular expression.",18,{"inputs":[{"name":"regex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",18,{"inputs":[{"name":"regex"},{"name":"regex"}],"output":{"name":"bool"}}],[11,"from_str","","Attempts to parse a string into a regular expression",18,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"result"}}],[11,"new","","Compiles a regular expression. Once compiled, it can be used repeatedly\nto search, split or replace text in a string.",18,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"result"}}],[11,"with_size_limit","","Compiles a regular expression with the given size limit.",18,{"inputs":[{"name":"regex"},{"name":"usize"},{"name":"str"}],"output":{"name":"result"}}],[11,"is_match","","Returns true if and only if the regex matches the string given.",18,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"bool"}}],[11,"find","","Returns the start and end byte range of the leftmost-first match in\n`text`. If no match exists, then `None` is returned.",18,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"option"}}],[11,"find_iter","","Returns an iterator for each successive non-overlapping match in\n`text`, returning the start and end byte indices with respect to\n`text`.",18,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"findmatches"}}],[11,"captures","","Returns the capture groups corresponding to the leftmost-first\nmatch in `text`. Capture group `0` always corresponds to the entire\nmatch. If no match is found, then `None` is returned.",18,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"option"}}],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture groups matched\nin `text`. This is operationally the same as `find_iter`, except it\nyields information about submatches.",18,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"findcaptures"}}],[11,"split","","Returns an iterator of substrings of `text` delimited by a match of the\nregular expression. Namely, each element of the iterator corresponds to\ntext that *isn't* matched by the regular expression.",18,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"regexsplits"}}],[11,"splitn","","Returns an iterator of at most `limit` substrings of `text` delimited\nby a match of the regular expression. (A `limit` of `0` will return no\nsubstrings.) Namely, each element of the iterator corresponds to text\nthat *isn't* matched by the regular expression. The remainder of the\nstring that is not split will be the last element in the iterator.",18,{"inputs":[{"name":"regex"},{"name":"str"},{"name":"usize"}],"output":{"name":"regexsplitsn"}}],[11,"replace","","Replaces the leftmost-first match with the replacement provided.\nThe replacement can be a regular string (where `$N` and `$name` are\nexpanded to match capture groups) or a function that takes the matches'\n`Captures` and returns the replaced string.",18,{"inputs":[{"name":"regex"},{"name":"str"},{"name":"r"}],"output":{"name":"string"}}],[11,"replace_all","","Replaces all non-overlapping matches in `text` with the replacement\nprovided. This is the same as calling `replacen` with `limit` set to\n`0`.",18,{"inputs":[{"name":"regex"},{"name":"str"},{"name":"r"}],"output":{"name":"string"}}],[11,"replacen","","Replaces at most `limit` non-overlapping matches in `text` with the\nreplacement provided. If `limit` is 0, then all non-overlapping matches\nare replaced.",18,{"inputs":[{"name":"regex"},{"name":"str"},{"name":"usize"},{"name":"r"}],"output":{"name":"string"}}],[11,"shortest_match","","Returns the end location of a match in the text given.",18,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"option"}}],[11,"as_str","","Returns the original string of this regex.",18,{"inputs":[{"name":"regex"}],"output":{"name":"str"}}],[11,"capture_names","","Returns an iterator over the capture names.",18,{"inputs":[{"name":"regex"}],"output":{"name":"capturenames"}}],[11,"captures_len","","Returns the number of captures.",18,{"inputs":[{"name":"regex"}],"output":{"name":"usize"}}],[11,"next","","",19,{"inputs":[{"name":"capturenames"}],"output":{"name":"option"}}],[11,"size_hint","","",19,null],[11,"reg_replace","","",20,{"inputs":[{"name":"noexpand"},{"name":"captures"}],"output":{"name":"cow"}}],[11,"no_expand","","",20,{"inputs":[{"name":"noexpand"}],"output":{"name":"option"}}],[11,"next","","",21,{"inputs":[{"name":"regexsplits"}],"output":{"name":"option"}}],[11,"next","","",22,{"inputs":[{"name":"regexsplitsn"}],"output":{"name":"option"}}],[11,"pos","","Returns the start and end positions of the Nth capture group. Returns\n`None` if `i` is not a valid capture group or if the capture group did\nnot match anything. The positions returned are *always* byte indices\nwith respect to the original string matched.",23,{"inputs":[{"name":"captures"},{"name":"usize"}],"output":{"name":"option"}}],[11,"at","","Returns the matched string for the capture group `i`.  If `i` isn't\na valid capture group or didn't match anything, then `None` is\nreturned.",23,{"inputs":[{"name":"captures"},{"name":"usize"}],"output":{"name":"option"}}],[11,"name","","Returns the matched string for the capture group named `name`.  If\n`name` isn't a valid capture group or didn't match anything, then\n`None` is returned.",23,{"inputs":[{"name":"captures"},{"name":"str"}],"output":{"name":"option"}}],[11,"iter","","Creates an iterator of all the capture groups in order of appearance\nin the regular expression.",23,{"inputs":[{"name":"captures"}],"output":{"name":"subcaptures"}}],[11,"iter_pos","","Creates an iterator of all the capture group positions in order of\nappearance in the regular expression. Positions are byte indices\nin terms of the original string matched.",23,{"inputs":[{"name":"captures"}],"output":{"name":"subcapturespos"}}],[11,"iter_named","","Creates an iterator of all named groups as an tuple with the group\nname and the value. The iterator returns these values in arbitrary\norder.",23,{"inputs":[{"name":"captures"}],"output":{"name":"subcapturesnamed"}}],[11,"expand","","Expands all instances of `$name` in `text` to the corresponding capture\ngroup `name`.",23,{"inputs":[{"name":"captures"},{"name":"str"}],"output":{"name":"string"}}],[11,"len","","Returns the number of captured groups.",23,{"inputs":[{"name":"captures"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if and only if there are no captured groups.",23,{"inputs":[{"name":"captures"}],"output":{"name":"bool"}}],[11,"index","","",23,{"inputs":[{"name":"captures"},{"name":"usize"}],"output":{"name":"str"}}],[11,"index","","",23,{"inputs":[{"name":"captures"},{"name":"str"}],"output":{"name":"str"}}],[11,"next","","",24,{"inputs":[{"name":"subcaptures"}],"output":{"name":"option"}}],[11,"next","","",25,{"inputs":[{"name":"subcapturespos"}],"output":{"name":"option"}}],[11,"next","","",26,{"inputs":[{"name":"subcapturesnamed"}],"output":{"name":"option"}}],[11,"next","","",27,{"inputs":[{"name":"findcaptures"}],"output":{"name":"option"}}],[11,"next","","",28,{"inputs":[{"name":"findmatches"}],"output":{"name":"option"}}],[11,"clone","","",29,{"inputs":[{"name":"regexset"}],"output":{"name":"regexset"}}],[11,"new","","Create a new regex set with the given regular expressions.",29,{"inputs":[{"name":"regexset"},{"name":"i"}],"output":{"name":"result"}}],[11,"is_match","","Returns true if and only if one of the regexes in this set matches\nthe text given.",29,{"inputs":[{"name":"regexset"},{"name":"str"}],"output":{"name":"bool"}}],[11,"matches","","Returns the set of regular expressions that match in the given text.",29,{"inputs":[{"name":"regexset"},{"name":"str"}],"output":{"name":"setmatches"}}],[11,"len","","Returns the total number of regular expressions in this set.",29,{"inputs":[{"name":"regexset"}],"output":{"name":"usize"}}],[11,"fmt","","",30,{"inputs":[{"name":"setmatches"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",30,{"inputs":[{"name":"setmatches"}],"output":{"name":"setmatches"}}],[11,"matched_any","","Whether this set contains any matches.",30,{"inputs":[{"name":"setmatches"}],"output":{"name":"bool"}}],[11,"matched","","Whether the regex at the given index matched.",30,{"inputs":[{"name":"setmatches"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"len","","The total number of regexes in the set that created these matches.",30,{"inputs":[{"name":"setmatches"}],"output":{"name":"usize"}}],[11,"iter","","Returns an iterator over indexes in the regex that matched.",30,{"inputs":[{"name":"setmatches"}],"output":{"name":"setmatchesiter"}}],[11,"into_iter","","",30,{"inputs":[{"name":"setmatches"}],"output":{"name":"intoiter"}}],[11,"next","","",31,{"inputs":[{"name":"setmatchesintoiter"}],"output":{"name":"option"}}],[11,"clone","","",32,{"inputs":[{"name":"setmatchesiter"}],"output":{"name":"setmatchesiter"}}],[11,"next","","",32,{"inputs":[{"name":"setmatchesiter"}],"output":{"name":"option"}}],[11,"clone","regex::bytes","",33,{"inputs":[{"name":"regexset"}],"output":{"name":"regexsetbytes"}}],[11,"new","","Create a new regex set with the given regular expressions.",33,{"inputs":[{"name":"regexset"},{"name":"i"}],"output":{"name":"result"}}],[11,"is_match","","Returns true if and only if one of the regexes in this set matches\nthe text given.",33,null],[11,"matches","","Returns the set of regular expressions that match in the given text.",33,null],[11,"len","","Returns the total number of regular expressions in this set.",33,{"inputs":[{"name":"regexset"}],"output":{"name":"usize"}}],[11,"fmt","","",34,{"inputs":[{"name":"setmatches"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",34,{"inputs":[{"name":"setmatches"}],"output":{"name":"setmatchesbytes"}}],[11,"matched_any","","Whether this set contains any matches.",34,{"inputs":[{"name":"setmatches"}],"output":{"name":"bool"}}],[11,"matched","","Whether the regex at the given index matched.",34,{"inputs":[{"name":"setmatches"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"len","","The total number of regexes in the set that created these matches.",34,{"inputs":[{"name":"setmatches"}],"output":{"name":"usize"}}],[11,"iter","","Returns an iterator over indexes in the regex that matched.",34,{"inputs":[{"name":"setmatches"}],"output":{"name":"setmatchesiterbytes"}}],[11,"into_iter","","",34,{"inputs":[{"name":"setmatches"}],"output":{"name":"intoiter"}}],[11,"next","","",35,{"inputs":[{"name":"setmatchesintoiterbytes"}],"output":{"name":"option"}}],[11,"clone","","",36,{"inputs":[{"name":"setmatchesiterbytes"}],"output":{"name":"setmatchesiterbytes"}}],[11,"next","","",36,{"inputs":[{"name":"setmatchesiterbytes"}],"output":{"name":"option"}}],[11,"fmt","regex","",29,{"inputs":[{"name":"regexset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","regex::bytes","",33,{"inputs":[{"name":"regexset"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Replacer","regex","Replacer describes types that can be used to replace matches in a string.",null,null],[10,"reg_replace","","Returns a possibly owned string that is used to replace the match\ncorresponding to the `caps` capture group.",37,{"inputs":[{"name":"replacer"},{"name":"captures"}],"output":{"name":"cow"}}],[11,"no_expand","","Returns a possibly owned string that never needs expansion.",37,{"inputs":[{"name":"replacer"}],"output":{"name":"option"}}],[11,"no_expand","","Returns a possibly owned string that never needs expansion.",37,{"inputs":[{"name":"replacer"}],"output":{"name":"option"}}]],"paths":[[4,"Error"],[8,"Replacer"],[3,"Pool"],[3,"RefGuard"],[3,"Guard"],[3,"Stack"],[3,"SpinLock"],[3,"Regex"],[3,"FindMatches"],[3,"FindCaptures"],[3,"Splits"],[3,"SplitsN"],[3,"CaptureNames"],[3,"Captures"],[3,"SubCaptures"],[3,"SubCapturesPos"],[3,"SubCapturesNamed"],[3,"NoExpand"],[3,"Regex"],[3,"CaptureNames"],[3,"NoExpand"],[3,"RegexSplits"],[3,"RegexSplitsN"],[3,"Captures"],[3,"SubCaptures"],[3,"SubCapturesPos"],[3,"SubCapturesNamed"],[3,"FindCaptures"],[3,"FindMatches"],[3,"RegexSet"],[3,"SetMatches"],[3,"SetMatchesIntoIter"],[3,"SetMatchesIter"],[3,"RegexSet"],[3,"SetMatches"],[3,"SetMatchesIntoIterBytes"],[3,"SetMatchesIterBytes"],[8,"Replacer"]]};
searchIndex['solicit'] = {"items":[[0,"","solicit","",null,null],[0,"http","","The module implements the framing layer of HTTP/2 and exposes an API for using it.",null,null],[3,"Response","solicit::http","A struct representing the full raw response received on an HTTP/2 connection.",null,null],[12,"stream_id","","The ID of the stream to which the response is associated. HTTP/1.1 does\nnot really have an equivalent to this.",0,null],[12,"headers","","Exposes *all* the raw response headers, including the meta-headers.\n(For now the only meta header allowed in HTTP/2 responses is the\n`:status`.)",0,null],[12,"body","","The full body of the response as an uninterpreted sequence of bytes.",0,null],[3,"Request","","A struct representing a full HTTP/2 request, along with the full body, as a\nsequence of bytes.",null,null],[12,"stream_id","","",1,null],[12,"headers","","",1,null],[12,"body","","",1,null],[4,"HttpError","","An enum representing errors that can arise when performing operations\ninvolving an HTTP/2 connection.",null,null],[13,"IoError","","",2,null],[13,"InvalidFrame","","",2,null],[13,"CompressionError","","",2,null],[13,"UnknownStreamId","","",2,null],[13,"UnableToConnect","","",2,null],[13,"MalformedResponse","","",2,null],[13,"Other","","",2,null],[4,"HttpScheme","","An enum representing the two possible HTTP schemes.",null,null],[13,"Http","","The variant corresponding to `http://`",3,null],[13,"Https","","The variant corresponding to `https://`",3,null],[0,"frame","","The module contains the implementation of HTTP/2 frames.",null,null],[3,"RawFrame","solicit::http::frame","A struct that defines the format of the raw HTTP/2 frame, i.e. the frame\nas it is read from the wire.",null,null],[5,"unpack_header","","Deconstructs a `FrameHeader` into its corresponding 4 components,\nrepresented as a 4-tuple: `(length, frame_type, flags, stream_id)`.",null,{"inputs":[{"name":"frameheaderbuffer"}],"output":{"name":"frameheader"}}],[5,"pack_header","","Constructs a buffer of 9 bytes that represents the given `FrameHeader`.",null,{"inputs":[{"name":"frameheader"}],"output":{"name":"frameheaderbuffer"}}],[0,"data","","The module contains the implementation of the `DATA` frame and associated flags.",null,null],[3,"DataFrame","solicit::http::frame::data","A struct representing the DATA frames of HTTP/2, as defined in the HTTP/2\nspec, section 6.1.",null,null],[12,"data","","The data found in the frame as an opaque byte sequence. It never\nincludes padding bytes.",4,null],[4,"DataFlag","","An enum representing the flags that a `DataFrame` can have.\nThe integer representation associated to each variant is that flag's\nbitmask.",null,null],[13,"EndStream","","",5,null],[13,"Padded","","",5,null],[11,"clone","","",5,{"inputs":[{"name":"dataflag"}],"output":{"name":"dataflag"}}],[11,"eq","","",5,{"inputs":[{"name":"dataflag"},{"name":"dataflag"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"dataflag"},{"name":"dataflag"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"dataflag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bitmask","","",5,{"inputs":[{"name":"dataflag"}],"output":{"name":"u8"}}],[11,"eq","","",4,{"inputs":[{"name":"dataframe"},{"name":"dataframe"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"dataframe"},{"name":"dataframe"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"dataframe"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"dataframe"}],"output":{"name":"dataframe"}}],[11,"new","","Creates a new empty `DataFrame`, associated to the stream with the\ngiven ID.",4,{"inputs":[{"name":"dataframe"},{"name":"streamid"}],"output":{"name":"dataframe"}}],[11,"is_padded","","Returns `true` if the DATA frame is padded, otherwise false.",4,{"inputs":[{"name":"dataframe"}],"output":{"name":"bool"}}],[11,"is_end_of_stream","","Returns whther this frame ends the stream it is associated with.",4,{"inputs":[{"name":"dataframe"}],"output":{"name":"bool"}}],[11,"set_padding","","Sets the number of bytes that should be used as padding for this\nframe.",4,{"inputs":[{"name":"dataframe"},{"name":"u8"}],"output":null}],[11,"from_raw","","Creates a new `DataFrame` from the given `RawFrame` (i.e. header and\npayload), if possible.  Returns `None` if a valid `DataFrame` cannot be\nconstructed from the given `RawFrame`.",4,{"inputs":[{"name":"dataframe"},{"name":"rawframe"}],"output":{"name":"option"}}],[11,"is_set","","Tests if the given flag is set for the frame.",4,{"inputs":[{"name":"dataframe"},{"name":"dataflag"}],"output":{"name":"bool"}}],[11,"set_flag","","Sets the given flag for the frame.",4,{"inputs":[{"name":"dataframe"},{"name":"dataflag"}],"output":null}],[11,"get_stream_id","","Returns the `StreamId` of the stream to which the frame is associated.",4,{"inputs":[{"name":"dataframe"}],"output":{"name":"streamid"}}],[11,"get_header","","Returns a `FrameHeader` based on the current state of the frame.",4,{"inputs":[{"name":"dataframe"}],"output":{"name":"frameheader"}}],[11,"serialize","","Returns a `Vec` with the serialized representation of the frame.",4,{"inputs":[{"name":"dataframe"}],"output":{"name":"vec"}}],[0,"headers","solicit::http::frame","The module contains the implementation of the `HEADERS` frame and associated flags.",null,null],[3,"StreamDependency","solicit::http::frame::headers","The struct represents the dependency information that can be attached to\na stream and sent within a HEADERS frame (one with the Priority flag set).",null,null],[12,"stream_id","","The ID of the stream that a particular stream depends on",6,null],[12,"weight","","The weight for the stream. The value exposed (and set) here is always\nin the range [0, 255], instead of [1, 256] \\(as defined in section 5.3.2.)\nso that the value fits into a `u8`.",6,null],[12,"is_exclusive","","A flag indicating whether the stream dependency is exclusive.",6,null],[3,"HeadersFrame","","A struct representing the HEADERS frames of HTTP/2, as defined in the\nHTTP/2 spec, section 6.2.",null,null],[12,"header_fragment","","The header fragment bytes stored within the frame.",7,null],[12,"stream_id","","The ID of the stream with which this frame is associated",7,null],[12,"stream_dep","","The stream dependency information, if any.",7,null],[12,"padding_len","","The length of the padding, if any.",7,null],[4,"HeadersFlag","","An enum representing the flags that a `HeadersFrame` can have.\nThe integer representation associated to each variant is that flag's\nbitmask.",null,null],[13,"EndStream","","",8,null],[13,"EndHeaders","","",8,null],[13,"Padded","","",8,null],[13,"Priority","","",8,null],[11,"clone","","",8,{"inputs":[{"name":"headersflag"}],"output":{"name":"headersflag"}}],[11,"eq","","",8,{"inputs":[{"name":"headersflag"},{"name":"headersflag"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"headersflag"},{"name":"headersflag"}],"output":{"name":"bool"}}],[11,"fmt","","",8,{"inputs":[{"name":"headersflag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bitmask","","",8,{"inputs":[{"name":"headersflag"}],"output":{"name":"u8"}}],[11,"eq","","",6,{"inputs":[{"name":"streamdependency"},{"name":"streamdependency"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"streamdependency"},{"name":"streamdependency"}],"output":{"name":"bool"}}],[11,"fmt","","",6,{"inputs":[{"name":"streamdependency"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"streamdependency"}],"output":{"name":"streamdependency"}}],[11,"new","","Creates a new `StreamDependency` with the given stream ID, weight, and\nexclusivity.",6,{"inputs":[{"name":"streamdependency"},{"name":"streamid"},{"name":"u8"},{"name":"bool"}],"output":{"name":"streamdependency"}}],[11,"parse","","Parses the first 5 bytes in the buffer as a `StreamDependency`.\n(Each 5-byte sequence is always decodable into a stream dependency\nstructure).",6,null],[11,"serialize","","Serializes the `StreamDependency` into a 5-byte buffer representing the\ndependency description, as described in section 6.2. of the HTTP/2\nspec:",6,null],[11,"eq","","",7,{"inputs":[{"name":"headersframe"},{"name":"headersframe"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"headersframe"},{"name":"headersframe"}],"output":{"name":"bool"}}],[11,"fmt","","",7,{"inputs":[{"name":"headersframe"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"headersframe"}],"output":{"name":"headersframe"}}],[11,"new","","Creates a new `HeadersFrame` with the given header fragment and stream\nID. No padding, no stream dependency, and no flags are set.",7,{"inputs":[{"name":"headersframe"},{"name":"vec"},{"name":"streamid"}],"output":{"name":"headersframe"}}],[11,"with_dependency","","Creates a new `HeadersFrame` with the given header fragment, stream ID\nand stream dependency information. No padding and no flags are set.",7,{"inputs":[{"name":"headersframe"},{"name":"vec"},{"name":"streamid"},{"name":"streamdependency"}],"output":{"name":"headersframe"}}],[11,"is_headers_end","","Returns whether this frame ends the headers. If not, there MUST be a\nnumber of follow up CONTINUATION frames that send the rest of the\nheader data.",7,{"inputs":[{"name":"headersframe"}],"output":{"name":"bool"}}],[11,"is_end_of_stream","","Returns whther this frame ends the stream it is associated with.",7,{"inputs":[{"name":"headersframe"}],"output":{"name":"bool"}}],[11,"set_padding","","Sets the padding length for the frame, as well as the corresponding\nPadded flag.",7,{"inputs":[{"name":"headersframe"},{"name":"u8"}],"output":null}],[11,"from_raw","","Creates a new `HeadersFrame` with the given `RawFrame` (i.e. header and\npayload), if possible.",7,{"inputs":[{"name":"headersframe"},{"name":"rawframe"}],"output":{"name":"option"}}],[11,"is_set","","Tests if the given flag is set for the frame.",7,{"inputs":[{"name":"headersframe"},{"name":"headersflag"}],"output":{"name":"bool"}}],[11,"get_stream_id","","Returns the `StreamId` of the stream to which the frame is associated.",7,{"inputs":[{"name":"headersframe"}],"output":{"name":"streamid"}}],[11,"get_header","","Returns a `FrameHeader` based on the current state of the `Frame`.",7,{"inputs":[{"name":"headersframe"}],"output":{"name":"frameheader"}}],[11,"set_flag","","Sets the given flag for the frame.",7,{"inputs":[{"name":"headersframe"},{"name":"headersflag"}],"output":null}],[11,"serialize","","Returns a `Vec` with the serialized representation of the frame.",7,{"inputs":[{"name":"headersframe"}],"output":{"name":"vec"}}],[0,"settings","solicit::http::frame","The module contains the implementation of the `SETTINGS` frame and associated flags.",null,null],[3,"SettingsFrame","solicit::http::frame::settings","A struct representing the SETTINGS frames of HTTP/2, as defined in the\nHTTP/2 spec, section 6.5.",null,null],[12,"settings","","Contains all the settings that are currently set in the frame. It is\nsafe to access this field (to read, add, or remove settings), even\nthough a helper method `add_setting` exists.",9,null],[4,"HttpSetting","","An enum that lists all valid settings that can be sent in a SETTINGS\nframe.",null,null],[13,"HeaderTableSize","","",10,null],[13,"EnablePush","","",10,null],[13,"MaxConcurrentStreams","","",10,null],[13,"InitialWindowSize","","",10,null],[13,"MaxFrameSize","","",10,null],[13,"MaxHeaderListSize","","",10,null],[4,"SettingsFlag","","An enum representing the flags that a `SettingsFrame` can have.\nThe integer representation associated to each variant is that flag's\nbitmask.",null,null],[13,"Ack","","",11,null],[11,"clone","","",10,{"inputs":[{"name":"httpsetting"}],"output":{"name":"httpsetting"}}],[11,"eq","","",10,{"inputs":[{"name":"httpsetting"},{"name":"httpsetting"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"httpsetting"},{"name":"httpsetting"}],"output":{"name":"bool"}}],[11,"fmt","","",10,{"inputs":[{"name":"httpsetting"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_id","","Creates a new `HttpSetting` with the correct variant corresponding to\nthe given setting id, based on the settings IDs defined in section\n6.5.2.",10,{"inputs":[{"name":"httpsetting"},{"name":"u16"},{"name":"u32"}],"output":{"name":"option"}}],[11,"get_id","","Returns the setting ID as an unsigned 16 bit integer, as defined in\nsection 6.5.2.",10,{"inputs":[{"name":"httpsetting"}],"output":{"name":"u16"}}],[11,"get_val","","Gets the setting value by unpacking it from the wrapped `u32`.",10,{"inputs":[{"name":"httpsetting"}],"output":{"name":"u32"}}],[11,"clone","","",11,{"inputs":[{"name":"settingsflag"}],"output":{"name":"settingsflag"}}],[11,"eq","","",11,{"inputs":[{"name":"settingsflag"},{"name":"settingsflag"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"settingsflag"},{"name":"settingsflag"}],"output":{"name":"bool"}}],[11,"fmt","","",11,{"inputs":[{"name":"settingsflag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bitmask","","",11,{"inputs":[{"name":"settingsflag"}],"output":{"name":"u8"}}],[11,"eq","","",9,{"inputs":[{"name":"settingsframe"},{"name":"settingsframe"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"settingsframe"},{"name":"settingsframe"}],"output":{"name":"bool"}}],[11,"fmt","","",9,{"inputs":[{"name":"settingsframe"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"settingsframe"}],"output":{"name":"settingsframe"}}],[11,"new","","Creates a new `SettingsFrame`",9,{"inputs":[{"name":"settingsframe"}],"output":{"name":"settingsframe"}}],[11,"new_ack","","A convenience constructor that returns a `SettingsFrame` with the ACK\nflag already set and no settings.",9,{"inputs":[{"name":"settingsframe"}],"output":{"name":"settingsframe"}}],[11,"add_setting","","Adds the given setting to the frame.",9,{"inputs":[{"name":"settingsframe"},{"name":"httpsetting"}],"output":null}],[11,"set_ack","","Sets the ACK flag for the frame. This method is just a convenience\nmethod for calling `frame.set_flag(SettingsFlag::Ack)`.",9,{"inputs":[{"name":"settingsframe"}],"output":null}],[11,"is_ack","","Checks whether the `SettingsFrame` has an ACK attached to it.",9,{"inputs":[{"name":"settingsframe"}],"output":{"name":"bool"}}],[11,"from_raw","","Creates a new `SettingsFrame` with the given `RawFrame` (i.e. header and\npayload), if possible.",9,{"inputs":[{"name":"settingsframe"},{"name":"rawframe"}],"output":{"name":"option"}}],[11,"is_set","","Tests if the given flag is set for the frame.",9,{"inputs":[{"name":"settingsframe"},{"name":"settingsflag"}],"output":{"name":"bool"}}],[11,"get_stream_id","","Returns the `StreamId` of the stream to which the frame is associated.",9,{"inputs":[{"name":"settingsframe"}],"output":{"name":"streamid"}}],[11,"get_header","","Returns a `FrameHeader` based on the current state of the `Frame`.",9,{"inputs":[{"name":"settingsframe"}],"output":{"name":"frameheader"}}],[11,"set_flag","","Sets the given flag for the frame.",9,{"inputs":[{"name":"settingsframe"},{"name":"settingsflag"}],"output":null}],[11,"serialize","","Returns a `Vec` with the serialized representation of the frame.",9,{"inputs":[{"name":"settingsframe"}],"output":{"name":"vec"}}],[6,"FrameHeaderBuffer","solicit::http::frame","An alias for the 9-byte buffer that each HTTP/2 frame header must be stored\nin.",null,null],[6,"FrameHeader","","An alias for the 4-tuple representing the components of each HTTP/2 frame\nheader.",null,null],[8,"Flag","","A trait that all HTTP/2 frame header flags need to implement.",null,null],[10,"bitmask","","Returns a bit mask that represents the flag.",12,{"inputs":[{"name":"flag"}],"output":{"name":"u8"}}],[8,"Frame","","A trait that all HTTP/2 frame structs need to implement.",null,null],[16,"FlagType","","The type that represents the flags that the particular `Frame` can take.\nThis makes sure that only valid `Flag`s are used with each `Frame`.",13,null],[10,"from_raw","","Creates a new `Frame` from the given `RawFrame` (i.e. header and\npayload), if possible.",13,{"inputs":[{"name":"frame"},{"name":"rawframe"}],"output":{"name":"option"}}],[10,"is_set","","Tests if the given flag is set for the frame.",13,{"inputs":[{"name":"frame"},{"name":"flagtype"}],"output":{"name":"bool"}}],[10,"get_stream_id","","Returns the `StreamId` of the stream to which the frame is associated",13,{"inputs":[{"name":"frame"}],"output":{"name":"streamid"}}],[10,"get_header","","Returns a `FrameHeader` based on the current state of the `Frame`.",13,{"inputs":[{"name":"frame"}],"output":{"name":"frameheader"}}],[10,"set_flag","","Sets the given flag for the frame.",13,{"inputs":[{"name":"frame"},{"name":"flagtype"}],"output":null}],[10,"serialize","","Returns a `Vec` with the serialized representation of the frame.",13,{"inputs":[{"name":"frame"}],"output":{"name":"vec"}}],[11,"eq","","",14,{"inputs":[{"name":"rawframe"},{"name":"rawframe"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"rawframe"},{"name":"rawframe"}],"output":{"name":"bool"}}],[11,"fmt","","",14,{"inputs":[{"name":"rawframe"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"rawframe"}],"output":{"name":"rawframe"}}],[11,"new","","Creates a new `RawFrame` with the given `FrameHeader`. The payload is\nleft empty.",14,{"inputs":[{"name":"rawframe"},{"name":"frameheader"}],"output":{"name":"rawframe"}}],[11,"with_payload","","Creates a new `RawFrame` with the given header and payload.\nDoes not do any validation to determine whether the frame is in a correct\nstate as constructed.",14,{"inputs":[{"name":"rawframe"},{"name":"frameheader"},{"name":"vec"}],"output":{"name":"rawframe"}}],[11,"from_buf","","Creates a new `RawFrame` by parsing the given buffer.",14,null],[11,"serialize","","Returns a `Vec` of bytes representing the serialized (on-the-wire)\nrepresentation of this raw frame.",14,{"inputs":[{"name":"rawframe"}],"output":{"name":"vec"}}],[11,"header","","Returns a `FrameHeader` instance corresponding to the headers of the\n`RawFrame`.",14,{"inputs":[{"name":"rawframe"}],"output":{"name":"frameheader"}}],[11,"payload","","Returns a slice representing the payload of the `RawFrame`.",14,null],[11,"into","","",14,{"inputs":[{"name":"rawframe"}],"output":{"name":"vec"}}],[11,"from","","",14,{"inputs":[{"name":"rawframe"},{"name":"vec"}],"output":{"name":"rawframe"}}],[0,"transport","solicit::http","The module contains implementations of the transport layer functionality\nthat HTTP/2 requires. It exposes APIs that allow the HTTP/2 connection to\nuse the transport layer without requiring it to know which exact\nimplementation they are using (e.g. a clear-text TCP connection, a TLS\nprotected connection, or even a mock implementation).",null,null],[8,"TransportStream","solicit::http::transport","A trait that any struct that wants to provide the transport layer for\nHTTP/2 needs to implement.",null,null],[11,"read_exact","","A convenience method that performs as many `read` calls on the\nunderlying `Read` implementation as it takes to fill the given buffer.",15,null],[10,"try_split","","Attempts to split the `TransportStream` instance into a new independently\nowned handle to the same underlying stream.",15,{"inputs":[{"name":"transportstream"}],"output":{"name":"result"}}],[10,"close","","Attempts to shutdown both ends of the transport stream.",15,{"inputs":[{"name":"transportstream"}],"output":{"name":"result"}}],[11,"try_split","std::net::tcp","",16,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"close","","",16,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[0,"connection","solicit::http","The module contains the implementation of an HTTP/2 connection.",null,null],[3,"HttpConnection","solicit::http::connection","The struct implements the HTTP/2 connection level logic.",null,null],[12,"receiver","","The instance handling the reading of frames.",17,null],[12,"sender","","The instance handling the writing of frames.",17,null],[12,"scheme","","The scheme of the connection",17,null],[3,"DataChunk","","The struct represents a chunk of data that should be sent to the peer on a particular stream.",null,null],[12,"data","","The data that should be sent.",18,null],[12,"stream_id","","The ID of the stream on which the data should be sent.",18,null],[12,"end_stream","","Whether the data chunk will also end the stream.",18,null],[4,"HttpFrame","","An enum representing all frame variants that can be returned by an\n`HttpConnection`.",null,null],[13,"DataFrame","","",19,null],[13,"HeadersFrame","","",19,null],[13,"SettingsFrame","","",19,null],[13,"UnknownFrame","","",19,null],[4,"SendStatus","","The enum represents the success status of the operation of sending a next data chunk on an\nHTTP/2 connection.",null,null],[13,"Sent","","Indicates that a DATA frame was successfully sent",20,null],[13,"Nothing","","Indicates that nothing was sent, but that no errors occurred.",20,null],[4,"EndStream","","An enum indicating whether the `HttpConnection` send operation should end the stream.",null,null],[13,"Yes","","The stream should be closed",21,null],[13,"No","","The stream should still be kept open",21,null],[8,"SendFrame","","A trait that should be implemented by types that can provide the functionality\nof sending HTTP/2 frames.",null,null],[10,"send_raw_frame","","Sends the given raw frame.",22,{"inputs":[{"name":"sendframe"},{"name":"rawframe"}],"output":{"name":"httpresult"}}],[11,"send_frame","","Sends the given concrete frame.",22,{"inputs":[{"name":"sendframe"},{"name":"f"}],"output":{"name":"httpresult"}}],[8,"ReceiveFrame","","A trait that should be implemented by types that can provide the functionality\nof receiving HTTP/2 frames.",null,null],[10,"recv_frame","","Return a new `HttpFrame` instance. Unknown frames can be wrapped in the\n`HttpFrame::UnknownFrame` variant (i.e. their `RawFrame` representation).",23,{"inputs":[{"name":"receiveframe"}],"output":{"name":"httpresult"}}],[11,"eq","","",19,{"inputs":[{"name":"httpframe"},{"name":"httpframe"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"httpframe"},{"name":"httpframe"}],"output":{"name":"bool"}}],[11,"fmt","","",19,{"inputs":[{"name":"httpframe"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"httpframe"}],"output":{"name":"httpframe"}}],[11,"from_raw","","",19,{"inputs":[{"name":"httpframe"},{"name":"rawframe"}],"output":{"name":"httpresult"}}],[11,"fmt","","",20,{"inputs":[{"name":"sendstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",20,{"inputs":[{"name":"sendstatus"},{"name":"sendstatus"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"sendstatus"},{"name":"sendstatus"}],"output":{"name":"bool"}}],[11,"clone","","",20,{"inputs":[{"name":"sendstatus"}],"output":{"name":"sendstatus"}}],[11,"new","","Creates a new `DataChunk`.",18,{"inputs":[{"name":"datachunk"},{"name":"cow"},{"name":"streamid"},{"name":"endstream"}],"output":{"name":"datachunk"}}],[11,"new_borrowed","","Creates a new `DataChunk` from a borrowed slice. This method should become obsolete if we\ncan take an `Into<Cow<_, _>>` without using unstable features.",18,{"inputs":[{"name":"datachunk"},{"name":"d"},{"name":"streamid"},{"name":"endstream"}],"output":{"name":"datachunk"}}],[11,"fmt","","",21,{"inputs":[{"name":"endstream"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",21,{"inputs":[{"name":"endstream"},{"name":"endstream"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"endstream"},{"name":"endstream"}],"output":{"name":"bool"}}],[11,"clone","","",21,{"inputs":[{"name":"endstream"}],"output":{"name":"endstream"}}],[11,"new","","Creates a new `HttpConnection` that will use the given sender and receiver instances\nfor writing and reading frames, respectively.",17,{"inputs":[{"name":"httpconnection"},{"name":"s"},{"name":"r"},{"name":"httpscheme"}],"output":{"name":"httpconnection"}}],[11,"with_stream","","Creates a new `HttpConnection` that will use the given stream as its\nunderlying transport layer.",17,{"inputs":[{"name":"httpconnection"},{"name":"ts"},{"name":"httpscheme"}],"output":{"name":"httpconnection"}}],[11,"send_headers","","A helper function that inserts the frames required to send the given headers onto the\n`SendFrame` stream.",17,{"inputs":[{"name":"httpconnection"},{"name":"h"},{"name":"streamid"},{"name":"endstream"}],"output":{"name":"httpresult"}}],[11,"send_data","","A helper function that inserts a frame representing the given data into the `SendFrame`\nstream.",17,{"inputs":[{"name":"httpconnection"},{"name":"datachunk"}],"output":{"name":"httpresult"}}],[11,"send_next_data","","Sends the chunk of data provided by the given `DataPrioritizer`.",17,{"inputs":[{"name":"httpconnection"},{"name":"p"}],"output":{"name":"httpresult"}}],[11,"expect_settings","","The method processes the next incoming frame, expecting it to be a SETTINGS frame.\nAdditionally, the frame cannot be an ACK settings frame, but rather it should contain the\npeer's settings.",17,{"inputs":[{"name":"httpconnection"},{"name":"sess"}],"output":{"name":"httpresult"}}],[11,"handle_next_frame","","Handles the next frame incoming on the `ReceiveFrame` instance.",17,{"inputs":[{"name":"httpconnection"},{"name":"sess"}],"output":{"name":"httpresult"}}],[0,"session","solicit::http","Defines the interface for the session-level management of HTTP/2\ncommunication. This is effectively an API that allows hooking into an\nHTTP/2 connection in order to handle events arising on the connection.",null,null],[3,"StreamIter","solicit::http::session","A newtype for an iterator over `Stream`s saved in a `SessionState`.",null,null],[3,"DefaultSessionState","","An implementation of the `SessionState` trait that tracks the active streams in a `HashMap`,\nmapping the stream ID to the concrete `Stream` instance.",null,null],[3,"DefaultStream","","An implementation of the `Stream` trait that saves all headers and data\nin memory.",null,null],[12,"stream_id","","The ID of the stream",24,null],[12,"headers","","The headers associated with the stream (i.e. the response headers)",24,null],[12,"body","","The body of the stream (i.e. the response body)",24,null],[12,"state","","The current stream state.",24,null],[4,"StreamState","","The enum represents all the states that an HTTP/2 stream can be found in.",null,null],[13,"Idle","","",25,null],[13,"ReservedLocal","","",25,null],[13,"ReservedRemote","","",25,null],[13,"Open","","",25,null],[13,"HalfClosedRemote","","",25,null],[13,"HalfClosedLocal","","",25,null],[13,"Closed","","",25,null],[4,"StreamDataError","","The enum represents errors that can be returned from the `Stream::get_data_chunk` method.",null,null],[13,"Closed","","Indicates that the stream cannot provide any data, since it is closed for further writes\nfrom the peer's side.",26,null],[13,"Other","","A different error while trying to obtain the data chunk. Wraps a boxed `Error` impl.",26,null],[4,"StreamDataChunk","","The enum represents the successful completion of the `Stream::get_data_chunk` method.",null,null],[13,"Chunk","","A data chunk of the given size, after which more chunks can follow.",27,null],[13,"Last","","The chunk was the last one that the stream will ever write.",27,null],[13,"Unavailable","","No data currently available, but the stream isn't closed yet",27,null],[8,"Session","","A trait that defines the interface between an `HttpConnection` and the higher-levels that use\nit. Essentially, it allows the `HttpConnection` to pass information onto those higher levels\nthrough a well-defined interface.",null,null],[10,"new_data_chunk","","Notifies the `Session` that a new data chunk has arrived on the\nconnection for a particular stream. Only the raw data is passed\nto the callback (all padding is already discarded by the connection).",28,null],[10,"new_headers","","Notifies the `Session` that headers have arrived for a particular\nstream. The given list of headers is already decoded by the connection.",28,{"inputs":[{"name":"session"},{"name":"streamid"},{"name":"vec"}],"output":null}],[10,"end_of_stream","","Notifies the `Session` that a particular stream got closed by the peer.",28,{"inputs":[{"name":"session"},{"name":"streamid"}],"output":null}],[8,"SessionState","","A trait defining a set of methods for accessing and influencing an HTTP/2 session's state.",null,null],[16,"Stream","","The type of the `Stream` that the `SessionState` manages.",29,null],[10,"insert_stream","","Inserts the given `Stream` into the session's state, starting to track it.",29,{"inputs":[{"name":"sessionstate"},{"name":"stream"}],"output":null}],[10,"get_stream_ref","","Returns a reference to a `Stream` with the given `StreamId`, if it is found in the current\nsession.",29,{"inputs":[{"name":"sessionstate"},{"name":"streamid"}],"output":{"name":"option"}}],[10,"get_stream_mut","","Returns a mutable reference to a `Stream` with the given `StreamId`, if it is found in the\ncurrent session.",29,{"inputs":[{"name":"sessionstate"},{"name":"streamid"}],"output":{"name":"option"}}],[10,"remove_stream","","Removes the stream with the given `StreamId` from the session. If the stream was found in\nthe session, it is returned in the result.",29,{"inputs":[{"name":"sessionstate"},{"name":"streamid"}],"output":{"name":"option"}}],[10,"iter","","Returns an iterator over the streams currently found in the session.",29,{"inputs":[{"name":"sessionstate"}],"output":{"name":"streamiter"}}],[11,"get_closed","","Returns all streams that are closed and tracked by the session state.",29,{"inputs":[{"name":"sessionstate"}],"output":{"name":"vec"}}],[8,"Stream","","A trait representing a single HTTP/2 stream. An HTTP/2 connection multiplexes a number of\nstreams.",null,null],[10,"new","","Create a new stream with the given ID",30,{"inputs":[{"name":"stream"},{"name":"streamid"}],"output":{"name":"self"}}],[10,"new_data_chunk","","Handle a new data chunk that has arrived for the stream.",30,null],[10,"set_headers","","Set headers for a stream. A stream is only allowed to have one set of\nheaders.",30,{"inputs":[{"name":"stream"},{"name":"vec"}],"output":null}],[10,"set_state","","Sets the stream state to the newly provided state.",30,{"inputs":[{"name":"stream"},{"name":"streamstate"}],"output":null}],[10,"get_data_chunk","","Places the next data chunk that should be written onto the stream into the given buffer.",30,null],[10,"id","","Returns the ID of the stream.",30,{"inputs":[{"name":"stream"}],"output":{"name":"streamid"}}],[10,"state","","Returns the current state of the stream.",30,{"inputs":[{"name":"stream"}],"output":{"name":"streamstate"}}],[11,"close","","Transitions the stream state to closed. After this, the stream is considered to be closed\nfor any further reads or writes.",30,{"inputs":[{"name":"stream"}],"output":null}],[11,"close_local","","Updates the `Stream` status to indicate that it is closed locally.",30,{"inputs":[{"name":"stream"}],"output":null}],[11,"close_remote","","Updates the `Stream` status to indicate that it is closed on the remote peer's side.",30,{"inputs":[{"name":"stream"}],"output":null}],[11,"is_closed","","Returns whether the stream is closed.",30,{"inputs":[{"name":"stream"}],"output":{"name":"bool"}}],[11,"is_closed_local","","Returns whether the stream is closed locally.",30,{"inputs":[{"name":"stream"}],"output":{"name":"bool"}}],[11,"is_closed_remote","","Returns whether the remote peer has closed the stream. This includes a fully closed stream.",30,{"inputs":[{"name":"stream"}],"output":{"name":"bool"}}],[11,"next","","",31,{"inputs":[{"name":"streamiter"}],"output":{"name":"option"}}],[11,"new","","Creates a new `DefaultSessionState` with no known streams.",32,{"inputs":[{"name":"defaultsessionstate"}],"output":{"name":"defaultsessionstate"}}],[11,"insert_stream","","",32,{"inputs":[{"name":"defaultsessionstate"},{"name":"stream"}],"output":null}],[11,"get_stream_ref","","",32,{"inputs":[{"name":"defaultsessionstate"},{"name":"streamid"}],"output":{"name":"option"}}],[11,"get_stream_mut","","",32,{"inputs":[{"name":"defaultsessionstate"},{"name":"streamid"}],"output":{"name":"option"}}],[11,"remove_stream","","",32,{"inputs":[{"name":"defaultsessionstate"},{"name":"streamid"}],"output":{"name":"option"}}],[11,"iter","","",32,{"inputs":[{"name":"defaultsessionstate"}],"output":{"name":"streamiter"}}],[11,"fmt","","",25,{"inputs":[{"name":"streamstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",25,{"inputs":[{"name":"streamstate"},{"name":"streamstate"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"streamstate"},{"name":"streamstate"}],"output":{"name":"bool"}}],[11,"clone","","",25,{"inputs":[{"name":"streamstate"}],"output":{"name":"streamstate"}}],[11,"fmt","","",26,{"inputs":[{"name":"streamdataerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",26,{"inputs":[{"name":"streamdataerror"},{"name":"e"}],"output":{"name":"streamdataerror"}}],[11,"fmt","","",27,{"inputs":[{"name":"streamdatachunk"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",27,{"inputs":[{"name":"streamdatachunk"},{"name":"streamdatachunk"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"streamdatachunk"},{"name":"streamdatachunk"}],"output":{"name":"bool"}}],[11,"clone","","",27,{"inputs":[{"name":"streamdatachunk"}],"output":{"name":"streamdatachunk"}}],[11,"clone","","",24,{"inputs":[{"name":"defaultstream"}],"output":{"name":"defaultstream"}}],[11,"new","","Create a new `DefaultStream` with the given ID.",24,{"inputs":[{"name":"defaultstream"},{"name":"streamid"}],"output":{"name":"defaultstream"}}],[11,"set_full_data","","Sets the outgoing data of the stream to the given `Vec`.",24,{"inputs":[{"name":"defaultstream"},{"name":"vec"}],"output":null}],[11,"new","","",24,{"inputs":[{"name":"defaultstream"},{"name":"streamid"}],"output":{"name":"defaultstream"}}],[11,"new_data_chunk","","",24,null],[11,"set_headers","","",24,{"inputs":[{"name":"defaultstream"},{"name":"vec"}],"output":null}],[11,"set_state","","",24,{"inputs":[{"name":"defaultstream"},{"name":"streamstate"}],"output":null}],[11,"id","","",24,{"inputs":[{"name":"defaultstream"}],"output":{"name":"streamid"}}],[11,"state","","",24,{"inputs":[{"name":"defaultstream"}],"output":{"name":"streamstate"}}],[11,"get_data_chunk","","",24,null],[0,"priority","solicit::http","The module exposes an API for defining data prioritization strategies.",null,null],[3,"SimplePrioritizer","solicit::http::priority","An implementation of the `DataPrioritizer` trait that is based on finding the first stream from\nthe given `SessionState` instance that can send data and returning this chunk.",null,null],[8,"DataPrioritizer","","A trait that types that want to provide data to an HTTP/2 connection need to implement.",null,null],[10,"get_next_chunk","","Returns the next `DataChunk` that should be sent on the HTTP/2 connection. `None` indicates\nthat currently there was no data that could be sent at that point.",33,{"inputs":[{"name":"dataprioritizer"}],"output":{"name":"httpresult"}}],[11,"new","","Creates a new `SimplePrioritizer` that will use the given state to find stream data that\nshould be sent and use the given buffer to hold the data of the returned chunk.",34,null],[11,"get_next_chunk","","",34,{"inputs":[{"name":"simpleprioritizer"}],"output":{"name":"httpresult"}}],[0,"client","solicit::http","The module contains a number of reusable components for implementing the client side of an\nHTTP/2 connection.",null,null],[3,"ClientStream","solicit::http::client","A convenience wrapper type that represents an established client network transport stream.\nIt wraps the stream itself, the scheme of the protocol to be used, and the remote\nhost name.",null,null],[3,"CleartextConnector","","A struct that establishes a cleartext TCP connection that can be used by an HTTP/2\nconnection. Defaults to using port 80.",null,null],[12,"host","","The host to which the connection should be established",35,null],[12,"port","","The port on which the connection should be established",35,null],[3,"CleartextConnectError","","A newtype wrapping the `io::Error`, as it occurs when attempting to\nestablish an HTTP/2 connection over cleartext TCP (with prior knowledge).",null,null],[3,"RequestStream","","A struct representing a request stream. It provides the headers that are to be sent when\ninitiating the request, as well as a `Stream` instance that handles the received response and\nprovides the request body.",null,null],[12,"headers","","The list of headers that will be sent with the request.",36,null],[12,"stream","","The underlying `Stream` instance, which will handle the response, as well as optionally\nprovide the body of the request.",36,null],[3,"ClientConnection","","The struct extends the `HttpConnection` API with client-specific methods (such as\n`start_request`) and wires the `HttpConnection` to the client `Session` callbacks.",null,null],[12,"state","","The state of the session associated to this client connection. Maintains the status of the\nconnection streams.",37,null],[3,"ClientSession","","An implementation of the `Session` trait specific to handling client HTTP/2 connections.",null,null],[5,"write_preface","","Writes the client preface to the underlying HTTP/2 connection.",null,{"inputs":[{"name":"w"}],"output":{"name":"result"}}],[8,"HttpConnectError","","A marker trait for errors raised by attempting to establish an HTTP/2\nconnection.",null,null],[8,"HttpConnect","","A trait that can be implemented by structs that want to provide the\nfunctionality of establishing network connections for use by HTTP/2 connections.",null,null],[16,"Stream","","The type of the underlying transport stream that the `HttpConnection`s\nproduced by this `HttpConnect` implementation will be based on.",38,null],[16,"Err","","The type of the error that can be produced by trying to establish the\nconnection (i.e. calling the `connect` method).",38,null],[10,"connect","","Establishes a network connection that can be used by HTTP/2 connections.",38,{"inputs":[{"name":"httpconnect"}],"output":{"name":"result"}}],[11,"from","solicit::http","",2,{"inputs":[{"name":"httperror"},{"name":"e"}],"output":{"name":"httperror"}}],[11,"new","solicit::http::client","Creates a new `CleartextConnector` that will attempt to establish a connection to the given\nhost on port 80.",35,{"inputs":[{"name":"cleartextconnector"},{"name":"str"}],"output":{"name":"cleartextconnector"}}],[11,"with_port","","Creates a new `CleartextConnector` that will attempt to establish a connection to the given\nhost on the given port.",35,{"inputs":[{"name":"cleartextconnector"},{"name":"str"},{"name":"u16"}],"output":{"name":"cleartextconnector"}}],[11,"fmt","","",39,{"inputs":[{"name":"cleartextconnecterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",39,{"inputs":[{"name":"cleartextconnecterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",39,{"inputs":[{"name":"cleartextconnecterror"}],"output":{"name":"str"}}],[11,"cause","","",39,{"inputs":[{"name":"cleartextconnecterror"}],"output":{"name":"option"}}],[11,"from","","",39,{"inputs":[{"name":"cleartextconnecterror"},{"name":"error"}],"output":{"name":"cleartextconnecterror"}}],[11,"connect","","Establishes a cleartext TCP connection based on the host and port.\nIf it is not possible, returns an `HttpError`.",35,{"inputs":[{"name":"cleartextconnector"}],"output":{"name":"result"}}],[11,"with_connection","","Creates a new `ClientConnection` that will use the given `HttpConnection`\nfor all its underlying HTTP/2 communication.",37,{"inputs":[{"name":"clientconnection"},{"name":"httpconnection"},{"name":"state"}],"output":{"name":"clientconnection"}}],[11,"scheme","","Returns the scheme of the underlying `HttpConnection`.",37,{"inputs":[{"name":"clientconnection"}],"output":{"name":"httpscheme"}}],[11,"init","","Performs the initialization of the `ClientConnection`.",37,{"inputs":[{"name":"clientconnection"}],"output":{"name":"httpresult"}}],[11,"start_request","","Starts a new request based on the given `RequestStream`.",37,{"inputs":[{"name":"clientconnection"},{"name":"requeststream"}],"output":{"name":"httpresult"}}],[11,"handle_next_frame","","Fully handles the next incoming frame. Events are passed on to the internal `session`\ninstance.",37,{"inputs":[{"name":"clientconnection"}],"output":{"name":"httpresult"}}],[11,"send_next_data","","Queues a new DATA frame onto the underlying `SendFrame`.",37,{"inputs":[{"name":"clientconnection"}],"output":{"name":"httpresult"}}],[11,"new","","Returns a new `ClientSession` associated to the given state.",40,{"inputs":[{"name":"clientsession"},{"name":"state"}],"output":{"name":"clientsession"}}],[11,"new_data_chunk","","",40,null],[11,"new_headers","","",40,{"inputs":[{"name":"clientsession"},{"name":"streamid"},{"name":"vec"}],"output":null}],[11,"end_of_stream","","",40,{"inputs":[{"name":"clientsession"},{"name":"streamid"}],"output":null}],[0,"server","solicit::http","The module contains a number of reusable components for implementing the server side of an\nHTTP/2 connection.",null,null],[3,"ServerSession","solicit::http::server","An implementation of the `Session` trait for a server-side HTTP/2 connection.",null,null],[3,"ServerConnection","","The struct provides a more convenient API for server-related functionality of an HTTP/2\nconnection, such as sending a response back to the client.",null,null],[12,"state","","The state of the session associated to this client connection. Maintains the status of the\nconnection streams.",41,null],[11,"new","","",42,{"inputs":[{"name":"serversession"},{"name":"state"}],"output":{"name":"serversession"}}],[11,"new_data_chunk","","",42,null],[11,"new_headers","","",42,{"inputs":[{"name":"serversession"},{"name":"streamid"},{"name":"vec"}],"output":null}],[11,"end_of_stream","","",42,{"inputs":[{"name":"serversession"},{"name":"streamid"}],"output":null}],[11,"with_connection","","Creates a new `ServerConnection` that will use the given `HttpConnection` for its\nunderlying HTTP/2 communication.",41,{"inputs":[{"name":"serverconnection"},{"name":"httpconnection"},{"name":"state"}],"output":{"name":"serverconnection"}}],[11,"scheme","","Returns the scheme of the underlying `HttpConnection`.",41,{"inputs":[{"name":"serverconnection"}],"output":{"name":"httpscheme"}}],[11,"init","","Initializes the `ServerConnection` by sending the server's settings and processing the\nclient's.\nIf the client does not provide a settings frame, returns an error.",41,{"inputs":[{"name":"serverconnection"}],"output":{"name":"httpresult"}}],[11,"handle_next_frame","","Fully handles the next incoming frame. Events are passed on to the internal `session`\ninstance.",41,{"inputs":[{"name":"serverconnection"}],"output":{"name":"httpresult"}}],[11,"start_response","","Starts a response on the stream with the given ID by sending the given headers.",41,{"inputs":[{"name":"serverconnection"},{"name":"vec"},{"name":"streamid"},{"name":"endstream"}],"output":{"name":"httpresult"}}],[11,"send_next_data","","Queues a new DATA frame onto the underlying `SendFrame`.",41,{"inputs":[{"name":"serverconnection"}],"output":{"name":"httpresult"}}],[6,"StreamId","solicit::http","An alias for the type that represents the ID of an HTTP/2 stream",null,null],[6,"Header","","An alias for the type that represents HTTP/2 headers. For now we only alias\nthe tuple of byte vectors instead of going with a full struct representation.",null,null],[6,"HttpResult","","A convenience `Result` type that has the `HttpError` type as the error\ntype and a generic Ok result type.",null,null],[17,"ALPN_PROTOCOLS","","A set of protocol names that the library should use to indicate that HTTP/2\nis supported during protocol negotiation (NPN or ALPN).\nWe include some of the drafts' protocol names, since there is basically no\ndifference for all intents and purposes (and some servers out there still\nonly officially advertise draft support).\nTODO: Eventually only use \"h2\".",null,null],[11,"fmt","","",2,{"inputs":[{"name":"httperror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",2,{"inputs":[{"name":"httperror"},{"name":"error"}],"output":{"name":"httperror"}}],[11,"fmt","","",2,{"inputs":[{"name":"httperror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",2,{"inputs":[{"name":"httperror"}],"output":{"name":"str"}}],[11,"cause","","",2,{"inputs":[{"name":"httperror"}],"output":{"name":"option"}}],[11,"eq","","",3,{"inputs":[{"name":"httpscheme"},{"name":"httpscheme"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"httpscheme"},{"name":"httpscheme"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"httpscheme"}],"output":{"name":"httpscheme"}}],[11,"fmt","","",3,{"inputs":[{"name":"httpscheme"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_bytes","","Returns a byte string representing the scheme.",3,null],[11,"clone","","",0,{"inputs":[{"name":"response"}],"output":{"name":"response"}}],[11,"new","","Creates a new `Response` with all the components already provided.",0,{"inputs":[{"name":"response"},{"name":"streamid"},{"name":"vec"},{"name":"vec"}],"output":{"name":"response"}}],[11,"status_code","","Gets the response status code from the pseudo-header. If the response\ndoes not contain the response as the first pseuo-header, an error is\nreturned as such a response is malformed.",0,{"inputs":[{"name":"response"}],"output":{"name":"httpresult"}}],[11,"clone","","",1,{"inputs":[{"name":"request"}],"output":{"name":"request"}}],[0,"client","solicit","The module contains implementations of HTTP/2 clients that could be\ndirectly used to access HTTP/2 servers, i.e. send requests and read\nresponses.",null,null],[3,"SimpleClient","solicit::client","A struct implementing a simple HTTP/2 client.",null,null],[3,"Client","","A struct representing an HTTP/2 client that receives responses to its\nrequests asynchronously. Additionally, this client can be cloned and all\nclones can issue (concurrently) requests to the server, using the same\nunderlying HTTP/2 connection.",null,null],[11,"with_connection","","Create a new `SimpleClient` instance that will use the given `HttpConnection`\nto communicate to the server.",43,{"inputs":[{"name":"simpleclient"},{"name":"httpconnection"},{"name":"string"}],"output":{"name":"httpresult"}}],[11,"with_connector","","A convenience constructor that first tries to establish an HTTP/2\nconnection by using the given connector instance (an implementation of\nthe `HttpConnect` trait).",43,{"inputs":[{"name":"simpleclient"},{"name":"c"}],"output":{"name":"httpresult"}}],[11,"request","","Send a request to the server. Blocks until the entire request has been\nsent.",43,null],[11,"get_response","","Gets the response for the stream with the given ID. If a valid stream ID\nis given, it blocks until a response is received.",43,{"inputs":[{"name":"simpleclient"},{"name":"streamid"}],"output":{"name":"httpresult"}}],[11,"get","","Performs a GET request on the given path. This is a shortcut method for\ncalling `request` followed by `get_response` for the returned stream ID.",43,null],[11,"post","","Performs a POST request on the given path.",43,null],[11,"clone","","",44,{"inputs":[{"name":"client"}],"output":{"name":"client"}}],[11,"drop","","",44,{"inputs":[{"name":"client"}],"output":null}],[11,"with_connector","","Creates a brand new HTTP/2 client. This means that a new HTTP/2\nconnection will be established behind the scenes. A thread is spawned\nto handle the connection in the background, so that the thread that\ncreates the client can use it asynchronously.",44,{"inputs":[{"name":"client"},{"name":"c"}],"output":{"name":"option"}}],[11,"request","","Issues a new request to the server.",44,null],[11,"get","","Issues a GET request to the server.",44,null],[11,"post","","Issues a POST request to the server.",44,null],[0,"server","solicit","The module contains a simple HTTP/2 server implementation.",null,null],[3,"ServerRequest","solicit::server","The struct represents a fully received request.",null,null],[12,"stream_id","","",45,null],[12,"headers","","",45,null],[12,"body","","",45,null],[3,"SimpleServer","","The struct implements a simple HTTP/2 server that allows users to register a request handler (a\ncallback taking a `ServerRequest` and returning a `Response`) which is run on all received\nrequests.",null,null],[11,"new","","Creates a new `SimpleServer` that will use the given `TransportStream` to communicate to\nthe client. Assumes that the stream is fully uninitialized -- no preface sent or read yet.",46,{"inputs":[{"name":"simpleserver"},{"name":"ts"},{"name":"h"}],"output":{"name":"httpresult"}}],[11,"handle_next","","Handles the next incoming frame, blocking to receive it if nothing is available on the\nunderlying stream.",46,{"inputs":[{"name":"simpleserver"}],"output":{"name":"httpresult"}}]],"paths":[[3,"Response"],[3,"Request"],[4,"HttpError"],[4,"HttpScheme"],[3,"DataFrame"],[4,"DataFlag"],[3,"StreamDependency"],[3,"HeadersFrame"],[4,"HeadersFlag"],[3,"SettingsFrame"],[4,"HttpSetting"],[4,"SettingsFlag"],[8,"Flag"],[8,"Frame"],[3,"RawFrame"],[8,"TransportStream"],[3,"TcpStream"],[3,"HttpConnection"],[3,"DataChunk"],[4,"HttpFrame"],[4,"SendStatus"],[4,"EndStream"],[8,"SendFrame"],[8,"ReceiveFrame"],[3,"DefaultStream"],[4,"StreamState"],[4,"StreamDataError"],[4,"StreamDataChunk"],[8,"Session"],[8,"SessionState"],[8,"Stream"],[3,"StreamIter"],[3,"DefaultSessionState"],[8,"DataPrioritizer"],[3,"SimplePrioritizer"],[3,"CleartextConnector"],[3,"RequestStream"],[3,"ClientConnection"],[8,"HttpConnect"],[3,"CleartextConnectError"],[3,"ClientSession"],[3,"ServerConnection"],[3,"ServerSession"],[3,"SimpleClient"],[3,"Client"],[3,"ServerRequest"],[3,"SimpleServer"]]};
searchIndex['hpack'] = {"items":[[0,"","hpack","A module implementing HPACK functionality. Exposes a simple API for\nperforming the encoding and decoding of header sets, according to the\nHPACK spec.",null,null],[0,"encoder","","Implements all functionality related to encoding header blocks using\nHPACK.",null,null],[3,"Encoder","hpack::encoder","Represents an HPACK encoder. Allows clients to encode arbitrary header sets\nand tracks the encoding context. That is, encoding subsequent header sets\nwill use the context built by previous encode calls.",null,null],[5,"encode_integer","","Encode an integer to the representation defined by HPACK.",null,{"inputs":[{"name":"usize"},{"name":"u8"}],"output":{"name":"vec"}}],[11,"new","","Creates a new `Encoder` with a default static table, as defined by the\nHPACK spec (Appendix A).",0,{"inputs":[{"name":"encoder"}],"output":{"name":"encoder"}}],[11,"encode","","Encodes the given headers using the HPACK rules and returns a newly\nallocated `Vec` containing the bytes representing the encoded header\nset.",0,{"inputs":[{"name":"encoder"},{"name":"vec"}],"output":{"name":"vec"}}],[0,"decoder","hpack","Exposes the struct `Decoder` that allows for HPACK-encoded header blocks to\nbe decoded into a header list.",null,null],[3,"Decoder","hpack::decoder","Decodes headers encoded using HPACK.",null,null],[4,"IntegerDecodingError","","Represents all errors that can be encountered while decoding an\ninteger.",null,null],[13,"TooManyOctets","","5.1. specifies that \"excessively large integer decodings\" MUST be\nconsidered an error (whether the size is the number of octets or\nvalue). This variant corresponds to the encoding containing too many\noctets.",1,null],[13,"ValueTooLarge","","The variant corresponds to the case where the value of the integer\nbeing decoded exceeds a certain threshold.",1,null],[13,"NotEnoughOctets","","When a buffer from which an integer was supposed to be encoded does\nnot contain enough octets to complete the decoding.",1,null],[13,"InvalidPrefix","","Only valid prefixes are [1, 8]",1,null],[4,"StringDecodingError","","Represents all errors that can be encountered while decoding an octet\nstring.",null,null],[13,"NotEnoughOctets","","",2,null],[13,"HuffmanDecoderError","","",2,null],[4,"DecoderError","","Represents all errors that can be encountered while performing the decoding\nof an HPACK header set.",null,null],[13,"HeaderIndexOutOfBounds","","",3,null],[13,"IntegerDecodingError","","",3,null],[13,"StringDecodingError","","",3,null],[13,"InvalidMaxDynamicSize","","The size of the dynamic table can never be allowed to exceed the max\nsize mandated to the decoder by the protocol. (by perfroming changes\nmade by SizeUpdate blocks).",3,null],[6,"DecoderResult","","The result returned by the `decode` method of the `Decoder`.",null,null],[11,"eq","","",1,{"inputs":[{"name":"integerdecodingerror"},{"name":"integerdecodingerror"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"integerdecodingerror"},{"name":"integerdecodingerror"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"integerdecodingerror"}],"output":{"name":"integerdecodingerror"}}],[11,"fmt","","",1,{"inputs":[{"name":"integerdecodingerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"stringdecodingerror"},{"name":"stringdecodingerror"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"stringdecodingerror"},{"name":"stringdecodingerror"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"stringdecodingerror"}],"output":{"name":"stringdecodingerror"}}],[11,"fmt","","",2,{"inputs":[{"name":"stringdecodingerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"decodererror"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"decodererror"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"decodererror"}],"output":{"name":"decodererror"}}],[11,"fmt","","",3,{"inputs":[{"name":"decodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `Decoder` with all settings set to default values.",4,{"inputs":[{"name":"decoder"}],"output":{"name":"decoder"}}],[11,"set_max_table_size","","Sets a new maximum dynamic table size for the decoder.",4,{"inputs":[{"name":"decoder"},{"name":"usize"}],"output":null}],[11,"decode","","Decode the header block found in the given buffer.",4,null],[0,"huffman","hpack","A module exposing utilities for encoding and decoding Huffman-coded octet\nstrings, under the Huffman code defined by HPACK.\n(HPACK-draft-10, Appendix B)",null,null],[3,"HuffmanDecoder","hpack::huffman","A simple implementation of a Huffman code decoder.",null,null],[4,"HuffmanDecoderError","","Represents the error variants that the `HuffmanDecoder` can return.",null,null],[13,"PaddingTooLarge","","Any padding strictly larger than 7 bits MUST be interpreted as an error",5,null],[13,"InvalidPadding","","Any padding that does not correspond to the most significant bits of\nEOS MUST be interpreted as an error.",5,null],[13,"EOSInString","","If EOS is ever found in the string, it causes an error.",5,null],[6,"HuffmanDecoderResult","","The type that represents the result of the `decode` method of the\n`HuffmanDecoder`.",null,null],[11,"eq","","",5,{"inputs":[{"name":"huffmandecodererror"},{"name":"huffmandecodererror"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"huffmandecodererror"},{"name":"huffmandecodererror"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"huffmandecodererror"}],"output":{"name":"huffmandecodererror"}}],[11,"fmt","","",5,{"inputs":[{"name":"huffmandecodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Constructs a new HuffmanDecoder with the default Huffman code table, as\ndefined in the HPACK-draft-10, Appendix B.",6,{"inputs":[{"name":"huffmandecoder"}],"output":{"name":"huffmandecoder"}}],[11,"decode","","Decodes the buffer `buf` into a newly allocated `Vec`.",6,null]],"paths":[[3,"Encoder"],[4,"IntegerDecodingError"],[4,"StringDecodingError"],[4,"DecoderError"],[3,"Decoder"],[4,"HuffmanDecoderError"],[3,"HuffmanDecoder"]]};
searchIndex['aho_corasick'] = {"items":[[0,"","aho_corasick","An implementation of the\n[Aho-Corasick string search algorithm](https://en.wikipedia.org/wiki/Aho%E2%80%93Corasick_string_matching_algorithm).",null,null],[3,"Match","","Records a match in the search text.",null,null],[12,"pati","","The pattern index.",0,null],[12,"start","","The starting byte offset of the match in the search text.",0,null],[12,"end","","The ending byte offset of the match in the search text.",0,null],[3,"Matches","","An iterator of non-overlapping matches for in-memory text.",null,null],[3,"MatchesOverlapping","","An iterator of overlapping matches for in-memory text.",null,null],[3,"StreamMatches","","An iterator of non-overlapping matches for streaming text.",null,null],[3,"StreamMatchesOverlapping","","An iterator of overlapping matches for streaming text.",null,null],[3,"FullAcAutomaton","","A complete Aho-Corasick automaton.",null,null],[3,"AcAutomaton","","An Aho-Corasick finite automaton.",null,null],[3,"Dense","","State transitions that can be stored either sparsely or densely.",null,null],[3,"Sparse","","State transitions that are always sparse.",null,null],[11,"eq","","",0,{"inputs":[{"name":"match"},{"name":"match"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"match"},{"name":"match"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"match"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"match"}],"output":{"name":"match"}}],[11,"fmt","","",1,{"inputs":[{"name":"matches"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",1,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"fmt","","",2,{"inputs":[{"name":"streammatches"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",2,{"inputs":[{"name":"streammatches"}],"output":{"name":"option"}}],[11,"fmt","","",3,{"inputs":[{"name":"matchesoverlapping"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",3,{"inputs":[{"name":"matchesoverlapping"}],"output":{"name":"option"}}],[11,"fmt","","",4,{"inputs":[{"name":"streammatchesoverlapping"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",4,{"inputs":[{"name":"streammatchesoverlapping"}],"output":{"name":"option"}}],[11,"clone","","",5,{"inputs":[{"name":"fullacautomaton"}],"output":{"name":"fullacautomaton"}}],[11,"new","","Build a new expanded Aho-Corasick automaton from an existing\nAho-Corasick automaton.",5,{"inputs":[{"name":"fullacautomaton"},{"name":"acautomaton"}],"output":{"name":"fullacautomaton"}}],[11,"next_state","","",5,{"inputs":[{"name":"fullacautomaton"},{"name":"stateidx"},{"name":"u8"}],"output":{"name":"stateidx"}}],[11,"get_match","","",5,{"inputs":[{"name":"fullacautomaton"},{"name":"stateidx"},{"name":"usize"},{"name":"usize"}],"output":{"name":"match"}}],[11,"has_match","","",5,{"inputs":[{"name":"fullacautomaton"},{"name":"stateidx"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"start_bytes","","",5,null],[11,"patterns","","",5,null],[11,"pattern","","",5,{"inputs":[{"name":"fullacautomaton"},{"name":"usize"}],"output":{"name":"p"}}],[11,"fmt","","",5,{"inputs":[{"name":"fullacautomaton"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"StateIdx","","The integer type used for the state index.",null,null],[8,"Automaton","","An abstraction over automatons and their corresponding iterators.\nThe type parameter `P` is the type of the pattern that was used to\nconstruct this Automaton.",null,null],[10,"next_state","","Return the next state given the current state and next character.",6,{"inputs":[{"name":"automaton"},{"name":"stateidx"},{"name":"u8"}],"output":{"name":"stateidx"}}],[10,"has_match","","Return true if and only if the given state and current pattern index\nindicate a match.",6,{"inputs":[{"name":"automaton"},{"name":"stateidx"},{"name":"usize"}],"output":{"name":"bool"}}],[10,"get_match","","Build a match given the current state, pattern index and input index.",6,{"inputs":[{"name":"automaton"},{"name":"stateidx"},{"name":"usize"},{"name":"usize"}],"output":{"name":"match"}}],[10,"start_bytes","","Return the set of bytes that have transitions in the root state.",6,null],[10,"patterns","","Returns all of the patterns matched by this automaton.",6,null],[10,"pattern","","Returns the pattern indexed at `i`.",6,{"inputs":[{"name":"automaton"},{"name":"usize"}],"output":{"name":"p"}}],[11,"len","","Return the number of patterns in the automaton.",6,{"inputs":[{"name":"automaton"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the automaton has no patterns.",6,{"inputs":[{"name":"automaton"}],"output":{"name":"bool"}}],[11,"find","","Returns an iterator of non-overlapping matches in `s`.",6,{"inputs":[{"name":"automaton"},{"name":"q"}],"output":{"name":"matches"}}],[11,"find_overlapping","","Returns an iterator of overlapping matches in `s`.",6,{"inputs":[{"name":"automaton"},{"name":"q"}],"output":{"name":"matchesoverlapping"}}],[11,"stream_find","","Returns an iterator of non-overlapping matches in the given reader.",6,{"inputs":[{"name":"automaton"},{"name":"r"}],"output":{"name":"streammatches"}}],[11,"stream_find_overlapping","","Returns an iterator of overlapping matches in the given reader.",6,{"inputs":[{"name":"automaton"},{"name":"r"}],"output":{"name":"streammatchesoverlapping"}}],[8,"Transitions","","An abstraction over state transition strategies.",null,null],[10,"new","","Return a new state at the given depth.",7,{"inputs":[{"name":"transitions"},{"name":"u32"}],"output":{"name":"self"}}],[10,"goto","","Return the next state index given the next character.",7,{"inputs":[{"name":"transitions"},{"name":"u8"}],"output":{"name":"stateidx"}}],[10,"set_goto","","Set the next state index for the character given.",7,{"inputs":[{"name":"transitions"},{"name":"u8"},{"name":"stateidx"}],"output":null}],[10,"heap_bytes","","The memory use in bytes (on the heap) of this set of transitions.",7,{"inputs":[{"name":"transitions"}],"output":{"name":"usize"}}],[11,"clone","","",8,{"inputs":[{"name":"acautomaton"}],"output":{"name":"acautomaton"}}],[11,"new","","Create a new automaton from an iterator of patterns.",8,{"inputs":[{"name":"acautomaton"},{"name":"i"}],"output":{"name":"acautomaton"}}],[11,"with_transitions","","Create a new automaton from an iterator of patterns.",8,{"inputs":[{"name":"acautomaton"},{"name":"i"}],"output":{"name":"acautomaton"}}],[11,"into_full","","Build out the entire automaton into a single matrix.",8,{"inputs":[{"name":"acautomaton"}],"output":{"name":"fullacautomaton"}}],[11,"next_state","","",8,{"inputs":[{"name":"acautomaton"},{"name":"stateidx"},{"name":"u8"}],"output":{"name":"stateidx"}}],[11,"get_match","","",8,{"inputs":[{"name":"acautomaton"},{"name":"stateidx"},{"name":"usize"},{"name":"usize"}],"output":{"name":"match"}}],[11,"has_match","","",8,{"inputs":[{"name":"acautomaton"},{"name":"stateidx"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"start_bytes","","",8,null],[11,"patterns","","",8,null],[11,"pattern","","",8,{"inputs":[{"name":"acautomaton"},{"name":"usize"}],"output":{"name":"p"}}],[11,"fmt","","",9,{"inputs":[{"name":"dense"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"dense"}],"output":{"name":"dense"}}],[11,"new","","",9,{"inputs":[{"name":"dense"},{"name":"u32"}],"output":{"name":"dense"}}],[11,"goto","","",9,{"inputs":[{"name":"dense"},{"name":"u8"}],"output":{"name":"stateidx"}}],[11,"set_goto","","",9,{"inputs":[{"name":"dense"},{"name":"u8"},{"name":"stateidx"}],"output":null}],[11,"heap_bytes","","",9,{"inputs":[{"name":"dense"}],"output":{"name":"usize"}}],[11,"fmt","","",10,{"inputs":[{"name":"sparse"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"sparse"}],"output":{"name":"sparse"}}],[11,"new","","",10,{"inputs":[{"name":"sparse"},{"name":"u32"}],"output":{"name":"sparse"}}],[11,"goto","","",10,{"inputs":[{"name":"sparse"},{"name":"u8"}],"output":{"name":"stateidx"}}],[11,"set_goto","","",10,{"inputs":[{"name":"sparse"},{"name":"u8"},{"name":"stateidx"}],"output":null}],[11,"heap_bytes","","",10,{"inputs":[{"name":"sparse"}],"output":{"name":"usize"}}],[11,"from_iter","","Create an automaton from an iterator of strings.",8,{"inputs":[{"name":"acautomaton"},{"name":"t"}],"output":{"name":"acautomaton"}}],[11,"fmt","","",8,{"inputs":[{"name":"acautomaton"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"len","","Return the number of patterns in the automaton.",6,{"inputs":[{"name":"automaton"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the automaton has no patterns.",6,{"inputs":[{"name":"automaton"}],"output":{"name":"bool"}}],[11,"find","","Returns an iterator of non-overlapping matches in `s`.",6,{"inputs":[{"name":"automaton"},{"name":"q"}],"output":{"name":"matches"}}],[11,"find_overlapping","","Returns an iterator of overlapping matches in `s`.",6,{"inputs":[{"name":"automaton"},{"name":"q"}],"output":{"name":"matchesoverlapping"}}],[11,"stream_find","","Returns an iterator of non-overlapping matches in the given reader.",6,{"inputs":[{"name":"automaton"},{"name":"r"}],"output":{"name":"streammatches"}}],[11,"stream_find_overlapping","","Returns an iterator of overlapping matches in the given reader.",6,{"inputs":[{"name":"automaton"},{"name":"r"}],"output":{"name":"streammatchesoverlapping"}}]],"paths":[[3,"Match"],[3,"Matches"],[3,"StreamMatches"],[3,"MatchesOverlapping"],[3,"StreamMatchesOverlapping"],[3,"FullAcAutomaton"],[8,"Automaton"],[8,"Transitions"],[3,"AcAutomaton"],[3,"Dense"],[3,"Sparse"]]};
searchIndex['mime'] = {"items":[[0,"","mime","# Mime",null,null],[3,"Mime","","Mime, or Media Type. Encapsulates common registers types.",null,null],[4,"TopLevel","","",null,null],[13,"Star","","",0,null],[13,"Text","","",0,null],[13,"Image","","",0,null],[13,"Audio","","",0,null],[13,"Video","","",0,null],[13,"Application","","",0,null],[13,"Multipart","","",0,null],[13,"Message","","",0,null],[13,"Model","","",0,null],[13,"Ext","","",0,null],[4,"SubLevel","","",null,null],[13,"Star","","",1,null],[13,"Plain","","",1,null],[13,"Html","","",1,null],[13,"Xml","","",1,null],[13,"Javascript","","",1,null],[13,"Css","","",1,null],[13,"EventStream","","",1,null],[13,"Json","","",1,null],[13,"WwwFormUrlEncoded","","",1,null],[13,"Msgpack","","",1,null],[13,"FormData","","",1,null],[13,"Png","","",1,null],[13,"Gif","","",1,null],[13,"Bmp","","",1,null],[13,"Jpeg","","",1,null],[13,"Ext","","",1,null],[4,"Attr","","",null,null],[13,"Charset","","",2,null],[13,"Boundary","","",2,null],[13,"Q","","",2,null],[13,"Ext","","",2,null],[4,"Value","","",null,null],[13,"Utf8","","",3,null],[13,"Ext","","",3,null],[6,"Param","","",null,null],[11,"hash","","",4,null],[11,"fmt","","",4,{"inputs":[{"name":"mime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"mime"}],"output":{"name":"mime"}}],[11,"eq","","",4,{"inputs":[{"name":"mime"},{"name":"mime"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"toplevel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"toplevel"}],"output":{"name":"toplevel"}}],[11,"as_str","","",0,{"inputs":[{"name":"toplevel"}],"output":{"name":"str"}}],[11,"deref","","",0,{"inputs":[{"name":"toplevel"}],"output":{"name":"str"}}],[11,"eq","","",0,{"inputs":[{"name":"toplevel"},{"name":"toplevel"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"toplevel"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"toplevel"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"toplevel"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","collections::string","",5,{"inputs":[{"name":"string"},{"name":"toplevel"}],"output":{"name":"bool"}}],[11,"fmt","mime","",0,{"inputs":[{"name":"toplevel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",0,{"inputs":[{"name":"toplevel"},{"name":"str"}],"output":{"name":"result"}}],[11,"hash","","",1,null],[11,"fmt","","",1,{"inputs":[{"name":"sublevel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"sublevel"}],"output":{"name":"sublevel"}}],[11,"as_str","","",1,{"inputs":[{"name":"sublevel"}],"output":{"name":"str"}}],[11,"deref","","",1,{"inputs":[{"name":"sublevel"}],"output":{"name":"str"}}],[11,"eq","","",1,{"inputs":[{"name":"sublevel"},{"name":"sublevel"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"sublevel"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"sublevel"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"sublevel"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","collections::string","",5,{"inputs":[{"name":"string"},{"name":"sublevel"}],"output":{"name":"bool"}}],[11,"fmt","mime","",1,{"inputs":[{"name":"sublevel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",1,{"inputs":[{"name":"sublevel"},{"name":"str"}],"output":{"name":"result"}}],[11,"hash","","",2,null],[11,"fmt","","",2,{"inputs":[{"name":"attr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"attr"}],"output":{"name":"attr"}}],[11,"as_str","","",2,{"inputs":[{"name":"attr"}],"output":{"name":"str"}}],[11,"deref","","",2,{"inputs":[{"name":"attr"}],"output":{"name":"str"}}],[11,"eq","","",2,{"inputs":[{"name":"attr"},{"name":"attr"}],"output":{"name":"bool"}}],[11,"eq","","",2,{"inputs":[{"name":"attr"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",2,{"inputs":[{"name":"attr"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",2,{"inputs":[{"name":"attr"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","collections::string","",5,{"inputs":[{"name":"string"},{"name":"attr"}],"output":{"name":"bool"}}],[11,"fmt","mime","",2,{"inputs":[{"name":"attr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",2,{"inputs":[{"name":"attr"},{"name":"str"}],"output":{"name":"result"}}],[11,"hash","","",3,null],[11,"fmt","","",3,{"inputs":[{"name":"value"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"value"}],"output":{"name":"value"}}],[11,"as_str","","",3,{"inputs":[{"name":"value"}],"output":{"name":"str"}}],[11,"deref","","",3,{"inputs":[{"name":"value"}],"output":{"name":"str"}}],[11,"eq","","",3,{"inputs":[{"name":"value"},{"name":"value"}],"output":{"name":"bool"}}],[11,"eq","","",3,{"inputs":[{"name":"value"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",3,{"inputs":[{"name":"value"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",3,{"inputs":[{"name":"value"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","collections::string","",5,{"inputs":[{"name":"string"},{"name":"value"}],"output":{"name":"bool"}}],[11,"fmt","mime","",3,{"inputs":[{"name":"value"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",3,{"inputs":[{"name":"value"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"mime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_param","","",4,{"inputs":[{"name":"mime"},{"name":"a"}],"output":{"name":"option"}}],[11,"from_str","","",4,{"inputs":[{"name":"mime"},{"name":"str"}],"output":{"name":"result"}}],[14,"mime!","","Easily create a Mime without having to import so many enums.",null,null]],"paths":[[4,"TopLevel"],[4,"SubLevel"],[4,"Attr"],[4,"Value"],[3,"Mime"],[3,"String"]]};
searchIndex['log'] = {"items":[[0,"","log","A lightweight logging facade.",null,null],[3,"LogRecord","","The \"payload\" of a log message.",null,null],[3,"LogMetadata","","Metadata about a log message.",null,null],[3,"LogLocation","","The location of a log message.",null,null],[3,"MaxLogLevelFilter","","A token providing read and write access to the global maximum log level\nfilter.",null,null],[3,"SetLoggerError","","The type returned by `set_logger` if `set_logger` has already been called.",null,null],[3,"ShutdownLoggerError","","The type returned by `shutdown_logger_raw` if `shutdown_logger_raw` has\nalready been called or if `set_logger_raw` has not been called yet.",null,null],[4,"LogLevel","","An enum representing the available verbosity levels of the logging framework",null,null],[13,"Error","","The \"error\" level.",0,null],[13,"Warn","","The \"warn\" level.",0,null],[13,"Info","","The \"info\" level.",0,null],[13,"Debug","","The \"debug\" level.",0,null],[13,"Trace","","The \"trace\" level.",0,null],[4,"LogLevelFilter","","An enum representing the available verbosity level filters of the logging\nframework.",null,null],[13,"Off","","A level lower than all log levels.",1,null],[13,"Error","","Corresponds to the `Error` log level.",1,null],[13,"Warn","","Corresponds to the `Warn` log level.",1,null],[13,"Info","","Corresponds to the `Info` log level.",1,null],[13,"Debug","","Corresponds to the `Debug` log level.",1,null],[13,"Trace","","Corresponds to the `Trace` log level.",1,null],[5,"max_log_level","","Returns the current maximum log level.",null,{"inputs":[],"output":{"name":"loglevelfilter"}}],[5,"set_logger","","Sets the global logger.",null,{"inputs":[{"name":"m"}],"output":{"name":"result"}}],[5,"set_logger_raw","","Sets the global logger from a raw pointer.",null,{"inputs":[{"name":"m"}],"output":{"name":"result"}}],[5,"shutdown_logger_raw","","Shuts down the global logger.",null,{"inputs":[],"output":{"name":"result"}}],[8,"Log","","A trait encapsulating the operations required of a logger",null,null],[10,"enabled","","Determines if a log message with the specified metadata would be\nlogged.",2,{"inputs":[{"name":"log"},{"name":"logmetadata"}],"output":{"name":"bool"}}],[10,"log","","Logs the `LogRecord`.",2,{"inputs":[{"name":"log"},{"name":"logrecord"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"loglevel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"loglevel"}],"output":{"name":"loglevel"}}],[11,"eq","","",0,{"inputs":[{"name":"loglevel"},{"name":"loglevel"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"loglevel"},{"name":"loglevelfilter"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"loglevel"},{"name":"loglevel"}],"output":{"name":"option"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"loglevel"},{"name":"loglevelfilter"}],"output":{"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"loglevel"},{"name":"loglevel"}],"output":{"name":"ordering"}}],[11,"from_str","","",0,{"inputs":[{"name":"loglevel"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"loglevel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"max","","Returns the most verbose logging level.",0,{"inputs":[{"name":"loglevel"}],"output":{"name":"loglevel"}}],[11,"to_log_level_filter","","Converts the `LogLevel` to the equivalent `LogLevelFilter`.",0,{"inputs":[{"name":"loglevel"}],"output":{"name":"loglevelfilter"}}],[11,"fmt","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"loglevelfilter"}],"output":{"name":"loglevelfilter"}}],[11,"eq","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevelfilter"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevel"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevelfilter"}],"output":{"name":"option"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevel"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevelfilter"}],"output":{"name":"ordering"}}],[11,"from_str","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"max","","Returns the most verbose logging level filter.",1,{"inputs":[{"name":"loglevelfilter"}],"output":{"name":"loglevelfilter"}}],[11,"to_log_level","","Converts `self` to the equivalent `LogLevel`.",1,{"inputs":[{"name":"loglevelfilter"}],"output":{"name":"option"}}],[11,"args","","The message body.",3,{"inputs":[{"name":"logrecord"}],"output":{"name":"arguments"}}],[11,"metadata","","Metadata about the log directive.",3,{"inputs":[{"name":"logrecord"}],"output":{"name":"logmetadata"}}],[11,"location","","The location of the log directive.",3,{"inputs":[{"name":"logrecord"}],"output":{"name":"loglocation"}}],[11,"level","","The verbosity level of the message.",3,{"inputs":[{"name":"logrecord"}],"output":{"name":"loglevel"}}],[11,"target","","The name of the target of the directive.",3,{"inputs":[{"name":"logrecord"}],"output":{"name":"str"}}],[11,"level","","The verbosity level of the message.",4,{"inputs":[{"name":"logmetadata"}],"output":{"name":"loglevel"}}],[11,"target","","The name of the target of the directive.",4,{"inputs":[{"name":"logmetadata"}],"output":{"name":"str"}}],[11,"fmt","","",5,{"inputs":[{"name":"loglocation"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"loglocation"}],"output":{"name":"loglocation"}}],[11,"module_path","","The module path of the message.",5,{"inputs":[{"name":"loglocation"}],"output":{"name":"str"}}],[11,"file","","The source file containing the message.",5,{"inputs":[{"name":"loglocation"}],"output":{"name":"str"}}],[11,"line","","The line containing the message.",5,{"inputs":[{"name":"loglocation"}],"output":{"name":"u32"}}],[11,"fmt","","",6,{"inputs":[{"name":"maxloglevelfilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get","","Gets the current maximum log level filter.",6,{"inputs":[{"name":"maxloglevelfilter"}],"output":{"name":"loglevelfilter"}}],[11,"set","","Sets the maximum log level.",6,{"inputs":[{"name":"maxloglevelfilter"},{"name":"loglevelfilter"}],"output":null}],[11,"fmt","","",7,{"inputs":[{"name":"setloggererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"setloggererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",7,{"inputs":[{"name":"setloggererror"}],"output":{"name":"str"}}],[11,"fmt","","",8,{"inputs":[{"name":"shutdownloggererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"shutdownloggererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",8,{"inputs":[{"name":"shutdownloggererror"}],"output":{"name":"str"}}],[14,"log!","","The standard logging macro.",null,null],[14,"error!","","Logs a message at the error level.",null,null],[14,"warn!","","Logs a message at the warn level.",null,null],[14,"info!","","Logs a message at the info level.",null,null],[14,"debug!","","Logs a message at the debug level.",null,null],[14,"trace!","","Logs a message at the trace level.",null,null],[14,"log_enabled!","","Determines if a message logged at the specified level in that module will\nbe logged.",null,null]],"paths":[[4,"LogLevel"],[4,"LogLevelFilter"],[8,"Log"],[3,"LogRecord"],[3,"LogMetadata"],[3,"LogLocation"],[3,"MaxLogLevelFilter"],[3,"SetLoggerError"],[3,"ShutdownLoggerError"]]};
searchIndex['memchr'] = {"items":[[0,"","memchr","This crate defines two functions, `memchr` and `memrchr`, which expose a safe interface\nto the corresponding functions in `libc`.",null,null],[5,"memchr","","A safe interface to `memchr`.",null,null],[5,"memrchr","","A safe interface to `memrchr`.",null,null],[5,"memchr2","","Like `memchr`, but searches for two bytes instead of one.",null,null],[5,"memchr3","","Like `memchr`, but searches for three bytes instead of one.",null,null]],"paths":[]};
searchIndex['libc'] = {"items":[[0,"","libc","Crate docs",null,null],[3,"utimbuf","","",null,null],[12,"actime","","",0,null],[12,"modtime","","",0,null],[3,"timeval","","",null,null],[12,"tv_sec","","",1,null],[12,"tv_usec","","",1,null],[3,"timespec","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_nsec","","",2,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",3,null],[12,"rlim_max","","",3,null],[3,"rusage","","",null,null],[12,"ru_utime","","",4,null],[12,"ru_stime","","",4,null],[12,"ru_maxrss","","",4,null],[12,"ru_ixrss","","",4,null],[12,"ru_idrss","","",4,null],[12,"ru_isrss","","",4,null],[12,"ru_minflt","","",4,null],[12,"ru_majflt","","",4,null],[12,"ru_nswap","","",4,null],[12,"ru_inblock","","",4,null],[12,"ru_oublock","","",4,null],[12,"ru_msgsnd","","",4,null],[12,"ru_msgrcv","","",4,null],[12,"ru_nsignals","","",4,null],[12,"ru_nvcsw","","",4,null],[12,"ru_nivcsw","","",4,null],[3,"in_addr","","",null,null],[12,"s_addr","","",5,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",6,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",7,null],[12,"imr_interface","","",7,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",8,null],[12,"ipv6mr_interface","","",8,null],[3,"hostent","","",null,null],[12,"h_name","","",9,null],[12,"h_aliases","","",9,null],[12,"h_addrtype","","",9,null],[12,"h_length","","",9,null],[12,"h_addr_list","","",9,null],[3,"iovec","","",null,null],[12,"iov_base","","",10,null],[12,"iov_len","","",10,null],[3,"pollfd","","",null,null],[12,"fd","","",11,null],[12,"events","","",11,null],[12,"revents","","",11,null],[3,"winsize","","",null,null],[12,"ws_row","","",12,null],[12,"ws_col","","",12,null],[12,"ws_xpixel","","",12,null],[12,"ws_ypixel","","",12,null],[3,"sockaddr","","",null,null],[12,"sa_family","","",13,null],[12,"sa_data","","",13,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",14,null],[12,"sin_port","","",14,null],[12,"sin_addr","","",14,null],[12,"sin_zero","","",14,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",15,null],[12,"sin6_port","","",15,null],[12,"sin6_flowinfo","","",15,null],[12,"sin6_addr","","",15,null],[12,"sin6_scope_id","","",15,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",16,null],[12,"sun_path","","",16,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",17,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",18,null],[12,"ai_family","","",18,null],[12,"ai_socktype","","",18,null],[12,"ai_protocol","","",18,null],[12,"ai_addrlen","","",18,null],[12,"ai_addr","","",18,null],[12,"ai_canonname","","",18,null],[12,"ai_next","","",18,null],[3,"sockaddr_nl","","",null,null],[12,"nl_family","","",19,null],[12,"nl_pid","","",19,null],[12,"nl_groups","","",19,null],[3,"sockaddr_ll","","",null,null],[12,"sll_family","","",20,null],[12,"sll_protocol","","",20,null],[12,"sll_ifindex","","",20,null],[12,"sll_hatype","","",20,null],[12,"sll_pkttype","","",20,null],[12,"sll_halen","","",20,null],[12,"sll_addr","","",20,null],[3,"fd_set","","",null,null],[3,"tm","","",null,null],[12,"tm_sec","","",21,null],[12,"tm_min","","",21,null],[12,"tm_hour","","",21,null],[12,"tm_mday","","",21,null],[12,"tm_mon","","",21,null],[12,"tm_year","","",21,null],[12,"tm_wday","","",21,null],[12,"tm_yday","","",21,null],[12,"tm_isdst","","",21,null],[12,"tm_gmtoff","","",21,null],[12,"tm_zone","","",21,null],[3,"sched_param","","",null,null],[12,"sched_priority","","",22,null],[3,"Dl_info","","",null,null],[12,"dli_fname","","",23,null],[12,"dli_fbase","","",23,null],[12,"dli_sname","","",23,null],[12,"dli_saddr","","",23,null],[3,"epoll_event","","",null,null],[12,"events","","",24,null],[12,"u64","","",24,null],[3,"utsname","","",null,null],[12,"sysname","","",25,null],[12,"nodename","","",25,null],[12,"release","","",25,null],[12,"version","","",25,null],[12,"machine","","",25,null],[12,"domainname","","",25,null],[3,"dirent","","",null,null],[12,"d_ino","","",26,null],[12,"d_off","","",26,null],[12,"d_reclen","","",26,null],[12,"d_type","","",26,null],[12,"d_name","","",26,null],[3,"dirent64","","",null,null],[12,"d_ino","","",27,null],[12,"d_off","","",27,null],[12,"d_reclen","","",27,null],[12,"d_type","","",27,null],[12,"d_name","","",27,null],[3,"rlimit64","","",null,null],[12,"rlim_cur","","",28,null],[12,"rlim_max","","",28,null],[3,"glob_t","","",null,null],[12,"gl_pathc","","",29,null],[12,"gl_pathv","","",29,null],[12,"gl_offs","","",29,null],[12,"gl_flags","","",29,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",30,null],[12,"ifa_name","","",30,null],[12,"ifa_flags","","",30,null],[12,"ifa_addr","","",30,null],[12,"ifa_netmask","","",30,null],[12,"ifa_ifu","","",30,null],[12,"ifa_data","","",30,null],[3,"pthread_mutex_t","","",null,null],[3,"pthread_rwlock_t","","",null,null],[3,"pthread_mutexattr_t","","",null,null],[3,"pthread_cond_t","","",null,null],[3,"passwd","","",null,null],[12,"pw_name","","",31,null],[12,"pw_passwd","","",31,null],[12,"pw_uid","","",31,null],[12,"pw_gid","","",31,null],[12,"pw_gecos","","",31,null],[12,"pw_dir","","",31,null],[12,"pw_shell","","",31,null],[3,"statvfs","","",null,null],[12,"f_bsize","","",32,null],[12,"f_frsize","","",32,null],[12,"f_blocks","","",32,null],[12,"f_bfree","","",32,null],[12,"f_bavail","","",32,null],[12,"f_files","","",32,null],[12,"f_ffree","","",32,null],[12,"f_favail","","",32,null],[12,"f_fsid","","",32,null],[12,"f_flag","","",32,null],[12,"f_namemax","","",32,null],[3,"dqblk","","",null,null],[12,"dqb_bhardlimit","","",33,null],[12,"dqb_bsoftlimit","","",33,null],[12,"dqb_curspace","","",33,null],[12,"dqb_ihardlimit","","",33,null],[12,"dqb_isoftlimit","","",33,null],[12,"dqb_curinodes","","",33,null],[12,"dqb_btime","","",33,null],[12,"dqb_itime","","",33,null],[12,"dqb_valid","","",33,null],[3,"signalfd_siginfo","","",null,null],[12,"ssi_signo","","",34,null],[12,"ssi_errno","","",34,null],[12,"ssi_code","","",34,null],[12,"ssi_pid","","",34,null],[12,"ssi_uid","","",34,null],[12,"ssi_fd","","",34,null],[12,"ssi_tid","","",34,null],[12,"ssi_band","","",34,null],[12,"ssi_overrun","","",34,null],[12,"ssi_trapno","","",34,null],[12,"ssi_status","","",34,null],[12,"ssi_int","","",34,null],[12,"ssi_ptr","","",34,null],[12,"ssi_utime","","",34,null],[12,"ssi_stime","","",34,null],[12,"ssi_addr","","",34,null],[3,"fsid_t","","",null,null],[3,"mq_attr","","",null,null],[12,"mq_flags","","",35,null],[12,"mq_maxmsg","","",35,null],[12,"mq_msgsize","","",35,null],[12,"mq_curmsgs","","",35,null],[3,"cpu_set_t","","",null,null],[3,"sigaction","","",null,null],[12,"sa_sigaction","","",36,null],[12,"sa_mask","","",36,null],[12,"sa_flags","","",36,null],[3,"stack_t","","",null,null],[12,"ss_sp","","",37,null],[12,"ss_flags","","",37,null],[12,"ss_size","","",37,null],[3,"siginfo_t","","",null,null],[12,"si_signo","","",38,null],[12,"si_errno","","",38,null],[12,"si_code","","",38,null],[12,"_pad","","",38,null],[3,"glob64_t","","",null,null],[12,"gl_pathc","","",39,null],[12,"gl_pathv","","",39,null],[12,"gl_offs","","",39,null],[12,"gl_flags","","",39,null],[3,"ucred","","",null,null],[12,"pid","","",40,null],[12,"uid","","",40,null],[12,"gid","","",40,null],[3,"statfs","","",null,null],[12,"f_type","","",41,null],[12,"f_bsize","","",41,null],[12,"f_blocks","","",41,null],[12,"f_bfree","","",41,null],[12,"f_bavail","","",41,null],[12,"f_files","","",41,null],[12,"f_ffree","","",41,null],[12,"f_fsid","","",41,null],[12,"f_namelen","","",41,null],[12,"f_frsize","","",41,null],[3,"msghdr","","",null,null],[12,"msg_name","","",42,null],[12,"msg_namelen","","",42,null],[12,"msg_iov","","",42,null],[12,"msg_iovlen","","",42,null],[12,"msg_control","","",42,null],[12,"msg_controllen","","",42,null],[12,"msg_flags","","",42,null],[3,"termios","","",null,null],[12,"c_iflag","","",43,null],[12,"c_oflag","","",43,null],[12,"c_cflag","","",43,null],[12,"c_lflag","","",43,null],[12,"c_line","","",43,null],[12,"c_cc","","",43,null],[12,"c_ispeed","","",43,null],[12,"c_ospeed","","",43,null],[3,"flock","","",null,null],[12,"l_type","","",44,null],[12,"l_whence","","",44,null],[12,"l_start","","",44,null],[12,"l_len","","",44,null],[12,"l_pid","","",44,null],[3,"ipc_perm","","",null,null],[12,"__key","","",45,null],[12,"uid","","",45,null],[12,"gid","","",45,null],[12,"cuid","","",45,null],[12,"cgid","","",45,null],[12,"mode","","",45,null],[12,"__seq","","",45,null],[3,"shmid_ds","","",null,null],[12,"shm_perm","","",46,null],[12,"shm_segsz","","",46,null],[12,"shm_atime","","",46,null],[12,"shm_dtime","","",46,null],[12,"shm_ctime","","",46,null],[12,"shm_cpid","","",46,null],[12,"shm_lpid","","",46,null],[12,"shm_nattch","","",46,null],[3,"sigset_t","","",null,null],[3,"stat","","",null,null],[12,"st_dev","","",47,null],[12,"st_ino","","",47,null],[12,"st_nlink","","",47,null],[12,"st_mode","","",47,null],[12,"st_uid","","",47,null],[12,"st_gid","","",47,null],[12,"st_rdev","","",47,null],[12,"st_size","","",47,null],[12,"st_blksize","","",47,null],[12,"st_blocks","","",47,null],[12,"st_atime","","",47,null],[12,"st_atime_nsec","","",47,null],[12,"st_mtime","","",47,null],[12,"st_mtime_nsec","","",47,null],[12,"st_ctime","","",47,null],[12,"st_ctime_nsec","","",47,null],[3,"stat64","","",null,null],[12,"st_dev","","",48,null],[12,"st_ino","","",48,null],[12,"st_nlink","","",48,null],[12,"st_mode","","",48,null],[12,"st_uid","","",48,null],[12,"st_gid","","",48,null],[12,"st_rdev","","",48,null],[12,"st_size","","",48,null],[12,"st_blksize","","",48,null],[12,"st_blocks","","",48,null],[12,"st_atime","","",48,null],[12,"st_atime_nsec","","",48,null],[12,"st_mtime","","",48,null],[12,"st_mtime_nsec","","",48,null],[12,"st_ctime","","",48,null],[12,"st_ctime_nsec","","",48,null],[3,"pthread_attr_t","","",null,null],[3,"mcontext_t","","",null,null],[3,"ucontext_t","","",null,null],[12,"uc_flags","","",49,null],[12,"uc_link","","",49,null],[12,"uc_stack","","",49,null],[12,"uc_mcontext","","",49,null],[12,"uc_sigmask","","",49,null],[4,"c_void","","",null,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[4,"DIR","","",null,null],[4,"timezone","","",null,null],[4,"fpos64_t","","",null,null],[5,"FD_CLR","","",null,null],[5,"FD_ISSET","","",null,null],[5,"FD_SET","","",null,null],[5,"FD_ZERO","","",null,null],[5,"WIFEXITED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WEXITSTATUS","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WTERMSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"CPU_ZERO","","",null,null],[5,"CPU_SET","","",null,null],[5,"CPU_ISSET","","",null,{"inputs":[{"name":"usize"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"CPU_EQUAL","","",null,{"inputs":[{"name":"cpu_set_t"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"isalnum","","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[5,"fopen","","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"abort","","",null,null],[5,"exit","","",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"strcpy","","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"memcmp","","",null,null],[5,"memchr","","",null,null],[5,"abs","","",null,null],[5,"atof","","",null,null],[5,"labs","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[5,"socket","","",null,null],[5,"connect","","",null,null],[5,"bind","","",null,null],[5,"listen","","",null,null],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"socketpair","","",null,null],[5,"sendto","","",null,null],[5,"shutdown","","",null,null],[5,"chmod","","",null,null],[5,"fchmod","","",null,null],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"stat","","",null,null],[5,"popen","","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[5,"open","","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,null],[5,"opendir","","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"access","","",null,null],[5,"alarm","","",null,null],[5,"chdir","","",null,null],[5,"chown","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,null],[5,"fpathconf","","",null,null],[5,"getcwd","","",null,null],[5,"getegid","","",null,null],[5,"geteuid","","",null,null],[5,"getgid","","",null,null],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgrp","","",null,null],[5,"getpid","","",null,null],[5,"getppid","","",null,null],[5,"getuid","","",null,null],[5,"isatty","","",null,null],[5,"link","","",null,null],[5,"lseek","","",null,null],[5,"pathconf","","",null,null],[5,"pause","","",null,null],[5,"pipe","","",null,null],[5,"posix_memalign","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"setgid","","",null,null],[5,"setpgid","","",null,null],[5,"setsid","","",null,null],[5,"setuid","","",null,null],[5,"sleep","","",null,null],[5,"nanosleep","","",null,null],[5,"tcgetpgrp","","",null,null],[5,"ttyname","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"umask","","",null,null],[5,"utime","","",null,null],[5,"kill","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,null],[5,"munlockall","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[5,"if_nametoindex","","",null,null],[5,"if_indextoname","","",null,null],[5,"lstat","","",null,null],[5,"fsync","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,null],[5,"signal","","",null,null],[5,"getrlimit","","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[5,"getdtablesize","","",null,null],[5,"realpath","","",null,null],[5,"flock","","",null,null],[5,"gettimeofday","","",null,null],[5,"pthread_self","","",null,null],[5,"pthread_create","","",null,null],[5,"pthread_join","","",null,null],[5,"pthread_attr_init","","",null,null],[5,"pthread_attr_destroy","","",null,null],[5,"pthread_attr_setstacksize","","",null,null],[5,"pthread_attr_setdetachstate","","",null,null],[5,"pthread_detach","","",null,null],[5,"sched_yield","","",null,null],[5,"pthread_key_create","","",null,null],[5,"pthread_key_delete","","",null,null],[5,"pthread_getspecific","","",null,null],[5,"pthread_setspecific","","",null,null],[5,"pthread_mutex_init","","",null,null],[5,"pthread_mutex_destroy","","",null,null],[5,"pthread_mutex_lock","","",null,null],[5,"pthread_mutex_trylock","","",null,null],[5,"pthread_mutex_unlock","","",null,null],[5,"pthread_mutexattr_init","","",null,null],[5,"pthread_mutexattr_destroy","","",null,null],[5,"pthread_mutexattr_settype","","",null,null],[5,"pthread_cond_wait","","",null,null],[5,"pthread_cond_timedwait","","",null,null],[5,"pthread_cond_signal","","",null,null],[5,"pthread_cond_broadcast","","",null,null],[5,"pthread_cond_destroy","","",null,null],[5,"pthread_rwlock_destroy","","",null,null],[5,"pthread_rwlock_rdlock","","",null,null],[5,"pthread_rwlock_tryrdlock","","",null,null],[5,"pthread_rwlock_wrlock","","",null,null],[5,"pthread_rwlock_trywrlock","","",null,null],[5,"pthread_rwlock_unlock","","",null,null],[5,"pthread_sigmask","","",null,null],[5,"pthread_kill","","",null,null],[5,"strerror_r","","",null,null],[5,"getsockopt","","",null,null],[5,"raise","","",null,null],[5,"sigaction","","",null,null],[5,"sigaltstack","","",null,null],[5,"sigwait","","",null,null],[5,"utimes","","",null,null],[5,"dlopen","","",null,null],[5,"dlerror","","",null,null],[5,"dlsym","","",null,null],[5,"dlclose","","",null,null],[5,"dladdr","","",null,null],[5,"getaddrinfo","","",null,null],[5,"freeaddrinfo","","",null,null],[5,"gai_strerror","","",null,null],[5,"gmtime_r","","",null,null],[5,"localtime_r","","",null,null],[5,"mktime","","",null,null],[5,"mknod","","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"uname","","",null,null],[5,"daemon","","",null,null],[5,"gethostname","","",null,null],[5,"chroot","","",null,null],[5,"usleep","","",null,null],[5,"send","","",null,null],[5,"recv","","",null,null],[5,"putenv","","",null,null],[5,"sendmsg","","",null,null],[5,"recvmsg","","",null,null],[5,"poll","","",null,null],[5,"select","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"glob","","",null,null],[5,"globfree","","",null,null],[5,"posix_madvise","","",null,null],[5,"shm_unlink","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[5,"getsid","","",null,null],[5,"madvise","","",null,null],[5,"readlink","","",null,null],[5,"msync","","",null,null],[5,"sysconf","","",null,null],[5,"recvfrom","","",null,null],[5,"mkfifo","","",null,null],[5,"sigemptyset","","",null,null],[5,"sigaddset","","",null,null],[5,"sigfillset","","",null,null],[5,"sigdelset","","",null,null],[5,"sigismember","","",null,null],[5,"pselect","","",null,null],[5,"fseeko","","",null,null],[5,"ftello","","",null,null],[5,"timegm","","",null,null],[5,"statvfs","","",null,null],[5,"fstatvfs","","",null,null],[5,"tcdrain","","",null,null],[5,"cfgetispeed","","",null,null],[5,"cfgetospeed","","",null,null],[5,"cfsetispeed","","",null,null],[5,"cfsetospeed","","",null,null],[5,"tcgetattr","","",null,null],[5,"tcsetattr","","",null,null],[5,"tcflow","","",null,null],[5,"tcflush","","",null,null],[5,"tcsendbreak","","",null,null],[5,"mkstemp","","",null,null],[5,"mkstemps","","",null,null],[5,"mkdtemp","","",null,null],[5,"futimes","","",null,null],[5,"getpwuid_r","","",null,null],[5,"fdatasync","","",null,null],[5,"mincore","","",null,null],[5,"clock_gettime","","",null,null],[5,"prctl","","",null,null],[5,"pthread_getattr_np","","",null,null],[5,"pthread_attr_getguardsize","","",null,null],[5,"pthread_attr_getstack","","",null,null],[5,"memalign","","",null,null],[5,"setgroups","","",null,null],[5,"sched_setscheduler","","",null,null],[5,"sched_getscheduler","","",null,null],[5,"sched_get_priority_max","","",null,null],[5,"sched_get_priority_min","","",null,null],[5,"epoll_create","","",null,null],[5,"epoll_ctl","","",null,null],[5,"epoll_wait","","",null,null],[5,"pipe2","","",null,null],[5,"mount","","",null,null],[5,"umount","","",null,null],[5,"umount2","","",null,null],[5,"clone","","",null,null],[5,"statfs","","",null,null],[5,"fstatfs","","",null,null],[5,"memrchr","","",null,null],[5,"syscall","","",null,null],[5,"sendfile","","",null,null],[5,"splice","","",null,null],[5,"tee","","",null,null],[5,"vmsplice","","",null,null],[5,"posix_fadvise","","",null,null],[5,"futimens","","",null,null],[5,"utimensat","","",null,null],[5,"shm_open","","",null,null],[5,"shmget","","",null,null],[5,"shmat","","",null,null],[5,"shmdt","","",null,null],[5,"shmctl","","",null,null],[5,"mprotect","","",null,null],[5,"__errno_location","","",null,null],[5,"fopen64","","",null,null],[5,"freopen64","","",null,null],[5,"tmpfile64","","",null,null],[5,"fgetpos64","","",null,null],[5,"fsetpos64","","",null,null],[5,"fstat64","","",null,null],[5,"stat64","","",null,null],[5,"open64","","",null,null],[5,"creat64","","",null,null],[5,"lseek64","","",null,null],[5,"pread64","","",null,null],[5,"pwrite64","","",null,null],[5,"mmap64","","",null,null],[5,"lstat64","","",null,null],[5,"ftruncate64","","",null,null],[5,"readdir64_r","","",null,null],[5,"getrlimit64","","",null,null],[5,"setrlimit64","","",null,null],[5,"fseeko64","","",null,null],[5,"ftello64","","",null,null],[5,"fallocate","","",null,null],[5,"posix_fallocate","","",null,null],[5,"readahead","","",null,null],[5,"getxattr","","",null,null],[5,"lgetxattr","","",null,null],[5,"fgetxattr","","",null,null],[5,"setxattr","","",null,null],[5,"lsetxattr","","",null,null],[5,"fsetxattr","","",null,null],[5,"listxattr","","",null,null],[5,"llistxattr","","",null,null],[5,"flistxattr","","",null,null],[5,"removexattr","","",null,null],[5,"lremovexattr","","",null,null],[5,"fremovexattr","","",null,null],[5,"signalfd","","",null,null],[5,"pwritev","","",null,null],[5,"preadv","","",null,null],[5,"quotactl","","",null,null],[5,"mq_open","","",null,null],[5,"mq_close","","",null,null],[5,"mq_unlink","","",null,null],[5,"mq_receive","","",null,null],[5,"mq_send","","",null,null],[5,"mq_getattr","","",null,null],[5,"mq_setattr","","",null,null],[5,"sched_getaffinity","","",null,null],[5,"sched_setaffinity","","",null,null],[5,"epoll_pwait","","",null,null],[5,"dup3","","",null,null],[5,"unshare","","",null,null],[5,"sethostname","","",null,null],[5,"setns","","",null,null],[5,"mkostemp","","",null,null],[5,"mkostemps","","",null,null],[5,"sigtimedwait","","",null,null],[5,"sigwaitinfo","","",null,null],[5,"sysctl","","",null,null],[5,"ioctl","","",null,null],[5,"backtrace","","",null,null],[5,"glob64","","",null,null],[5,"globfree64","","",null,null],[5,"getnameinfo","","",null,null],[5,"eventfd","","",null,null],[5,"ptrace","","",null,null],[5,"pthread_attr_getaffinity_np","","",null,null],[5,"pthread_attr_setaffinity_np","","",null,null],[5,"getcontext","","",null,null],[5,"setcontext","","",null,null],[5,"makecontext","","",null,null],[5,"swapcontext","","",null,null],[11,"is_some","core::option","Returns `true` if the option is a `Some` value",50,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"is_none","","Returns `true` if the option is a `None` value",50,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"as_ref","","Converts from `Option<T>` to `Option<&T>`",50,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_mut","","Converts from `Option<T>` to `Option<&mut T>`",50,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_mut_slice","","Converts from `Option<T>` to `&mut [T]` (without copying)",50,null],[11,"expect","","Unwraps an option, yielding the content of a `Some`",50,{"inputs":[{"name":"option"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap","","Moves the value `v` out of the `Option<T>` if it is `Some(v)`.",50,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"unwrap_or","","Returns the contained value or a default.",50,{"inputs":[{"name":"option"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",50,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"t"}}],[11,"map","","Maps an `Option<T>` to `Option<U>` by applying a function to a contained value",50,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",50,{"inputs":[{"name":"option"},{"name":"u"},{"name":"f"}],"output":{"name":"u"}}],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",50,{"inputs":[{"name":"option"},{"name":"d"},{"name":"f"}],"output":{"name":"u"}}],[11,"ok_or","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",50,{"inputs":[{"name":"option"},{"name":"e"}],"output":{"name":"result"}}],[11,"ok_or_else","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",50,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",50,{"inputs":[{"name":"option"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",50,{"inputs":[{"name":"option"}],"output":{"name":"itermut"}}],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",50,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",50,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",50,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",50,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",50,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_slice","","Converts from `Option<T>` to `&[T]` (without copying)",50,null],[11,"cloned","","Maps an `Option<&T>` to an `Option<T>` by cloning the contents of the\noption.",50,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"unwrap_or_default","","Returns the contained value or a default",50,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"default","core::num","",51,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"fmt","","",51,{"inputs":[{"name":"wrapping"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",51,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"cmp","","",51,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",51,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"option"}}],[11,"lt","","",51,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"le","","",51,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"gt","","",51,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ge","","",51,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"eq","","",51,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"shl","","",51,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",51,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",51,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",51,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",51,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",51,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",51,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",51,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",51,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",51,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",51,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",51,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",51,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",51,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",51,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",51,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",51,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",51,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",51,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",51,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"add","","",51,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",51,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",51,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",51,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",51,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",51,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",51,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",51,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",51,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",51,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",51,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",51,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",51,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",51,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",51,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",51,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",51,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",51,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",51,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",51,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",51,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",51,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",51,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",51,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",51,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",51,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",51,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",51,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",51,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",51,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",51,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",51,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",51,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",51,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",51,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",51,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",51,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",51,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",51,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",51,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",51,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",51,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",51,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",51,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",51,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",51,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",51,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",51,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",51,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",51,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",51,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",51,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",51,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",51,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",51,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",51,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",51,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",51,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",51,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",51,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",51,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",51,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",51,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",51,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",51,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",51,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",51,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",51,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",51,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",51,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",51,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",51,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",51,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",51,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",51,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",51,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",51,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",51,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",51,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",51,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"eq","core::num::flt2dec::decoder","",52,{"inputs":[{"name":"decoded"},{"name":"decoded"}],"output":{"name":"bool"}}],[11,"ne","","",52,{"inputs":[{"name":"decoded"},{"name":"decoded"}],"output":{"name":"bool"}}],[11,"fmt","","",52,{"inputs":[{"name":"decoded"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",52,{"inputs":[{"name":"decoded"}],"output":{"name":"decoded"}}],[11,"eq","","",53,{"inputs":[{"name":"fulldecoded"},{"name":"fulldecoded"}],"output":{"name":"bool"}}],[11,"ne","","",53,{"inputs":[{"name":"fulldecoded"},{"name":"fulldecoded"}],"output":{"name":"bool"}}],[11,"fmt","","",53,{"inputs":[{"name":"fulldecoded"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",53,{"inputs":[{"name":"fulldecoded"}],"output":{"name":"fulldecoded"}}],[11,"fmt","core::num::flt2dec","",54,{"inputs":[{"name":"part"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",54,{"inputs":[{"name":"part"},{"name":"part"}],"output":{"name":"bool"}}],[11,"ne","","",54,{"inputs":[{"name":"part"},{"name":"part"}],"output":{"name":"bool"}}],[11,"clone","","",54,{"inputs":[{"name":"part"}],"output":{"name":"part"}}],[11,"len","","Returns the exact byte length of given part.",54,{"inputs":[{"name":"part"}],"output":{"name":"usize"}}],[11,"write","","Writes a part into the supplied buffer.\nReturns the number of written bytes, or `None` if the buffer is not enough.\n(It may still leave partially written bytes in the buffer; do not rely on that.)",54,null],[11,"clone","","",55,{"inputs":[{"name":"formatted"}],"output":{"name":"formatted"}}],[11,"len","","Returns the exact byte length of combined formatted result.",55,{"inputs":[{"name":"formatted"}],"output":{"name":"usize"}}],[11,"write","","Writes all formatted parts into the supplied buffer.\nReturns the number of written bytes, or `None` if the buffer is not enough.\n(It may still leave partially written bytes in the buffer; do not rely on that.)",55,null],[11,"fmt","","",56,{"inputs":[{"name":"sign"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",56,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"ne","","",56,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"clone","","",56,{"inputs":[{"name":"sign"}],"output":{"name":"sign"}}],[11,"fmt","core::num::dec2flt::rawfp","",57,{"inputs":[{"name":"unpacked"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",57,{"inputs":[{"name":"unpacked"}],"output":{"name":"unpacked"}}],[11,"new","","",57,{"inputs":[{"name":"unpacked"},{"name":"u64"},{"name":"i16"}],"output":{"name":"unpacked"}}],[11,"fmt","core::num::dec2flt::parse","",58,{"inputs":[{"name":"sign"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",59,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"ne","","",59,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"fmt","","",59,{"inputs":[{"name":"decimal"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",59,null],[11,"eq","","",60,{"inputs":[{"name":"parseresult"},{"name":"parseresult"}],"output":{"name":"bool"}}],[11,"ne","","",60,{"inputs":[{"name":"parseresult"},{"name":"parseresult"}],"output":{"name":"bool"}}],[11,"fmt","","",60,{"inputs":[{"name":"parseresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","core::num::dec2flt","",61,{"inputs":[{"name":"parsefloaterror"},{"name":"parsefloaterror"}],"output":{"name":"bool"}}],[11,"ne","","",61,{"inputs":[{"name":"parsefloaterror"},{"name":"parsefloaterror"}],"output":{"name":"bool"}}],[11,"clone","","",61,{"inputs":[{"name":"parsefloaterror"}],"output":{"name":"parsefloaterror"}}],[11,"fmt","","",61,{"inputs":[{"name":"parsefloaterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",62,{"inputs":[{"name":"floaterrorkind"},{"name":"floaterrorkind"}],"output":{"name":"bool"}}],[11,"ne","","",62,{"inputs":[{"name":"floaterrorkind"},{"name":"floaterrorkind"}],"output":{"name":"bool"}}],[11,"clone","","",62,{"inputs":[{"name":"floaterrorkind"}],"output":{"name":"floaterrorkind"}}],[11,"fmt","","",62,{"inputs":[{"name":"floaterrorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",61,{"inputs":[{"name":"parsefloaterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_small","core::num::bignum","Makes a bignum from one digit.",63,{"inputs":[{"name":"big32x40"},{"name":"u32"}],"output":{"name":"big32x40"}}],[11,"from_u64","","Makes a bignum from `u64` value.",63,{"inputs":[{"name":"big32x40"},{"name":"u64"}],"output":{"name":"big32x40"}}],[11,"digits","","Return the internal digits as a slice `[a, b, c, ...]` such that the numeric\nvalue is `a + b * 2^W + c * 2^(2W) + ...` where `W` is the number of bits in\nthe digit type.",63,null],[11,"get_bit","","Return the `i`-th bit where bit 0 is the least significant one.\nIn other words, the bit with weight `2^i`.",63,{"inputs":[{"name":"big32x40"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"is_zero","","Returns true if the bignum is zero.",63,{"inputs":[{"name":"big32x40"}],"output":{"name":"bool"}}],[11,"bit_length","","Returns the number of bits necessary to represent this value. Note that zero\nis considered to need 0 bits.",63,{"inputs":[{"name":"big32x40"}],"output":{"name":"usize"}}],[11,"add","","Adds `other` to itself and returns its own mutable reference.",63,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"big32x40"}}],[11,"add_small","","",63,{"inputs":[{"name":"big32x40"},{"name":"u32"}],"output":{"name":"big32x40"}}],[11,"sub","","Subtracts `other` from itself and returns its own mutable reference.",63,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"big32x40"}}],[11,"mul_small","","Multiplies itself by a digit-sized `other` and returns its own\nmutable reference.",63,{"inputs":[{"name":"big32x40"},{"name":"u32"}],"output":{"name":"big32x40"}}],[11,"mul_pow2","","Multiplies itself by `2^bits` and returns its own mutable reference.",63,{"inputs":[{"name":"big32x40"},{"name":"usize"}],"output":{"name":"big32x40"}}],[11,"mul_pow5","","Multiplies itself by `5^e` and returns its own mutable reference.",63,{"inputs":[{"name":"big32x40"},{"name":"usize"}],"output":{"name":"big32x40"}}],[11,"mul_digits","","Multiplies itself by a number described by `other[0] + other[1] * 2^W +\nother[2] * 2^(2W) + ...` (where `W` is the number of bits in the digit type)\nand returns its own mutable reference.",63,null],[11,"div_rem_small","","Divides itself by a digit-sized `other` and returns its own\nmutable reference *and* the remainder.",63,null],[11,"div_rem","","Divide self by another bignum, overwriting `q` with the quotient and `r` with the\nremainder.",63,null],[11,"eq","","",63,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",63,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"option"}}],[11,"cmp","","",63,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"ordering"}}],[11,"clone","","",63,{"inputs":[{"name":"big32x40"}],"output":{"name":"big32x40"}}],[11,"fmt","","",63,{"inputs":[{"name":"big32x40"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_small","core::num::bignum::tests","Makes a bignum from one digit.",64,{"inputs":[{"name":"big8x3"},{"name":"u8"}],"output":{"name":"big8x3"}}],[11,"from_u64","","Makes a bignum from `u64` value.",64,{"inputs":[{"name":"big8x3"},{"name":"u64"}],"output":{"name":"big8x3"}}],[11,"digits","","Return the internal digits as a slice `[a, b, c, ...]` such that the numeric\nvalue is `a + b * 2^W + c * 2^(2W) + ...` where `W` is the number of bits in\nthe digit type.",64,null],[11,"get_bit","","Return the `i`-th bit where bit 0 is the least significant one.\nIn other words, the bit with weight `2^i`.",64,{"inputs":[{"name":"big8x3"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"is_zero","","Returns true if the bignum is zero.",64,{"inputs":[{"name":"big8x3"}],"output":{"name":"bool"}}],[11,"bit_length","","Returns the number of bits necessary to represent this value. Note that zero\nis considered to need 0 bits.",64,{"inputs":[{"name":"big8x3"}],"output":{"name":"usize"}}],[11,"add","","Adds `other` to itself and returns its own mutable reference.",64,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"big8x3"}}],[11,"add_small","","",64,{"inputs":[{"name":"big8x3"},{"name":"u8"}],"output":{"name":"big8x3"}}],[11,"sub","","Subtracts `other` from itself and returns its own mutable reference.",64,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"big8x3"}}],[11,"mul_small","","Multiplies itself by a digit-sized `other` and returns its own\nmutable reference.",64,{"inputs":[{"name":"big8x3"},{"name":"u8"}],"output":{"name":"big8x3"}}],[11,"mul_pow2","","Multiplies itself by `2^bits` and returns its own mutable reference.",64,{"inputs":[{"name":"big8x3"},{"name":"usize"}],"output":{"name":"big8x3"}}],[11,"mul_pow5","","Multiplies itself by `5^e` and returns its own mutable reference.",64,{"inputs":[{"name":"big8x3"},{"name":"usize"}],"output":{"name":"big8x3"}}],[11,"mul_digits","","Multiplies itself by a number described by `other[0] + other[1] * 2^W +\nother[2] * 2^(2W) + ...` (where `W` is the number of bits in the digit type)\nand returns its own mutable reference.",64,null],[11,"div_rem_small","","Divides itself by a digit-sized `other` and returns its own\nmutable reference *and* the remainder.",64,null],[11,"div_rem","","Divide self by another bignum, overwriting `q` with the quotient and `r` with the\nremainder.",64,null],[11,"eq","","",64,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",64,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"option"}}],[11,"cmp","","",64,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"ordering"}}],[11,"clone","","",64,{"inputs":[{"name":"big8x3"}],"output":{"name":"big8x3"}}],[11,"fmt","","",64,{"inputs":[{"name":"big8x3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::num::diy_float","",65,{"inputs":[{"name":"fp"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",65,{"inputs":[{"name":"fp"}],"output":{"name":"fp"}}],[11,"mul","","Returns a correctly rounded product of itself and `other`.",65,{"inputs":[{"name":"fp"},{"name":"fp"}],"output":{"name":"fp"}}],[11,"normalize","","Normalizes itself so that the resulting mantissa is at least `2^63`.",65,{"inputs":[{"name":"fp"}],"output":{"name":"fp"}}],[11,"normalize_to","","Normalizes itself to have the shared exponent.\nIt can only decrease the exponent (and thus increase the mantissa).",65,{"inputs":[{"name":"fp"},{"name":"i16"}],"output":{"name":"fp"}}],[11,"fmt","core::num","",66,{"inputs":[{"name":"fpcategory"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",66,{"inputs":[{"name":"fpcategory"},{"name":"fpcategory"}],"output":{"name":"bool"}}],[11,"ne","","",66,{"inputs":[{"name":"fpcategory"},{"name":"fpcategory"}],"output":{"name":"bool"}}],[11,"clone","","",66,{"inputs":[{"name":"fpcategory"}],"output":{"name":"fpcategory"}}],[11,"eq","","",67,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"ne","","",67,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"clone","","",67,{"inputs":[{"name":"parseinterror"}],"output":{"name":"parseinterror"}}],[11,"fmt","","",67,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",68,{"inputs":[{"name":"interrorkind"},{"name":"interrorkind"}],"output":{"name":"bool"}}],[11,"ne","","",68,{"inputs":[{"name":"interrorkind"},{"name":"interrorkind"}],"output":{"name":"bool"}}],[11,"clone","","",68,{"inputs":[{"name":"interrorkind"}],"output":{"name":"interrorkind"}}],[11,"fmt","","",68,{"inputs":[{"name":"interrorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",67,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","core::nonzero","",69,null],[11,"fmt","","",69,{"inputs":[{"name":"nonzero"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",69,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"option"}}],[11,"lt","","",69,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"le","","",69,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"gt","","",69,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"ge","","",69,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"cmp","","",69,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"ordering"}}],[11,"eq","","",69,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"ne","","",69,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"clone","","",69,{"inputs":[{"name":"nonzero"}],"output":{"name":"nonzero"}}],[11,"new","","Creates an instance of NonZero with the provided value.\nYou must indeed ensure that the value is actually \"non-zero\".",69,{"inputs":[{"name":"nonzero"},{"name":"t"}],"output":{"name":"nonzero"}}],[11,"deref","","",69,{"inputs":[{"name":"nonzero"}],"output":{"name":"t"}}],[11,"new","core::ptr","Creates a new `Unique`.",70,null],[11,"get","","Dereferences the content.",70,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"get_mut","","Mutably dereferences the content.",70,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"deref","","",70,null],[11,"fmt","","",70,{"inputs":[{"name":"unique"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `Shared`.",71,null],[11,"clone","","",71,{"inputs":[{"name":"shared"}],"output":{"name":"shared"}}],[11,"deref","","",71,null],[11,"fmt","","",71,{"inputs":[{"name":"shared"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","core::marker","",72,null],[11,"eq","","",72,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",72,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"option"}}],[11,"cmp","","",72,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"ordering"}}],[11,"clone","","",72,{"inputs":[{"name":"phantomdata"}],"output":{"name":"phantomdata"}}],[11,"default","","",72,{"inputs":[{"name":"phantomdata"}],"output":{"name":"phantomdata"}}],[11,"eq","core::ops","",73,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"ne","","",73,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"clone","","",73,{"inputs":[{"name":"rangefull"}],"output":{"name":"rangefull"}}],[11,"fmt","","",73,{"inputs":[{"name":"rangefull"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",74,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"ne","","",74,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"clone","","",74,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"fmt","","",74,{"inputs":[{"name":"range"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",75,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"ne","","",75,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"clone","","",75,{"inputs":[{"name":"rangefrom"}],"output":{"name":"rangefrom"}}],[11,"fmt","","",75,{"inputs":[{"name":"rangefrom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",76,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"ne","","",76,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"clone","","",76,{"inputs":[{"name":"rangeto"}],"output":{"name":"rangeto"}}],[11,"fmt","","",76,{"inputs":[{"name":"rangeto"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::cmp","",77,{"inputs":[{"name":"ordering"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",77,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"ne","","",77,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"clone","","",77,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"reverse","","Reverse the `Ordering`.",77,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"cmp","","",77,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",77,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"option"}}],[11,"fmt","libc","",78,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",78,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is","","Returns true if the boxed type is the same as `T`",78,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",78,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",78,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",78,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",78,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",78,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"hash","core::any","",79,null],[11,"fmt","","",79,{"inputs":[{"name":"typeid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",79,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"ne","","",79,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"clone","","",79,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",79,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[11,"default","core::sync::atomic","",80,{"inputs":[{"name":"atomicbool"}],"output":{"name":"atomicbool"}}],[11,"default","","",81,{"inputs":[{"name":"atomicisize"}],"output":{"name":"atomicisize"}}],[11,"default","","",82,{"inputs":[{"name":"atomicusize"}],"output":{"name":"atomicusize"}}],[11,"default","","",83,{"inputs":[{"name":"atomicptr"}],"output":{"name":"atomicptr"}}],[11,"clone","","",84,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"new","","Creates a new `AtomicBool`.",80,{"inputs":[{"name":"atomicbool"},{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"load","","Loads a value from the bool.",80,{"inputs":[{"name":"atomicbool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"store","","Stores a value into the bool.",80,null],[11,"swap","","Stores a value into the bool, returning the old value.",80,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_and_swap","","Stores a value into the `bool` if the current value is the same as the `current` value.",80,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_and","","Logical \"and\" with a boolean value.",80,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_nand","","Logical \"nand\" with a boolean value.",80,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_or","","Logical \"or\" with a boolean value.",80,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_xor","","Logical \"xor\" with a boolean value.",80,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `AtomicIsize`.",81,{"inputs":[{"name":"atomicisize"},{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"load","","Loads a value from the isize.",81,{"inputs":[{"name":"atomicisize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"store","","Stores a value into the isize.",81,null],[11,"swap","","Stores a value into the isize, returning the old value.",81,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_and_swap","","Stores a value into the `isize` if the current value is the same as the `current` value.",81,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_add","","Add an isize to the current value, returning the previous value.",81,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_sub","","Subtract an isize from the current value, returning the previous value.",81,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_and","","Bitwise and with the current isize, returning the previous value.",81,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_or","","Bitwise or with the current isize, returning the previous value.",81,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_xor","","Bitwise xor with the current isize, returning the previous value.",81,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"new","","Creates a new `AtomicUsize`.",82,{"inputs":[{"name":"atomicusize"},{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"load","","Loads a value from the usize.",82,{"inputs":[{"name":"atomicusize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"store","","Stores a value into the usize.",82,null],[11,"swap","","Stores a value into the usize, returning the old value.",82,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_and_swap","","Stores a value into the `usize` if the current value is the same as the `current` value.",82,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_add","","Add to the current usize, returning the previous value.",82,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_sub","","Subtract from the current usize, returning the previous value.",82,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_and","","Bitwise and with the current usize, returning the previous value.",82,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_or","","Bitwise or with the current usize, returning the previous value.",82,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_xor","","Bitwise xor with the current usize, returning the previous value.",82,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"new","","Creates a new `AtomicPtr`.",83,null],[11,"load","","Loads a value from the pointer.",83,null],[11,"store","","Stores a value into the pointer.",83,null],[11,"swap","","Stores a value into the pointer, returning the old value.",83,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",83,null],[11,"fmt","","",82,{"inputs":[{"name":"atomicusize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",81,{"inputs":[{"name":"atomicisize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",80,{"inputs":[{"name":"atomicbool"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",83,{"inputs":[{"name":"atomicptr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","core::cell","Creates a new `Cell` containing the given value.",85,{"inputs":[{"name":"cell"},{"name":"t"}],"output":{"name":"cell"}}],[11,"get","","Returns a copy of the contained value.",85,{"inputs":[{"name":"cell"}],"output":{"name":"t"}}],[11,"set","","Sets the contained value.",85,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",85,{"inputs":[{"name":"cell"}],"output":{"name":"unsafecell"}}],[11,"clone","","",85,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"default","","",85,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"eq","","",85,{"inputs":[{"name":"cell"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"fmt","","",86,{"inputs":[{"name":"borrowstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",86,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"ne","","",86,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"clone","","",86,{"inputs":[{"name":"borrowstate"}],"output":{"name":"borrowstate"}}],[11,"new","","Creates a new `RefCell` containing `value`.",87,{"inputs":[{"name":"refcell"},{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",87,{"inputs":[{"name":"refcell"}],"output":{"name":"t"}}],[11,"borrow_state","","Query the current state of this `RefCell`",87,{"inputs":[{"name":"refcell"}],"output":{"name":"borrowstate"}}],[11,"borrow","","Immutably borrows the wrapped value.",87,{"inputs":[{"name":"refcell"}],"output":{"name":"ref"}}],[11,"borrow_mut","","Mutably borrows the wrapped value.",87,{"inputs":[{"name":"refcell"}],"output":{"name":"refmut"}}],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",87,{"inputs":[{"name":"refcell"}],"output":{"name":"unsafecell"}}],[11,"clone","","",87,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"default","","",87,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"eq","","",87,{"inputs":[{"name":"refcell"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"drop","","",88,null],[11,"clone","","",88,{"inputs":[{"name":"borrowref"}],"output":{"name":"borrowref"}}],[11,"deref","","",89,{"inputs":[{"name":"ref"}],"output":{"name":"t"}}],[11,"clone","","Copies a `Ref`.",89,{"inputs":[{"name":"ref"},{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",89,{"inputs":[{"name":"ref"},{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"filter_map","","Make a new `Ref` for an optional component of the borrowed data, e.g. an\nenum variant.",89,{"inputs":[{"name":"ref"},{"name":"ref"},{"name":"f"}],"output":{"name":"option"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum\nvariant.",90,{"inputs":[{"name":"refmut"},{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"filter_map","","Make a new `RefMut` for an optional component of the borrowed data, e.g.\nan enum variant.",90,{"inputs":[{"name":"refmut"},{"name":"refmut"},{"name":"f"}],"output":{"name":"option"}}],[11,"drop","","",91,null],[11,"deref","","",90,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"deref_mut","","",90,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified\nvalue.",92,{"inputs":[{"name":"unsafecell"},{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",92,{"inputs":[{"name":"unsafecell"}],"output":{"name":"t"}}],[11,"get","","Gets a mutable pointer to the wrapped value.",92,null],[11,"clone","core::char","",93,{"inputs":[{"name":"escapeunicode"}],"output":{"name":"escapeunicode"}}],[11,"clone","","",94,{"inputs":[{"name":"escapeunicodestate"}],"output":{"name":"escapeunicodestate"}}],[11,"next","","",93,{"inputs":[{"name":"escapeunicode"}],"output":{"name":"option"}}],[11,"size_hint","","",93,null],[11,"clone","","",95,{"inputs":[{"name":"escapedefault"}],"output":{"name":"escapedefault"}}],[11,"clone","","",96,{"inputs":[{"name":"escapedefaultstate"}],"output":{"name":"escapedefaultstate"}}],[11,"next","","",95,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"size_hint","","",95,null],[11,"clone","core::iter","",97,{"inputs":[{"name":"rev"}],"output":{"name":"rev"}}],[11,"next","","",97,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"size_hint","","",97,null],[11,"next_back","","",97,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"clone","","",98,{"inputs":[{"name":"cloned"}],"output":{"name":"cloned"}}],[11,"next","","",98,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"size_hint","","",98,null],[11,"next_back","","",98,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"clone","","",99,{"inputs":[{"name":"cycle"}],"output":{"name":"cycle"}}],[11,"next","","",99,{"inputs":[{"name":"cycle"}],"output":{"name":"option"}}],[11,"size_hint","","",99,null],[11,"clone","","",100,{"inputs":[{"name":"chain"}],"output":{"name":"chain"}}],[11,"clone","","",101,{"inputs":[{"name":"chainstate"}],"output":{"name":"chainstate"}}],[11,"next","","",100,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"count","","",100,{"inputs":[{"name":"chain"}],"output":{"name":"usize"}}],[11,"nth","","",100,{"inputs":[{"name":"chain"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",100,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"size_hint","","",100,null],[11,"next_back","","",100,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"clone","","",102,{"inputs":[{"name":"zip"}],"output":{"name":"zip"}}],[11,"next","","",102,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",102,null],[11,"next_back","","",102,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"clone","","",103,{"inputs":[{"name":"map"}],"output":{"name":"map"}}],[11,"next","","",103,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"size_hint","","",103,null],[11,"next_back","","",103,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"clone","","",104,{"inputs":[{"name":"filter"}],"output":{"name":"filter"}}],[11,"next","","",104,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"size_hint","","",104,null],[11,"next_back","","",104,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"clone","","",105,{"inputs":[{"name":"filtermap"}],"output":{"name":"filtermap"}}],[11,"next","","",105,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"size_hint","","",105,null],[11,"next_back","","",105,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"clone","","",106,{"inputs":[{"name":"enumerate"}],"output":{"name":"enumerate"}}],[11,"next","","# Overflow Behavior",106,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"size_hint","","",106,null],[11,"nth","","",106,{"inputs":[{"name":"enumerate"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",106,{"inputs":[{"name":"enumerate"}],"output":{"name":"usize"}}],[11,"next_back","","",106,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"clone","","",107,{"inputs":[{"name":"peekable"}],"output":{"name":"peekable"}}],[11,"next","","",107,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"count","","",107,{"inputs":[{"name":"peekable"}],"output":{"name":"usize"}}],[11,"nth","","",107,{"inputs":[{"name":"peekable"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",107,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"size_hint","","",107,null],[11,"peek","","Returns a reference to the next() value without advancing the iterator.",107,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"is_empty","","Checks if the iterator has finished iterating.",107,{"inputs":[{"name":"peekable"}],"output":{"name":"bool"}}],[11,"clone","","",108,{"inputs":[{"name":"skipwhile"}],"output":{"name":"skipwhile"}}],[11,"next","","",108,{"inputs":[{"name":"skipwhile"}],"output":{"name":"option"}}],[11,"size_hint","","",108,null],[11,"clone","","",109,{"inputs":[{"name":"takewhile"}],"output":{"name":"takewhile"}}],[11,"next","","",109,{"inputs":[{"name":"takewhile"}],"output":{"name":"option"}}],[11,"size_hint","","",109,null],[11,"clone","","",110,{"inputs":[{"name":"skip"}],"output":{"name":"skip"}}],[11,"next","","",110,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"nth","","",110,{"inputs":[{"name":"skip"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",110,{"inputs":[{"name":"skip"}],"output":{"name":"usize"}}],[11,"last","","",110,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"size_hint","","",110,null],[11,"clone","","",111,{"inputs":[{"name":"take"}],"output":{"name":"take"}}],[11,"next","","",111,{"inputs":[{"name":"take"}],"output":{"name":"option"}}],[11,"nth","","",111,{"inputs":[{"name":"take"},{"name":"usize"}],"output":{"name":"option"}}],[11,"size_hint","","",111,null],[11,"clone","","",112,{"inputs":[{"name":"scan"}],"output":{"name":"scan"}}],[11,"next","","",112,{"inputs":[{"name":"scan"}],"output":{"name":"option"}}],[11,"size_hint","","",112,null],[11,"clone","","",113,{"inputs":[{"name":"flatmap"}],"output":{"name":"flatmap"}}],[11,"next","","",113,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"size_hint","","",113,null],[11,"next_back","","",113,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"clone","","",114,{"inputs":[{"name":"fuse"}],"output":{"name":"fuse"}}],[11,"next","","",114,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"nth","","",114,{"inputs":[{"name":"fuse"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",114,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"count","","",114,{"inputs":[{"name":"fuse"}],"output":{"name":"usize"}}],[11,"size_hint","","",114,null],[11,"next_back","","",114,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"clone","","",115,{"inputs":[{"name":"inspect"}],"output":{"name":"inspect"}}],[11,"next","","",115,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"size_hint","","",115,null],[11,"next_back","","",115,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"clone","","",116,{"inputs":[{"name":"stepby"}],"output":{"name":"stepby"}}],[11,"step_by","core::ops","Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.",75,{"inputs":[{"name":"rangefrom"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",74,{"inputs":[{"name":"range"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"next","core::iter","",116,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",116,null],[11,"clone","","",117,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"rangeinclusive"}}],[11,"next","","",117,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"size_hint","","",117,null],[11,"next_back","","",117,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"next","","",116,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",116,null],[11,"next","core::ops","",74,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"size_hint","","",74,null],[11,"next_back","","",74,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next","","",75,{"inputs":[{"name":"rangefrom"}],"output":{"name":"option"}}],[11,"clone","core::iter","",118,{"inputs":[{"name":"repeat"}],"output":{"name":"repeat"}}],[11,"next","","",118,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"size_hint","","",118,null],[11,"next_back","","",118,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"next","","",119,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"size_hint","","",119,null],[11,"next_back","","",119,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"len","","",119,{"inputs":[{"name":"empty"}],"output":{"name":"usize"}}],[11,"clone","","",119,{"inputs":[{"name":"empty"}],"output":{"name":"empty"}}],[11,"default","","",119,{"inputs":[{"name":"empty"}],"output":{"name":"empty"}}],[11,"clone","","",120,{"inputs":[{"name":"once"}],"output":{"name":"once"}}],[11,"next","","",120,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"size_hint","","",120,null],[11,"next_back","","",120,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"len","","",120,{"inputs":[{"name":"once"}],"output":{"name":"usize"}}],[11,"hash","core::option","",50,null],[11,"fmt","","",50,{"inputs":[{"name":"option"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",50,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",50,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"lt","","",50,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"le","","",50,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"gt","","",50,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ge","","",50,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"eq","","",50,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ne","","",50,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"clone","","",50,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"default","","",50,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",50,{"inputs":[{"name":"option"}],"output":{"name":"intoiter"}}],[11,"clone","","",121,{"inputs":[{"name":"item"}],"output":{"name":"item"}}],[11,"next","","",121,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"size_hint","","",121,null],[11,"next_back","","",121,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"next","","",122,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",122,null],[11,"next_back","","",122,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",122,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",123,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",123,null],[11,"next_back","","",123,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",124,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"next","","",124,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",124,null],[11,"next_back","","",124,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",50,{"inputs":[{"name":"option"},{"name":"i"}],"output":{"name":"option"}}],[11,"clone","core::raw","",125,{"inputs":[{"name":"slice"}],"output":{"name":"slice"}}],[11,"clone","","",126,{"inputs":[{"name":"traitobject"}],"output":{"name":"traitobject"}}],[11,"hash","core::result","",127,null],[11,"fmt","","",127,{"inputs":[{"name":"result"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",127,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",127,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"option"}}],[11,"lt","","",127,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"le","","",127,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"gt","","",127,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ge","","",127,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"eq","","",127,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ne","","",127,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"clone","","",127,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"is_ok","","Returns true if the result is `Ok`",127,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"is_err","","Returns true if the result is `Err`",127,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"ok","","Converts from `Result<T, E>` to `Option<T>`",127,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"err","","Converts from `Result<T, E>` to `Option<E>`",127,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"as_ref","","Converts from `Result<T, E>` to `Result<&T, &E>`",127,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"as_mut","","Converts from `Result<T, E>` to `Result<&mut T, &mut E>`",127,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"as_slice","","Converts from `Result<T, E>` to `&[T]` (without copying)",127,null],[11,"as_mut_slice","","Converts from `Result<T, E>` to `&mut [T]` (without copying)",127,null],[11,"map","","Maps a `Result<T, E>` to `Result<U, E>` by applying a function to a\ncontained `Ok` value, leaving an `Err` value untouched.",127,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"map_err","","Maps a `Result<T, E>` to `Result<T, F>` by applying a function to a\ncontained `Err` value, leaving an `Ok` value untouched.",127,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",127,{"inputs":[{"name":"result"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",127,{"inputs":[{"name":"result"}],"output":{"name":"itermut"}}],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",127,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",127,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",127,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",127,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",127,{"inputs":[{"name":"result"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",127,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"t"}}],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",127,{"inputs":[{"name":"result"}],"output":{"name":"t"}}],[11,"expect","","Unwraps a result, yielding the content of an `Ok`.",127,{"inputs":[{"name":"result"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",127,{"inputs":[{"name":"result"}],"output":{"name":"e"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",127,{"inputs":[{"name":"result"}],"output":{"name":"intoiter"}}],[11,"next","","",128,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",128,null],[11,"next_back","","",128,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",128,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",129,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",129,null],[11,"next_back","","",129,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",130,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",130,null],[11,"next_back","","",130,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",127,{"inputs":[{"name":"result"},{"name":"i"}],"output":{"name":"result"}}],[11,"fmt","core::simd","",131,{"inputs":[{"name":"i8x16"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",131,{"inputs":[{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"fmt","","",132,{"inputs":[{"name":"i16x8"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",132,{"inputs":[{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"fmt","","",133,{"inputs":[{"name":"i32x4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",133,{"inputs":[{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"fmt","","",134,{"inputs":[{"name":"i64x2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",134,{"inputs":[{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"fmt","","",135,{"inputs":[{"name":"u8x16"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",135,{"inputs":[{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"fmt","","",136,{"inputs":[{"name":"u16x8"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",136,{"inputs":[{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"fmt","","",137,{"inputs":[{"name":"u32x4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",137,{"inputs":[{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"fmt","","",138,{"inputs":[{"name":"u64x2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",138,{"inputs":[{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"fmt","","",139,{"inputs":[{"name":"f32x4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",139,{"inputs":[{"name":"f32x4"}],"output":{"name":"f32x4"}}],[11,"fmt","","",140,{"inputs":[{"name":"f64x2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",140,{"inputs":[{"name":"f64x2"}],"output":{"name":"f64x2"}}],[11,"add","","",135,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"add","","",136,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"add","","",137,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"add","","",138,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"add","","",131,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"add","","",132,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"add","","",133,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"add","","",134,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"add","","",139,{"inputs":[{"name":"f32x4"},{"name":"f32x4"}],"output":{"name":"f32x4"}}],[11,"add","","",140,{"inputs":[{"name":"f64x2"},{"name":"f64x2"}],"output":{"name":"f64x2"}}],[11,"sub","","",135,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"sub","","",136,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"sub","","",137,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"sub","","",138,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"sub","","",131,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"sub","","",132,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"sub","","",133,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"sub","","",134,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"sub","","",139,{"inputs":[{"name":"f32x4"},{"name":"f32x4"}],"output":{"name":"f32x4"}}],[11,"sub","","",140,{"inputs":[{"name":"f64x2"},{"name":"f64x2"}],"output":{"name":"f64x2"}}],[11,"mul","","",135,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"mul","","",136,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"mul","","",137,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"mul","","",138,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"mul","","",131,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"mul","","",132,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"mul","","",133,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"mul","","",134,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"mul","","",139,{"inputs":[{"name":"f32x4"},{"name":"f32x4"}],"output":{"name":"f32x4"}}],[11,"mul","","",140,{"inputs":[{"name":"f64x2"},{"name":"f64x2"}],"output":{"name":"f64x2"}}],[11,"div","","",139,{"inputs":[{"name":"f32x4"},{"name":"f32x4"}],"output":{"name":"f32x4"}}],[11,"div","","",140,{"inputs":[{"name":"f64x2"},{"name":"f64x2"}],"output":{"name":"f64x2"}}],[11,"shl","","",135,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"shl","","",136,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"shl","","",137,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"shl","","",138,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"shl","","",131,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"shl","","",132,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"shl","","",133,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"shl","","",134,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"shr","","",135,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"shr","","",136,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"shr","","",137,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"shr","","",138,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"shr","","",131,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"shr","","",132,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"shr","","",133,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"shr","","",134,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"bitand","","",135,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"bitand","","",136,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"bitand","","",137,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"bitand","","",138,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"bitand","","",131,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"bitand","","",132,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"bitand","","",133,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"bitand","","",134,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"bitor","","",135,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"bitor","","",136,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"bitor","","",137,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"bitor","","",138,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"bitor","","",131,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"bitor","","",132,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"bitor","","",133,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"bitor","","",134,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"bitxor","","",135,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"bitxor","","",136,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"bitxor","","",137,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"bitxor","","",138,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"bitxor","","",131,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"bitxor","","",132,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"bitxor","","",133,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"bitxor","","",134,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"as_slice","core::slice","View the underlying data as a subslice of the original data.",141,null],[11,"next","","",141,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",141,null],[11,"count","","",141,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"nth","","",141,{"inputs":[{"name":"iter"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",141,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next_back","","",141,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",141,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"into_slice","","View the underlying data as a subslice of the original data.",142,null],[11,"next","","",142,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",142,null],[11,"count","","",142,{"inputs":[{"name":"itermut"}],"output":{"name":"usize"}}],[11,"nth","","",142,{"inputs":[{"name":"itermut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",142,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next_back","","",142,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",143,{"inputs":[{"name":"split"}],"output":{"name":"split"}}],[11,"next","","",143,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"size_hint","","",143,null],[11,"next_back","","",143,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"finish","","",143,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"finish","","",144,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"next","","",144,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"size_hint","","",144,null],[11,"next_back","","",144,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"next","","",145,{"inputs":[{"name":"genericsplitn"}],"output":{"name":"option"}}],[11,"size_hint","","",145,null],[11,"next","","",146,{"inputs":[{"name":"splitn"}],"output":{"name":"option"}}],[11,"size_hint","","",146,null],[11,"next","","",147,{"inputs":[{"name":"rsplitn"}],"output":{"name":"option"}}],[11,"size_hint","","",147,null],[11,"next","","",148,{"inputs":[{"name":"splitnmut"}],"output":{"name":"option"}}],[11,"size_hint","","",148,null],[11,"next","","",149,{"inputs":[{"name":"rsplitnmut"}],"output":{"name":"option"}}],[11,"size_hint","","",149,null],[11,"clone","","",150,{"inputs":[{"name":"windows"}],"output":{"name":"windows"}}],[11,"next","","",150,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"size_hint","","",150,null],[11,"count","","",150,{"inputs":[{"name":"windows"}],"output":{"name":"usize"}}],[11,"nth","","",150,{"inputs":[{"name":"windows"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",150,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"next_back","","",150,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"clone","","",151,{"inputs":[{"name":"chunks"}],"output":{"name":"chunks"}}],[11,"next","","",151,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"size_hint","","",151,null],[11,"count","","",151,{"inputs":[{"name":"chunks"}],"output":{"name":"usize"}}],[11,"nth","","",151,{"inputs":[{"name":"chunks"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",151,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"next_back","","",151,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"next","","",152,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"size_hint","","",152,null],[11,"count","","",152,{"inputs":[{"name":"chunksmut"}],"output":{"name":"usize"}}],[11,"nth","","",152,{"inputs":[{"name":"chunksmut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",152,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"next_back","","",152,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"fmt","core::str::pattern","",153,{"inputs":[{"name":"searchstep"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",153,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"ne","","",153,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"clone","","",153,{"inputs":[{"name":"searchstep"}],"output":{"name":"searchstep"}}],[11,"clone","","",154,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"chareqsearcher"}}],[11,"into_searcher","","",155,{"inputs":[{"name":"chareqpattern"},{"name":"str"}],"output":{"name":"chareqsearcher"}}],[11,"haystack","","",154,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"str"}}],[11,"next","","",154,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"next_back","","",154,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"clone","","",156,{"inputs":[{"name":"charsearcher"}],"output":{"name":"charsearcher"}}],[11,"haystack","","",156,{"inputs":[{"name":"charsearcher"}],"output":{"name":"str"}}],[11,"next","","",156,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",156,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",156,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",156,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",156,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",156,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"clone","","",157,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"charslicesearcher"}}],[11,"haystack","","",157,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"str"}}],[11,"next","","",157,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",157,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",157,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",157,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",157,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",157,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"clone","","",158,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"charpredicatesearcher"}}],[11,"haystack","","",158,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"str"}}],[11,"next","","",158,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",158,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",158,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",158,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",158,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",158,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"fmt","","",159,{"inputs":[{"name":"strsearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",159,{"inputs":[{"name":"strsearcher"}],"output":{"name":"strsearcher"}}],[11,"fmt","","",160,{"inputs":[{"name":"strsearcherimpl"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",160,{"inputs":[{"name":"strsearcherimpl"}],"output":{"name":"strsearcherimpl"}}],[11,"fmt","","",161,{"inputs":[{"name":"emptyneedle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",161,{"inputs":[{"name":"emptyneedle"}],"output":{"name":"emptyneedle"}}],[11,"haystack","","",159,{"inputs":[{"name":"strsearcher"}],"output":{"name":"str"}}],[11,"next","","",159,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",159,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",159,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",159,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"fmt","","",162,{"inputs":[{"name":"twowaysearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",162,{"inputs":[{"name":"twowaysearcher"}],"output":{"name":"twowaysearcher"}}],[11,"use_early_reject","","",163,{"inputs":[{"name":"matchonly"}],"output":{"name":"bool"}}],[11,"rejecting","","",163,null],[11,"matching","","",163,null],[11,"use_early_reject","","",164,{"inputs":[{"name":"rejectandmatch"}],"output":{"name":"bool"}}],[11,"rejecting","","",164,null],[11,"matching","","",164,null],[11,"eq","core::str","",165,{"inputs":[{"name":"parseboolerror"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"ne","","",165,{"inputs":[{"name":"parseboolerror"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"clone","","",165,{"inputs":[{"name":"parseboolerror"}],"output":{"name":"parseboolerror"}}],[11,"fmt","","",165,{"inputs":[{"name":"parseboolerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",165,{"inputs":[{"name":"parseboolerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",166,{"inputs":[{"name":"utf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",166,{"inputs":[{"name":"utf8error"}],"output":{"name":"utf8error"}}],[11,"eq","","",166,{"inputs":[{"name":"utf8error"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"ne","","",166,{"inputs":[{"name":"utf8error"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"valid_up_to","","Returns the index in the given string up to which valid UTF-8 was\nverified.",166,{"inputs":[{"name":"utf8error"}],"output":{"name":"usize"}}],[11,"fmt","","",166,{"inputs":[{"name":"utf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",167,{"inputs":[{"name":"chars"}],"output":{"name":"chars"}}],[11,"next","","",167,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"size_hint","","",167,null],[11,"next_back","","",167,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",167,{"inputs":[{"name":"chars"}],"output":{"name":"str"}}],[11,"clone","","",168,{"inputs":[{"name":"charindices"}],"output":{"name":"charindices"}}],[11,"next","","",168,{"inputs":[{"name":"charindices"}],"output":{"name":"option"}}],[11,"size_hint","","",168,null],[11,"next_back","","",168,{"inputs":[{"name":"charindices"}],"output":{"name":"option"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",168,{"inputs":[{"name":"charindices"}],"output":{"name":"str"}}],[11,"clone","","",169,{"inputs":[{"name":"bytes"}],"output":{"name":"bytes"}}],[11,"next","","",169,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"size_hint","","",169,null],[11,"count","","",169,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"last","","",169,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"nth","","",169,{"inputs":[{"name":"bytes"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next_back","","",169,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"len","","",169,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"clone","","",170,{"inputs":[{"name":"splitinternal"}],"output":{"name":"splitinternal"}}],[11,"next","","",171,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"clone","","",171,{"inputs":[{"name":"split"}],"output":{"name":"split"}}],[11,"next","","",172,{"inputs":[{"name":"rsplit"}],"output":{"name":"option"}}],[11,"clone","","",172,{"inputs":[{"name":"rsplit"}],"output":{"name":"rsplit"}}],[11,"next_back","","",171,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"next_back","","",172,{"inputs":[{"name":"rsplit"}],"output":{"name":"option"}}],[11,"next","","",173,{"inputs":[{"name":"splitterminator"}],"output":{"name":"option"}}],[11,"clone","","",173,{"inputs":[{"name":"splitterminator"}],"output":{"name":"splitterminator"}}],[11,"next","","",174,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"option"}}],[11,"clone","","",174,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"rsplitterminator"}}],[11,"next_back","","",173,{"inputs":[{"name":"splitterminator"}],"output":{"name":"option"}}],[11,"next_back","","",174,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"option"}}],[11,"clone","","",175,{"inputs":[{"name":"splitninternal"}],"output":{"name":"splitninternal"}}],[11,"next","","",176,{"inputs":[{"name":"splitn"}],"output":{"name":"option"}}],[11,"clone","","",176,{"inputs":[{"name":"splitn"}],"output":{"name":"splitn"}}],[11,"next","","",177,{"inputs":[{"name":"rsplitn"}],"output":{"name":"option"}}],[11,"clone","","",177,{"inputs":[{"name":"rsplitn"}],"output":{"name":"rsplitn"}}],[11,"clone","","",178,{"inputs":[{"name":"matchindicesinternal"}],"output":{"name":"matchindicesinternal"}}],[11,"next","","",179,{"inputs":[{"name":"matchindices"}],"output":{"name":"option"}}],[11,"clone","","",179,{"inputs":[{"name":"matchindices"}],"output":{"name":"matchindices"}}],[11,"next","","",180,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"option"}}],[11,"clone","","",180,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"rmatchindices"}}],[11,"next_back","","",179,{"inputs":[{"name":"matchindices"}],"output":{"name":"option"}}],[11,"next_back","","",180,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"option"}}],[11,"clone","","",181,{"inputs":[{"name":"matchesinternal"}],"output":{"name":"matchesinternal"}}],[11,"next","","",182,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"clone","","",182,{"inputs":[{"name":"matches"}],"output":{"name":"matches"}}],[11,"next","","",183,{"inputs":[{"name":"rmatches"}],"output":{"name":"option"}}],[11,"clone","","",183,{"inputs":[{"name":"rmatches"}],"output":{"name":"rmatches"}}],[11,"next_back","","",182,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"next_back","","",183,{"inputs":[{"name":"rmatches"}],"output":{"name":"option"}}],[11,"clone","","",184,{"inputs":[{"name":"lines"}],"output":{"name":"lines"}}],[11,"next","","",184,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"size_hint","","",184,null],[11,"next_back","","",184,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"clone","","",185,{"inputs":[{"name":"linesany"}],"output":{"name":"linesany"}}],[11,"clone","","",186,{"inputs":[{"name":"linesanymap"}],"output":{"name":"linesanymap"}}],[11,"call","","",186,null],[11,"call_mut","","",186,null],[11,"call_once","","",186,null],[11,"next","","",185,{"inputs":[{"name":"linesany"}],"output":{"name":"option"}}],[11,"size_hint","","",185,null],[11,"next_back","","",185,{"inputs":[{"name":"linesany"}],"output":{"name":"option"}}],[11,"clone","","",187,{"inputs":[{"name":"charrange"}],"output":{"name":"charrange"}}],[11,"new","core::hash::sip","Creates a new `SipHasher` with the two initial keys set to 0.",188,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",188,{"inputs":[{"name":"siphasher"},{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"write","","",188,null],[11,"finish","","",188,{"inputs":[{"name":"siphasher"}],"output":{"name":"u64"}}],[11,"clone","","",188,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"default","","",188,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"eq","core::fmt::num","",189,{"inputs":[{"name":"binary"},{"name":"binary"}],"output":{"name":"bool"}}],[11,"ne","","",189,{"inputs":[{"name":"binary"},{"name":"binary"}],"output":{"name":"bool"}}],[11,"clone","","",189,{"inputs":[{"name":"binary"}],"output":{"name":"binary"}}],[11,"eq","","",190,{"inputs":[{"name":"octal"},{"name":"octal"}],"output":{"name":"bool"}}],[11,"ne","","",190,{"inputs":[{"name":"octal"},{"name":"octal"}],"output":{"name":"bool"}}],[11,"clone","","",190,{"inputs":[{"name":"octal"}],"output":{"name":"octal"}}],[11,"eq","","",191,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"ne","","",191,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"clone","","",191,{"inputs":[{"name":"decimal"}],"output":{"name":"decimal"}}],[11,"eq","","",192,{"inputs":[{"name":"lowerhex"},{"name":"lowerhex"}],"output":{"name":"bool"}}],[11,"ne","","",192,{"inputs":[{"name":"lowerhex"},{"name":"lowerhex"}],"output":{"name":"bool"}}],[11,"clone","","",192,{"inputs":[{"name":"lowerhex"}],"output":{"name":"lowerhex"}}],[11,"eq","","",193,{"inputs":[{"name":"upperhex"},{"name":"upperhex"}],"output":{"name":"bool"}}],[11,"ne","","",193,{"inputs":[{"name":"upperhex"},{"name":"upperhex"}],"output":{"name":"bool"}}],[11,"clone","","",193,{"inputs":[{"name":"upperhex"}],"output":{"name":"upperhex"}}],[11,"eq","","",194,{"inputs":[{"name":"radix"},{"name":"radix"}],"output":{"name":"bool"}}],[11,"ne","","",194,{"inputs":[{"name":"radix"},{"name":"radix"}],"output":{"name":"bool"}}],[11,"clone","","",194,{"inputs":[{"name":"radix"}],"output":{"name":"radix"}}],[11,"clone","","",195,{"inputs":[{"name":"radixfmt"}],"output":{"name":"radixfmt"}}],[11,"fmt","","",195,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",195,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",195,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",195,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",195,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",195,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",195,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",195,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",195,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",195,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",195,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",195,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",195,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",195,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",195,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",195,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",195,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",195,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",195,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",195,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write_str","core::fmt::builders","",196,{"inputs":[{"name":"padadapter"},{"name":"str"}],"output":{"name":"result"}}],[11,"field","","Adds a new field to the generated struct output.",197,{"inputs":[{"name":"debugstruct"},{"name":"str"},{"name":"debug"}],"output":{"name":"debugstruct"}}],[11,"finish","","Finishes output and returns any error encountered.",197,{"inputs":[{"name":"debugstruct"}],"output":{"name":"result"}}],[11,"field","","Adds a new field to the generated tuple struct output.",198,{"inputs":[{"name":"debugtuple"},{"name":"debug"}],"output":{"name":"debugtuple"}}],[11,"finish","","Finishes output and returns any error encountered.",198,{"inputs":[{"name":"debugtuple"}],"output":{"name":"result"}}],[11,"formatter","","Returns the wrapped `Formatter`.",198,{"inputs":[{"name":"debugtuple"}],"output":{"name":"formatter"}}],[11,"finish","","",199,null],[11,"entry","","Adds a new entry to the set output.",200,{"inputs":[{"name":"debugset"},{"name":"debug"}],"output":{"name":"debugset"}}],[11,"entries","","Adds the contents of an iterator of entries to the set output.",200,{"inputs":[{"name":"debugset"},{"name":"i"}],"output":{"name":"debugset"}}],[11,"finish","","Finishes output and returns any error encountered.",200,{"inputs":[{"name":"debugset"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the list output.",201,{"inputs":[{"name":"debuglist"},{"name":"debug"}],"output":{"name":"debuglist"}}],[11,"entries","","Adds the contents of an iterator of entries to the list output.",201,{"inputs":[{"name":"debuglist"},{"name":"i"}],"output":{"name":"debuglist"}}],[11,"finish","","Finishes output and returns any error encountered.",201,{"inputs":[{"name":"debuglist"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the map output.",202,{"inputs":[{"name":"debugmap"},{"name":"debug"},{"name":"debug"}],"output":{"name":"debugmap"}}],[11,"entries","","Adds the contents of an iterator of entries to the map output.",202,{"inputs":[{"name":"debugmap"},{"name":"i"}],"output":{"name":"debugmap"}}],[11,"finish","","Finishes output and returns any error encountered.",202,{"inputs":[{"name":"debugmap"}],"output":{"name":"result"}}],[11,"clone","core::fmt::rt::v1","",203,{"inputs":[{"name":"argument"}],"output":{"name":"argument"}}],[11,"clone","","",204,{"inputs":[{"name":"formatspec"}],"output":{"name":"formatspec"}}],[11,"eq","","",205,{"inputs":[{"name":"alignment"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"ne","","",205,{"inputs":[{"name":"alignment"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"clone","","",205,{"inputs":[{"name":"alignment"}],"output":{"name":"alignment"}}],[11,"clone","","",206,{"inputs":[{"name":"count"}],"output":{"name":"count"}}],[11,"clone","","",207,{"inputs":[{"name":"position"}],"output":{"name":"position"}}],[11,"fmt","core::fmt","",208,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",208,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"clone","","",209,{"inputs":[{"name":"argumentv1"}],"output":{"name":"argumentv1"}}],[11,"clone","","",210,{"inputs":[{"name":"flagv1"}],"output":{"name":"flagv1"}}],[11,"clone","","",211,{"inputs":[{"name":"arguments"}],"output":{"name":"arguments"}}],[11,"fmt","","",211,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",211,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"pad_integral","","Performs the correct padding for an integer which has already been\nemitted into a str. The str should *not* contain the sign for the\ninteger, that will be added by this method.",212,{"inputs":[{"name":"formatter"},{"name":"bool"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",212,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_str","","Writes some data to the underlying buffer contained within this\nformatter.",212,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_fmt","","Writes some formatted information into this instance",212,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"flags","","Flags for formatting (packed version of rt::Flag)",212,{"inputs":[{"name":"formatter"}],"output":{"name":"u32"}}],[11,"fill","","Character used as 'fill' whenever there is alignment",212,{"inputs":[{"name":"formatter"}],"output":{"name":"char"}}],[11,"align","","Flag indicating what form of alignment was requested",212,{"inputs":[{"name":"formatter"}],"output":{"name":"alignment"}}],[11,"width","","Optionally specified integer width that the output should be",212,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"precision","","Optionally specified precision for numeric types",212,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"sign_plus","","Determines if the `+` flag was specified.",212,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"sign_minus","","Determines if the `-` flag was specified.",212,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"alternate","","Determines if the `#` flag was specified.",212,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",212,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"debug_struct","","Creates a `DebugStruct` builder designed to assist with creation of\n`fmt::Debug` implementations for structs.",212,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugstruct"}}],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of\n`fmt::Debug` implementations for tuple structs.",212,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugtuple"}}],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of\n`fmt::Debug` implementations for list-like structures.",212,{"inputs":[{"name":"formatter"}],"output":{"name":"debuglist"}}],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of\n`fmt::Debug` implementations for set-like structures.",212,{"inputs":[{"name":"formatter"}],"output":{"name":"debugset"}}],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of\n`fmt::Debug` implementations for map-like structures.",212,{"inputs":[{"name":"formatter"}],"output":{"name":"debugmap"}}],[11,"write_str","","",212,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",212,{"inputs":[{"name":"formatter"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_fmt","","",212,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"fmt","","",208,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::marker","",72,{"inputs":[{"name":"phantomdata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::cell","",85,{"inputs":[{"name":"cell"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",87,{"inputs":[{"name":"refcell"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",89,{"inputs":[{"name":"ref"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",90,{"inputs":[{"name":"refmut"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone_from","libc::dox","Performs copy-assignment from `source`.",213,null],[11,"clone_from","libc::dox::imp","Performs copy-assignment from `source`.",213,null],[11,"clone","libc","",47,{"inputs":[{"name":"stat"}],"output":{"name":"stat"}}],[11,"clone","","",48,{"inputs":[{"name":"stat64"}],"output":{"name":"stat64"}}],[11,"clone","","",214,{"inputs":[{"name":"pthread_attr_t"}],"output":{"name":"pthread_attr_t"}}],[11,"clone","","",215,{"inputs":[{"name":"mcontext_t"}],"output":{"name":"mcontext_t"}}],[11,"clone","","",49,{"inputs":[{"name":"ucontext_t"}],"output":{"name":"ucontext_t"}}],[11,"clone","","",216,{"inputs":[{"name":"sigset_t"}],"output":{"name":"sigset_t"}}],[11,"clone","","",36,{"inputs":[{"name":"sigaction"}],"output":{"name":"sigaction"}}],[11,"clone","","",37,{"inputs":[{"name":"stack_t"}],"output":{"name":"stack_t"}}],[11,"clone","","",38,{"inputs":[{"name":"siginfo_t"}],"output":{"name":"siginfo_t"}}],[11,"clone","","",39,{"inputs":[{"name":"glob64_t"}],"output":{"name":"glob64_t"}}],[11,"clone","","",40,{"inputs":[{"name":"ucred"}],"output":{"name":"ucred"}}],[11,"clone","","",41,{"inputs":[{"name":"statfs"}],"output":{"name":"statfs"}}],[11,"clone","","",42,{"inputs":[{"name":"msghdr"}],"output":{"name":"msghdr"}}],[11,"clone","","",43,{"inputs":[{"name":"termios"}],"output":{"name":"termios"}}],[11,"clone","","",44,{"inputs":[{"name":"flock"}],"output":{"name":"flock"}}],[11,"clone","","",45,{"inputs":[{"name":"ipc_perm"}],"output":{"name":"ipc_perm"}}],[11,"clone","","",46,{"inputs":[{"name":"shmid_ds"}],"output":{"name":"shmid_ds"}}],[11,"clone","","",26,{"inputs":[{"name":"dirent"}],"output":{"name":"dirent"}}],[11,"clone","","",27,{"inputs":[{"name":"dirent64"}],"output":{"name":"dirent64"}}],[11,"clone","","",28,{"inputs":[{"name":"rlimit64"}],"output":{"name":"rlimit64"}}],[11,"clone","","",29,{"inputs":[{"name":"glob_t"}],"output":{"name":"glob_t"}}],[11,"clone","","",30,{"inputs":[{"name":"ifaddrs"}],"output":{"name":"ifaddrs"}}],[11,"clone","","",217,{"inputs":[{"name":"pthread_mutex_t"}],"output":{"name":"pthread_mutex_t"}}],[11,"clone","","",218,{"inputs":[{"name":"pthread_rwlock_t"}],"output":{"name":"pthread_rwlock_t"}}],[11,"clone","","",219,{"inputs":[{"name":"pthread_mutexattr_t"}],"output":{"name":"pthread_mutexattr_t"}}],[11,"clone","","",220,{"inputs":[{"name":"pthread_cond_t"}],"output":{"name":"pthread_cond_t"}}],[11,"clone","","",31,{"inputs":[{"name":"passwd"}],"output":{"name":"passwd"}}],[11,"clone","","",32,{"inputs":[{"name":"statvfs"}],"output":{"name":"statvfs"}}],[11,"clone","","",33,{"inputs":[{"name":"dqblk"}],"output":{"name":"dqblk"}}],[11,"clone","","",34,{"inputs":[{"name":"signalfd_siginfo"}],"output":{"name":"signalfd_siginfo"}}],[11,"clone","","",221,{"inputs":[{"name":"fsid_t"}],"output":{"name":"fsid_t"}}],[11,"clone","","",35,{"inputs":[{"name":"mq_attr"}],"output":{"name":"mq_attr"}}],[11,"clone","","",222,{"inputs":[{"name":"cpu_set_t"}],"output":{"name":"cpu_set_t"}}],[11,"clone","","",13,{"inputs":[{"name":"sockaddr"}],"output":{"name":"sockaddr"}}],[11,"clone","","",14,{"inputs":[{"name":"sockaddr_in"}],"output":{"name":"sockaddr_in"}}],[11,"clone","","",15,{"inputs":[{"name":"sockaddr_in6"}],"output":{"name":"sockaddr_in6"}}],[11,"clone","","",16,{"inputs":[{"name":"sockaddr_un"}],"output":{"name":"sockaddr_un"}}],[11,"clone","","",17,{"inputs":[{"name":"sockaddr_storage"}],"output":{"name":"sockaddr_storage"}}],[11,"clone","","",18,{"inputs":[{"name":"addrinfo"}],"output":{"name":"addrinfo"}}],[11,"clone","","",19,{"inputs":[{"name":"sockaddr_nl"}],"output":{"name":"sockaddr_nl"}}],[11,"clone","","",20,{"inputs":[{"name":"sockaddr_ll"}],"output":{"name":"sockaddr_ll"}}],[11,"clone","","",223,{"inputs":[{"name":"fd_set"}],"output":{"name":"fd_set"}}],[11,"clone","","",21,{"inputs":[{"name":"tm"}],"output":{"name":"tm"}}],[11,"clone","","",22,{"inputs":[{"name":"sched_param"}],"output":{"name":"sched_param"}}],[11,"clone","","",23,{"inputs":[{"name":"dl_info"}],"output":{"name":"dl_info"}}],[11,"clone","","",24,{"inputs":[{"name":"epoll_event"}],"output":{"name":"epoll_event"}}],[11,"clone","","",25,{"inputs":[{"name":"utsname"}],"output":{"name":"utsname"}}],[11,"clone","","",0,{"inputs":[{"name":"utimbuf"}],"output":{"name":"utimbuf"}}],[11,"clone","","",1,{"inputs":[{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"clone","","",2,{"inputs":[{"name":"timespec"}],"output":{"name":"timespec"}}],[11,"clone","","",3,{"inputs":[{"name":"rlimit"}],"output":{"name":"rlimit"}}],[11,"clone","","",4,{"inputs":[{"name":"rusage"}],"output":{"name":"rusage"}}],[11,"clone","","",5,{"inputs":[{"name":"in_addr"}],"output":{"name":"in_addr"}}],[11,"clone","","",6,{"inputs":[{"name":"in6_addr"}],"output":{"name":"in6_addr"}}],[11,"clone","","",7,{"inputs":[{"name":"ip_mreq"}],"output":{"name":"ip_mreq"}}],[11,"clone","","",8,{"inputs":[{"name":"ipv6_mreq"}],"output":{"name":"ipv6_mreq"}}],[11,"clone","","",9,{"inputs":[{"name":"hostent"}],"output":{"name":"hostent"}}],[11,"clone","","",10,{"inputs":[{"name":"iovec"}],"output":{"name":"iovec"}}],[11,"clone","","",11,{"inputs":[{"name":"pollfd"}],"output":{"name":"pollfd"}}],[11,"clone","","",12,{"inputs":[{"name":"winsize"}],"output":{"name":"winsize"}}],[6,"int8_t","","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"ssize_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"in_addr_t","","",null,null],[6,"in_port_t","","",null,null],[6,"sighandler_t","","",null,null],[6,"cc_t","","",null,null],[6,"sa_family_t","","",null,null],[6,"pthread_key_t","","",null,null],[6,"speed_t","","",null,null],[6,"tcflag_t","","",null,null],[6,"loff_t","","",null,null],[6,"useconds_t","","",null,null],[6,"dev_t","","",null,null],[6,"socklen_t","","",null,null],[6,"pthread_t","","",null,null],[6,"mode_t","","",null,null],[6,"ino64_t","","",null,null],[6,"off64_t","","",null,null],[6,"blkcnt64_t","","",null,null],[6,"rlim64_t","","",null,null],[6,"key_t","","",null,null],[6,"shmatt_t","","",null,null],[6,"mqd_t","","",null,null],[6,"nfds_t","","",null,null],[6,"fsblkcnt_t","","",null,null],[6,"fsfilcnt_t","","",null,null],[6,"rlim_t","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"suseconds_t","","",null,null],[6,"ino_t","","",null,null],[6,"off_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"__fsword_t","","",null,null],[6,"c_char","","",null,null],[6,"wchar_t","","",null,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[17,"SIG_DFL","","",null,null],[17,"SIG_IGN","","",null,null],[17,"SIG_ERR","","",null,null],[17,"DT_FIFO","","",null,null],[17,"DT_CHR","","",null,null],[17,"DT_DIR","","",null,null],[17,"DT_BLK","","",null,null],[17,"DT_REG","","",null,null],[17,"DT_LNK","","",null,null],[17,"DT_SOCK","","",null,null],[17,"FD_CLOEXEC","","",null,null],[17,"USRQUOTA","","",null,null],[17,"GRPQUOTA","","",null,null],[17,"SIGIOT","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[17,"POLLIN","","",null,null],[17,"POLLPRI","","",null,null],[17,"POLLOUT","","",null,null],[17,"POLLERR","","",null,null],[17,"POLLHUP","","",null,null],[17,"POLLNVAL","","",null,null],[17,"IF_NAMESIZE","","",null,null],[17,"RTLD_LAZY","","",null,null],[17,"EXIT_FAILURE","","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"F_DUPFD","","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"F_SETLEASE","","",null,null],[17,"F_GETLEASE","","",null,null],[17,"F_NOTIFY","","",null,null],[17,"F_DUPFD_CLOEXEC","","",null,null],[17,"F_SETPIPE_SZ","","",null,null],[17,"F_GETPIPE_SZ","","",null,null],[17,"SIGTRAP","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"CLOCK_REALTIME","","",null,null],[17,"CLOCK_MONOTONIC","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_LOCKS","","",null,null],[17,"RLIMIT_SIGPENDING","","",null,null],[17,"RLIMIT_MSGQUEUE","","",null,null],[17,"RLIMIT_NICE","","",null,null],[17,"RLIMIT_RTPRIO","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"SOCK_CLOEXEC","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MS_RDONLY","","",null,null],[17,"MS_NOSUID","","",null,null],[17,"MS_NODEV","","",null,null],[17,"MS_NOEXEC","","",null,null],[17,"MS_SYNCHRONOUS","","",null,null],[17,"MS_REMOUNT","","",null,null],[17,"MS_MANDLOCK","","",null,null],[17,"MS_DIRSYNC","","",null,null],[17,"MS_NOATIME","","",null,null],[17,"MS_NODIRATIME","","",null,null],[17,"MS_BIND","","",null,null],[17,"MS_MOVE","","",null,null],[17,"MS_REC","","",null,null],[17,"MS_SILENT","","",null,null],[17,"MS_POSIXACL","","",null,null],[17,"MS_UNBINDABLE","","",null,null],[17,"MS_PRIVATE","","",null,null],[17,"MS_SLAVE","","",null,null],[17,"MS_SHARED","","",null,null],[17,"MS_RELATIME","","",null,null],[17,"MS_KERNMOUNT","","",null,null],[17,"MS_I_VERSION","","",null,null],[17,"MS_STRICTATIME","","",null,null],[17,"MS_ACTIVE","","",null,null],[17,"MS_NOUSER","","",null,null],[17,"MS_MGC_VAL","","",null,null],[17,"MS_MGC_MSK","","",null,null],[17,"MS_RMT_MASK","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EAGAIN","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"EBFONT","","",null,null],[17,"ENOSTR","","",null,null],[17,"ENODATA","","",null,null],[17,"ETIME","","",null,null],[17,"ENOSR","","",null,null],[17,"ENONET","","",null,null],[17,"ENOPKG","","",null,null],[17,"EREMOTE","","",null,null],[17,"ENOLINK","","",null,null],[17,"EADV","","",null,null],[17,"ESRMNT","","",null,null],[17,"ECOMM","","",null,null],[17,"EPROTO","","",null,null],[17,"EDOTDOT","","",null,null],[17,"AF_PACKET","","",null,null],[17,"IPPROTO_RAW","","",null,null],[17,"PROT_GROWSDOWN","","",null,null],[17,"PROT_GROWSUP","","",null,null],[17,"MAP_TYPE","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_REMOVE","","",null,null],[17,"MADV_DONTFORK","","",null,null],[17,"MADV_DOFORK","","",null,null],[17,"MADV_MERGEABLE","","",null,null],[17,"MADV_UNMERGEABLE","","",null,null],[17,"MADV_HWPOISON","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_INET6","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IP_TRANSPARENT","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"TCP_CORK","","",null,null],[17,"TCP_KEEPIDLE","","",null,null],[17,"TCP_KEEPINTVL","","",null,null],[17,"TCP_KEEPCNT","","",null,null],[17,"TCP_SYNCNT","","",null,null],[17,"TCP_LINGER2","","",null,null],[17,"TCP_DEFER_ACCEPT","","",null,null],[17,"TCP_WINDOW_CLAMP","","",null,null],[17,"TCP_INFO","","",null,null],[17,"TCP_QUICKACK","","",null,null],[17,"TCP_CONGESTION","","",null,null],[17,"IPV6_MULTICAST_LOOP","","",null,null],[17,"IPV6_V6ONLY","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"LOCK_SH","","",null,null],[17,"LOCK_EX","","",null,null],[17,"LOCK_NB","","",null,null],[17,"LOCK_UN","","",null,null],[17,"SIGSTKSZ","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"SS_ONSTACK","","",null,null],[17,"SS_DISABLE","","",null,null],[17,"PATH_MAX","","",null,null],[17,"FD_SETSIZE","","",null,null],[17,"EPOLLIN","","",null,null],[17,"EPOLLPRI","","",null,null],[17,"EPOLLOUT","","",null,null],[17,"EPOLLRDNORM","","",null,null],[17,"EPOLLRDBAND","","",null,null],[17,"EPOLLWRNORM","","",null,null],[17,"EPOLLWRBAND","","",null,null],[17,"EPOLLMSG","","",null,null],[17,"EPOLLERR","","",null,null],[17,"EPOLLHUP","","",null,null],[17,"EPOLLET","","",null,null],[17,"EPOLL_CTL_ADD","","",null,null],[17,"EPOLL_CTL_MOD","","",null,null],[17,"EPOLL_CTL_DEL","","",null,null],[17,"MNT_DETACH","","",null,null],[17,"MNT_EXPIRE","","",null,null],[17,"Q_GETFMT","","",null,null],[17,"Q_GETINFO","","",null,null],[17,"Q_SETINFO","","",null,null],[17,"QIF_BLIMITS","","",null,null],[17,"QIF_SPACE","","",null,null],[17,"QIF_ILIMITS","","",null,null],[17,"QIF_INODES","","",null,null],[17,"QIF_BTIME","","",null,null],[17,"QIF_ITIME","","",null,null],[17,"QIF_LIMITS","","",null,null],[17,"QIF_USAGE","","",null,null],[17,"QIF_TIMES","","",null,null],[17,"QIF_ALL","","",null,null],[17,"CBAUD","","",null,null],[17,"EFD_CLOEXEC","","",null,null],[17,"MNT_FORCE","","",null,null],[17,"Q_SYNC","","",null,null],[17,"Q_QUOTAON","","",null,null],[17,"Q_QUOTAOFF","","",null,null],[17,"Q_GETQUOTA","","",null,null],[17,"Q_SETQUOTA","","",null,null],[17,"TCIOFF","","",null,null],[17,"TCION","","",null,null],[17,"TCOOFF","","",null,null],[17,"TCOON","","",null,null],[17,"TCIFLUSH","","",null,null],[17,"TCOFLUSH","","",null,null],[17,"TCIOFLUSH","","",null,null],[17,"NL0","","",null,null],[17,"NL1","","",null,null],[17,"TAB0","","",null,null],[17,"TAB1","","",null,null],[17,"TAB2","","",null,null],[17,"TAB3","","",null,null],[17,"CR0","","",null,null],[17,"CR1","","",null,null],[17,"CR2","","",null,null],[17,"CR3","","",null,null],[17,"FF0","","",null,null],[17,"FF1","","",null,null],[17,"BS0","","",null,null],[17,"BS1","","",null,null],[17,"VT0","","",null,null],[17,"VT1","","",null,null],[17,"VERASE","","",null,null],[17,"VWERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VREPRINT","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VLNEXT","","",null,null],[17,"VDISCARD","","",null,null],[17,"VTIME","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"OPOST","","",null,null],[17,"ONLCR","","",null,null],[17,"CSIZE","","",null,null],[17,"CS5","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"CRTSCTS","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHO","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"CLONE_VM","","",null,null],[17,"CLONE_FS","","",null,null],[17,"CLONE_FILES","","",null,null],[17,"CLONE_SIGHAND","","",null,null],[17,"CLONE_PTRACE","","",null,null],[17,"CLONE_VFORK","","",null,null],[17,"CLONE_PARENT","","",null,null],[17,"CLONE_THREAD","","",null,null],[17,"CLONE_NEWNS","","",null,null],[17,"CLONE_SYSVSEM","","",null,null],[17,"CLONE_SETTLS","","",null,null],[17,"CLONE_PARENT_SETTID","","",null,null],[17,"CLONE_CHILD_CLEARTID","","",null,null],[17,"CLONE_DETACHED","","",null,null],[17,"CLONE_UNTRACED","","",null,null],[17,"CLONE_CHILD_SETTID","","",null,null],[17,"CLONE_NEWUTS","","",null,null],[17,"CLONE_NEWIPC","","",null,null],[17,"CLONE_NEWUSER","","",null,null],[17,"CLONE_NEWPID","","",null,null],[17,"CLONE_NEWNET","","",null,null],[17,"CLONE_IO","","",null,null],[17,"WNOHANG","","",null,null],[17,"SPLICE_F_MOVE","","",null,null],[17,"SPLICE_F_NONBLOCK","","",null,null],[17,"SPLICE_F_MORE","","",null,null],[17,"SPLICE_F_GIFT","","",null,null],[17,"RTLD_LOCAL","","",null,null],[17,"POSIX_FADV_NORMAL","","",null,null],[17,"POSIX_FADV_RANDOM","","",null,null],[17,"POSIX_FADV_SEQUENTIAL","","",null,null],[17,"POSIX_FADV_WILLNEED","","",null,null],[17,"POSIX_FADV_DONTNEED","","",null,null],[17,"POSIX_FADV_NOREUSE","","",null,null],[17,"AT_FDCWD","","",null,null],[17,"AT_SYMLINK_NOFOLLOW","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[17,"_SC_ARG_MAX","","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_PAGE_SIZE","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"RLIM_SAVED_MAX","","",null,null],[17,"RLIM_SAVED_CUR","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"ST_RDONLY","","",null,null],[17,"ST_NOSUID","","",null,null],[17,"ST_NODEV","","",null,null],[17,"ST_NOEXEC","","",null,null],[17,"ST_SYNCHRONOUS","","",null,null],[17,"ST_MANDLOCK","","",null,null],[17,"ST_WRITE","","",null,null],[17,"ST_APPEND","","",null,null],[17,"ST_IMMUTABLE","","",null,null],[17,"ST_NOATIME","","",null,null],[17,"ST_NODIRATIME","","",null,null],[17,"RTLD_NEXT","","",null,null],[17,"RTLD_DEFAULT","","",null,null],[17,"RTLD_NODELETE","","",null,null],[17,"RTLD_NOW","","",null,null],[17,"TCP_MD5SIG","","",null,null],[17,"PTHREAD_MUTEX_INITIALIZER","","",null,null],[17,"PTHREAD_COND_INITIALIZER","","",null,null],[17,"PTHREAD_RWLOCK_INITIALIZER","","",null,null],[17,"PTHREAD_MUTEX_RECURSIVE","","",null,null],[17,"__SIZEOF_PTHREAD_COND_T","","",null,null],[17,"SCHED_OTHER","","",null,null],[17,"SCHED_FIFO","","",null,null],[17,"SCHED_RR","","",null,null],[17,"SCHED_BATCH","","",null,null],[17,"SCHED_IDLE","","",null,null],[17,"IPC_CREAT","","",null,null],[17,"IPC_EXCL","","",null,null],[17,"IPC_NOWAIT","","",null,null],[17,"IPC_RMID","","",null,null],[17,"IPC_SET","","",null,null],[17,"IPC_STAT","","",null,null],[17,"IPC_INFO","","",null,null],[17,"SHM_R","","",null,null],[17,"SHM_W","","",null,null],[17,"SHM_RDONLY","","",null,null],[17,"SHM_RND","","",null,null],[17,"SHM_REMAP","","",null,null],[17,"SHM_EXEC","","",null,null],[17,"SHM_LOCK","","",null,null],[17,"SHM_UNLOCK","","",null,null],[17,"SHM_HUGETLB","","",null,null],[17,"SHM_NORESERVE","","",null,null],[17,"EPOLLRDHUP","","",null,null],[17,"EPOLLONESHOT","","",null,null],[17,"QFMT_VFS_OLD","","",null,null],[17,"QFMT_VFS_V0","","",null,null],[17,"SFD_CLOEXEC","","",null,null],[17,"EFD_SEMAPHORE","","",null,null],[17,"NCCS","","",null,null],[17,"AF_NETLINK","","",null,null],[17,"RLIMIT_RSS","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"RLIMIT_RTTIME","","",null,null],[17,"RLIMIT_NLIMITS","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_RSYNC","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_FSYNC","","",null,null],[17,"SOCK_NONBLOCK","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[17,"MAP_GROWSDOWN","","",null,null],[17,"MAP_DENYWRITE","","",null,null],[17,"MAP_EXECUTABLE","","",null,null],[17,"MAP_POPULATE","","",null,null],[17,"MAP_NONBLOCK","","",null,null],[17,"MAP_STACK","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"ELOOP","","",null,null],[17,"ENOMSG","","",null,null],[17,"EIDRM","","",null,null],[17,"ECHRNG","","",null,null],[17,"EL2NSYNC","","",null,null],[17,"EL3HLT","","",null,null],[17,"EL3RST","","",null,null],[17,"ELNRNG","","",null,null],[17,"EUNATCH","","",null,null],[17,"ENOCSI","","",null,null],[17,"EL2HLT","","",null,null],[17,"EBADE","","",null,null],[17,"EBADR","","",null,null],[17,"EXFULL","","",null,null],[17,"ENOANO","","",null,null],[17,"EBADRQC","","",null,null],[17,"EBADSLT","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"ENOTUNIQ","","",null,null],[17,"EBADFD","","",null,null],[17,"EBADMSG","","",null,null],[17,"EREMCHG","","",null,null],[17,"ELIBACC","","",null,null],[17,"ELIBBAD","","",null,null],[17,"ELIBSCN","","",null,null],[17,"ELIBMAX","","",null,null],[17,"ELIBEXEC","","",null,null],[17,"EILSEQ","","",null,null],[17,"ERESTART","","",null,null],[17,"ESTRPIPE","","",null,null],[17,"EUSERS","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"EALREADY","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"ESTALE","","",null,null],[17,"EUCLEAN","","",null,null],[17,"ENOTNAM","","",null,null],[17,"ENAVAIL","","",null,null],[17,"EISNAM","","",null,null],[17,"EREMOTEIO","","",null,null],[17,"EDQUOT","","",null,null],[17,"ENOMEDIUM","","",null,null],[17,"EMEDIUMTYPE","","",null,null],[17,"ECANCELED","","",null,null],[17,"ENOKEY","","",null,null],[17,"EKEYEXPIRED","","",null,null],[17,"EKEYREVOKED","","",null,null],[17,"EKEYREJECTED","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"EHWPOISON","","",null,null],[17,"ERFKILL","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"TCP_COOKIE_TRANSACTIONS","","",null,null],[17,"TCP_THIN_LINEAR_TIMEOUTS","","",null,null],[17,"TCP_THIN_DUPACK","","",null,null],[17,"TCP_USER_TIMEOUT","","",null,null],[17,"TCP_REPAIR","","",null,null],[17,"TCP_REPAIR_QUEUE","","",null,null],[17,"TCP_QUEUE_SEQ","","",null,null],[17,"TCP_REPAIR_OPTIONS","","",null,null],[17,"TCP_FASTOPEN","","",null,null],[17,"TCP_TIMESTAMP","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIGUSR1","","",null,null],[17,"SIGUSR2","","",null,null],[17,"SIGCONT","","",null,null],[17,"SIGSTOP","","",null,null],[17,"SIGTSTP","","",null,null],[17,"SIGURG","","",null,null],[17,"SIGIO","","",null,null],[17,"SIGSYS","","",null,null],[17,"SIGSTKFLT","","",null,null],[17,"SIGUNUSED","","",null,null],[17,"SIGTTIN","","",null,null],[17,"SIGTTOU","","",null,null],[17,"SIGXCPU","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"SIGVTALRM","","",null,null],[17,"SIGPROF","","",null,null],[17,"SIGWINCH","","",null,null],[17,"SIGPOLL","","",null,null],[17,"SIGPWR","","",null,null],[17,"SIG_SETMASK","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"FALLOC_FL_KEEP_SIZE","","",null,null],[17,"FALLOC_FL_PUNCH_HOLE","","",null,null],[17,"BUFSIZ","","",null,null],[17,"TMP_MAX","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_2_C_VERSION","","",null,null],[17,"RUSAGE_THREAD","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"O_ASYNC","","",null,null],[17,"O_NDELAY","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"ST_RELATIME","","",null,null],[17,"NI_MAXHOST","","",null,null],[17,"ADFS_SUPER_MAGIC","","",null,null],[17,"AFFS_SUPER_MAGIC","","",null,null],[17,"CODA_SUPER_MAGIC","","",null,null],[17,"CRAMFS_MAGIC","","",null,null],[17,"EFS_SUPER_MAGIC","","",null,null],[17,"EXT2_SUPER_MAGIC","","",null,null],[17,"EXT3_SUPER_MAGIC","","",null,null],[17,"EXT4_SUPER_MAGIC","","",null,null],[17,"HPFS_SUPER_MAGIC","","",null,null],[17,"HUGETLBFS_MAGIC","","",null,null],[17,"ISOFS_SUPER_MAGIC","","",null,null],[17,"JFFS2_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC2","","",null,null],[17,"MINIX2_SUPER_MAGIC","","",null,null],[17,"MINIX2_SUPER_MAGIC2","","",null,null],[17,"MSDOS_SUPER_MAGIC","","",null,null],[17,"NCP_SUPER_MAGIC","","",null,null],[17,"NFS_SUPER_MAGIC","","",null,null],[17,"OPENPROM_SUPER_MAGIC","","",null,null],[17,"PROC_SUPER_MAGIC","","",null,null],[17,"QNX4_SUPER_MAGIC","","",null,null],[17,"REISERFS_SUPER_MAGIC","","",null,null],[17,"SMB_SUPER_MAGIC","","",null,null],[17,"TMPFS_MAGIC","","",null,null],[17,"USBDEVICE_SUPER_MAGIC","","",null,null],[17,"VEOF","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VMIN","","",null,null],[17,"IEXTEN","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"IUTF8","","",null,null],[17,"CPU_SETSIZE","","",null,null],[17,"EXTPROC","","",null,null],[17,"QFMT_VFS_V1","","",null,null],[17,"PTRACE_TRACEME","","",null,null],[17,"PTRACE_PEEKTEXT","","",null,null],[17,"PTRACE_PEEKDATA","","",null,null],[17,"PTRACE_PEEKUSER","","",null,null],[17,"PTRACE_POKETEXT","","",null,null],[17,"PTRACE_POKEDATA","","",null,null],[17,"PTRACE_POKEUSER","","",null,null],[17,"PTRACE_CONT","","",null,null],[17,"PTRACE_KILL","","",null,null],[17,"PTRACE_SINGLESTEP","","",null,null],[17,"PTRACE_ATTACH","","",null,null],[17,"PTRACE_DETACH","","",null,null],[17,"PTRACE_SYSCALL","","",null,null],[17,"PTRACE_SETOPTIONS","","",null,null],[17,"PTRACE_GETEVENTMSG","","",null,null],[17,"PTRACE_GETSIGINFO","","",null,null],[17,"PTRACE_SETSIGINFO","","",null,null],[17,"PTRACE_GETREGSET","","",null,null],[17,"PTRACE_SETREGSET","","",null,null],[17,"PTRACE_SEIZE","","",null,null],[17,"PTRACE_INTERRUPT","","",null,null],[17,"PTRACE_LISTEN","","",null,null],[17,"PTRACE_PEEKSIGINFO","","",null,null],[17,"MADV_DODUMP","","",null,null],[17,"MADV_DONTDUMP","","",null,null],[17,"EPOLLWAKEUP","","",null,null],[17,"MADV_HUGEPAGE","","",null,null],[17,"MADV_NOHUGEPAGE","","",null,null],[17,"MAP_HUGETLB","","",null,null],[17,"EFD_NONBLOCK","","",null,null],[17,"F_GETLK","","",null,null],[17,"F_GETOWN","","",null,null],[17,"F_SETOWN","","",null,null],[17,"F_SETLK","","",null,null],[17,"F_SETLKW","","",null,null],[17,"SFD_NONBLOCK","","",null,null],[17,"TCSANOW","","",null,null],[17,"TCSADRAIN","","",null,null],[17,"TCSAFLUSH","","",null,null],[17,"TCGETS","","",null,null],[17,"TCSETS","","",null,null],[17,"TCSETSW","","",null,null],[17,"TCSETSF","","",null,null],[17,"TCGETA","","",null,null],[17,"TCSETA","","",null,null],[17,"TCSETAW","","",null,null],[17,"TCSETAF","","",null,null],[17,"TCSBRK","","",null,null],[17,"TCXONC","","",null,null],[17,"TCFLSH","","",null,null],[17,"TIOCGSOFTCAR","","",null,null],[17,"TIOCSSOFTCAR","","",null,null],[17,"TIOCINQ","","",null,null],[17,"TIOCLINUX","","",null,null],[17,"TIOCGSERIAL","","",null,null],[17,"TIOCEXCL","","",null,null],[17,"TIOCNXCL","","",null,null],[17,"TIOCSCTTY","","",null,null],[17,"TIOCGPGRP","","",null,null],[17,"TIOCSPGRP","","",null,null],[17,"TIOCOUTQ","","",null,null],[17,"TIOCSTI","","",null,null],[17,"TIOCGWINSZ","","",null,null],[17,"TIOCSWINSZ","","",null,null],[17,"TIOCMGET","","",null,null],[17,"TIOCMBIS","","",null,null],[17,"TIOCMBIC","","",null,null],[17,"TIOCMSET","","",null,null],[17,"FIONREAD","","",null,null],[17,"TIOCCONS","","",null,null],[17,"RTLD_DEEPBIND","","",null,null],[17,"RTLD_GLOBAL","","",null,null],[17,"RTLD_NOLOAD","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCK_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEX_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEXATTR_T","","",null,null],[17,"O_DIRECT","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"MAP_LOCKED","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_32BIT","","",null,null],[17,"EDEADLOCK","","",null,null],[17,"SO_PEERCRED","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"FIOCLEX","","",null,null],[17,"FIONBIO","","",null,null],[17,"PTRACE_GETFPREGS","","",null,null],[17,"PTRACE_SETFPREGS","","",null,null],[17,"PTRACE_GETFPXREGS","","",null,null],[17,"PTRACE_SETFPXREGS","","",null,null],[17,"PTRACE_GETREGS","","",null,null],[17,"PTRACE_SETREGS","","",null,null],[17,"SYS_gettid","","",null,null],[17,"SYS_perf_event_open","","",null,null]],"paths":[[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"sockaddr_nl"],[3,"sockaddr_ll"],[3,"tm"],[3,"sched_param"],[3,"Dl_info"],[3,"epoll_event"],[3,"utsname"],[3,"dirent"],[3,"dirent64"],[3,"rlimit64"],[3,"glob_t"],[3,"ifaddrs"],[3,"passwd"],[3,"statvfs"],[3,"dqblk"],[3,"signalfd_siginfo"],[3,"mq_attr"],[3,"sigaction"],[3,"stack_t"],[3,"siginfo_t"],[3,"glob64_t"],[3,"ucred"],[3,"statfs"],[3,"msghdr"],[3,"termios"],[3,"flock"],[3,"ipc_perm"],[3,"shmid_ds"],[3,"stat"],[3,"stat64"],[3,"ucontext_t"],[4,"Option"],[3,"Wrapping"],[3,"Decoded"],[4,"FullDecoded"],[4,"Part"],[3,"Formatted"],[4,"Sign"],[3,"Unpacked"],[4,"Sign"],[3,"Decimal"],[4,"ParseResult"],[3,"ParseFloatError"],[4,"FloatErrorKind"],[3,"Big32x40"],[3,"Big8x3"],[3,"Fp"],[4,"FpCategory"],[3,"ParseIntError"],[4,"IntErrorKind"],[3,"NonZero"],[3,"Unique"],[3,"Shared"],[3,"PhantomData"],[3,"RangeFull"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[4,"Ordering"],[8,"Any"],[3,"TypeId"],[3,"AtomicBool"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"AtomicPtr"],[4,"Ordering"],[3,"Cell"],[4,"BorrowState"],[3,"RefCell"],[3,"BorrowRef"],[3,"Ref"],[3,"RefMut"],[3,"BorrowRefMut"],[3,"UnsafeCell"],[3,"EscapeUnicode"],[4,"EscapeUnicodeState"],[3,"EscapeDefault"],[4,"EscapeDefaultState"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[4,"ChainState"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[3,"StepBy"],[3,"RangeInclusive"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[3,"Item"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Slice"],[3,"TraitObject"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"i8x16"],[3,"i16x8"],[3,"i32x4"],[3,"i64x2"],[3,"u8x16"],[3,"u16x8"],[3,"u32x4"],[3,"u64x2"],[3,"f32x4"],[3,"f64x2"],[3,"Iter"],[3,"IterMut"],[3,"Split"],[3,"SplitMut"],[3,"GenericSplitN"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"Windows"],[3,"Chunks"],[3,"ChunksMut"],[4,"SearchStep"],[3,"CharEqSearcher"],[3,"CharEqPattern"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[4,"StrSearcherImpl"],[3,"EmptyNeedle"],[3,"TwoWaySearcher"],[4,"MatchOnly"],[4,"RejectAndMatch"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"SplitInternal"],[3,"Split"],[3,"RSplit"],[3,"SplitTerminator"],[3,"RSplitTerminator"],[3,"SplitNInternal"],[3,"SplitN"],[3,"RSplitN"],[3,"MatchIndicesInternal"],[3,"MatchIndices"],[3,"RMatchIndices"],[3,"MatchesInternal"],[3,"Matches"],[3,"RMatches"],[3,"Lines"],[3,"LinesAny"],[3,"LinesAnyMap"],[3,"CharRange"],[3,"SipHasher"],[3,"Binary"],[3,"Octal"],[3,"Decimal"],[3,"LowerHex"],[3,"UpperHex"],[3,"Radix"],[3,"RadixFmt"],[3,"PadAdapter"],[3,"DebugStruct"],[3,"DebugTuple"],[3,"DebugInner"],[3,"DebugSet"],[3,"DebugList"],[3,"DebugMap"],[3,"Argument"],[3,"FormatSpec"],[4,"Alignment"],[4,"Count"],[4,"Position"],[3,"Error"],[3,"ArgumentV1"],[4,"FlagV1"],[3,"Arguments"],[3,"Formatter"],[8,"Clone"],[3,"pthread_attr_t"],[3,"mcontext_t"],[3,"sigset_t"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[3,"pthread_mutexattr_t"],[3,"pthread_cond_t"],[3,"fsid_t"],[3,"cpu_set_t"],[3,"fd_set"]]};
searchIndex['walkdir'] = {"items":[[0,"","walkdir","Crate `walkdir` provides an efficient and cross platform implementation\nof recursive directory traversal. Several options are exposed to control\niteration, such as whether to follow symbolic links (default off), limit the\nmaximum number of simultaneous open file descriptors and the ability to\nefficiently skip descending into directories.",null,null],[3,"WalkDir","","A builder to create an iterator for recursively walking a directory.",null,null],[3,"Iter","","An iterator for recursively descending into a directory.",null,null],[3,"DirEntry","","A directory entry.",null,null],[3,"IterFilterEntry","","A recursive directory iterator that skips entries.",null,null],[3,"Error","","An error produced by recursively walking a directory.",null,null],[6,"Result","","A result type for walkdir operations.",null,null],[8,"WalkDirIterator","","A trait for recursive directory iterators.",null,null],[10,"skip_current_dir","","Skips the current directory.",0,{"inputs":[{"name":"walkdiriterator"}],"output":null}],[11,"filter_entry","","Yields only entries which satisfy the given predicate and skips\ndescending into directories that do not satisfy the given predicate.",0,{"inputs":[{"name":"walkdiriterator"},{"name":"p"}],"output":{"name":"iterfilterentry"}}],[11,"new","","Create a builder for a recursive directory iterator starting at the\nfile path `root`. If `root` is a directory, then it is the first item\nyielded by the iterator. If `root` is a file, then it is the first\nand only item yielded by the iterator.",1,{"inputs":[{"name":"walkdir"},{"name":"p"}],"output":{"name":"self"}}],[11,"min_depth","","Set the minimum depth of entries yielded by the iterator.",1,{"inputs":[{"name":"walkdir"},{"name":"usize"}],"output":{"name":"self"}}],[11,"max_depth","","Set the maximum depth of entries yield by the iterator.",1,{"inputs":[{"name":"walkdir"},{"name":"usize"}],"output":{"name":"self"}}],[11,"follow_links","","Follow symbolic links. By default, this is disabled.",1,{"inputs":[{"name":"walkdir"},{"name":"bool"}],"output":{"name":"self"}}],[11,"max_open","","Set the maximum number of simultaneously open file descriptors used\nby the iterator.",1,{"inputs":[{"name":"walkdir"},{"name":"usize"}],"output":{"name":"self"}}],[11,"into_iter","","",1,{"inputs":[{"name":"walkdir"}],"output":{"name":"iter"}}],[11,"next","","",2,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"skip_current_dir","","",2,{"inputs":[{"name":"iter"}],"output":null}],[11,"path","","The full path that this entry represents.",3,{"inputs":[{"name":"direntry"}],"output":{"name":"path"}}],[11,"path_is_symbolic_link","","Returns `true` if and only if this entry was created from a symbolic\nlink. This is unaffected by the `follow_links` setting.",3,{"inputs":[{"name":"direntry"}],"output":{"name":"bool"}}],[11,"metadata","","Return the metadata for the file that this entry points to.",3,{"inputs":[{"name":"direntry"}],"output":{"name":"result"}}],[11,"file_type","","Return the file type for the file that this entry points to.",3,{"inputs":[{"name":"direntry"}],"output":{"name":"filetype"}}],[11,"file_name","","Return the file name of this entry.",3,{"inputs":[{"name":"direntry"}],"output":{"name":"osstr"}}],[11,"depth","","Returns the depth at which this entry was created relative to the root.",3,{"inputs":[{"name":"direntry"}],"output":{"name":"usize"}}],[11,"clone","","",3,{"inputs":[{"name":"direntry"}],"output":{"name":"direntry"}}],[11,"fmt","","",3,{"inputs":[{"name":"direntry"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",4,{"inputs":[{"name":"iterfilterentry"}],"output":{"name":"option"}}],[11,"skip_current_dir","","",4,{"inputs":[{"name":"iterfilterentry"}],"output":null}],[11,"fmt","","",5,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"path","","Returns the path associated with this error if one exists.",5,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"loop_ancestor","","Returns the path at which a cycle was detected.",5,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"depth","","Returns the depth at which this error occurred relative to the root.",5,{"inputs":[{"name":"error"}],"output":{"name":"usize"}}],[11,"description","","",5,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",5,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"fmt","","",5,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","std::io::error","",6,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"error"}}]],"paths":[[8,"WalkDirIterator"],[3,"WalkDir"],[3,"Iter"],[3,"DirEntry"],[3,"IterFilterEntry"],[3,"Error"],[3,"Error"]]};
searchIndex['kernel32'] = {"items":[],"paths":[]};
searchIndex['modifier'] = {"items":[[0,"","modifier","Overloadable modification through both owned and mutable references\nto a type with minimal code duplication.",null,null],[8,"Modifier","","Allows use of the implemented type as an argument to Set::set.",null,null],[10,"modify","","Modify `F` with self.",0,{"inputs":[{"name":"modifier"},{"name":"f"}],"output":null}],[8,"Set","","A trait providing the set and set_mut methods for all types.",null,null],[11,"set","","Modify self using the provided modifier.",1,{"inputs":[{"name":"set"},{"name":"m"}],"output":{"name":"self"}}],[11,"set_mut","","Modify self through a mutable reference with the provided modifier.",1,{"inputs":[{"name":"set"},{"name":"m"}],"output":{"name":"self"}}]],"paths":[[8,"Modifier"],[8,"Set"]]};
searchIndex['plugin'] = {"items":[[0,"","plugin","Lazily-Evaluated, Order-Independent Plugins for Extensible Types.",null,null],[8,"Plugin","","Implementers of this trait can act as plugins for other types, via `OtherType::get<P>()`.",null,null],[16,"Error","","The error type associated with this plugin.",0,null],[10,"eval","","Create the plugin from an instance of the extended type.",0,{"inputs":[{"name":"plugin"},{"name":"e"}],"output":{"name":"result"}}],[8,"Extensible","","Defines an interface that extensible types must implement.",null,null],[10,"extensions","","Get a reference to the type's extension storage.",1,{"inputs":[{"name":"extensible"}],"output":{"name":"typemap"}}],[10,"extensions_mut","","Get a mutable reference to the type's extension storage.",1,{"inputs":[{"name":"extensible"}],"output":{"name":"typemap"}}],[8,"Pluggable","","An interface for plugins that cache values between calls.",null,null],[11,"get","","Return a copy of the plugin's produced value.",2,{"inputs":[{"name":"pluggable"}],"output":{"name":"result"}}],[11,"get_ref","","Return a reference to the plugin's produced value.",2,{"inputs":[{"name":"pluggable"}],"output":{"name":"result"}}],[11,"get_mut","","Return a mutable reference to the plugin's produced value.",2,{"inputs":[{"name":"pluggable"}],"output":{"name":"result"}}],[11,"compute","","Create and evaluate a once-off instance of a plugin.",2,{"inputs":[{"name":"pluggable"}],"output":{"name":"result"}}]],"paths":[[8,"Plugin"],[8,"Extensible"],[8,"Pluggable"]]};
searchIndex['typemap'] = {"items":[[0,"","typemap","A type-based key value store where one value type is allowed for each key.",null,null],[3,"TypeMap","","A map keyed by types.",null,null],[3,"OccupiedEntry","","A view onto an occupied entry in a TypeMap.",null,null],[3,"VacantEntry","","A view onto an unoccupied entry in a TypeMap.",null,null],[4,"Entry","","A view onto an entry in a TypeMap.",null,null],[13,"Occupied","","A view onto an occupied entry in a TypeMap.",0,null],[13,"Vacant","","A view onto an unoccupied entry in a TypeMap.",0,null],[11,"clone","alloc::boxed","",1,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"clone","","",1,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"clone","","",1,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"clone","","",1,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[6,"SendMap","typemap","A version of `TypeMap` containing only `Send` types.",null,null],[6,"SyncMap","","A version of `TypeMap` containing only `Sync` types.",null,null],[6,"ShareMap","","A version of `TypeMap` containing only `Send + Sync` types.",null,null],[6,"CloneMap","","A version of `TypeMap` containing only `Clone` types.",null,null],[6,"ShareCloneMap","","A version of `TypeMap` containing only `Clone + Send + Sync` types.",null,null],[6,"DebugMap","","A version of `TypeMap` containing only `Debug` types.",null,null],[6,"ShareDebugMap","","A version of `TypeMap` containing only `Debug + Send + Sync` types.",null,null],[8,"CloneAny","","A marker trait meant for use as the `A` parameter in `TypeMap`.",null,null],[8,"DebugAny","","A marker trait meant for use as the `A` parameter in `TypeMap`.",null,null],[8,"Key","","This trait defines the relationship between keys and values in a TypeMap.",null,null],[16,"Value","","The value type associated with this key type.",2,null],[11,"fmt","","",3,{"inputs":[{"name":"typemap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",3,{"inputs":[{"name":"typemap"}],"output":{"name":"typemap"}}],[11,"clone","","",3,{"inputs":[{"name":"typemap"}],"output":{"name":"typemap"}}],[11,"new","","Create a new, empty TypeMap.",3,{"inputs":[{"name":"typemap"}],"output":{"name":"typemap"}}],[11,"custom","","Create a new, empty TypeMap.",3,{"inputs":[{"name":"typemap"}],"output":{"name":"typemap"}}],[11,"insert","","Insert a value into the map with a specified key type.",3,{"inputs":[{"name":"typemap"},{"name":"value"}],"output":{"name":"option"}}],[11,"get","","Find a value in the map and get a reference to it.",3,{"inputs":[{"name":"typemap"}],"output":{"name":"option"}}],[11,"get_mut","","Find a value in the map and get a mutable reference to it.",3,{"inputs":[{"name":"typemap"}],"output":{"name":"option"}}],[11,"contains","","Check if a key has an associated value stored in the map.",3,{"inputs":[{"name":"typemap"}],"output":{"name":"bool"}}],[11,"remove","","Remove a value from the map.",3,{"inputs":[{"name":"typemap"}],"output":{"name":"option"}}],[11,"entry","","Get the given key's corresponding entry in the map for in-place manipulation.",3,{"inputs":[{"name":"typemap"}],"output":{"name":"entry"}}],[11,"data","","Read the underlying HashMap",3,{"inputs":[{"name":"typemap"}],"output":{"name":"hashmap"}}],[11,"data_mut","","Get a mutable reference to the underlying HashMap",3,{"inputs":[{"name":"typemap"}],"output":{"name":"hashmap"}}],[11,"len","","Get the number of values stored in the map.",3,{"inputs":[{"name":"typemap"}],"output":{"name":"usize"}}],[11,"is_empty","","Return true if the map contains no values.",3,{"inputs":[{"name":"typemap"}],"output":{"name":"bool"}}],[11,"clear","","Remove all entries from the map.",3,{"inputs":[{"name":"typemap"}],"output":null}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns\na mutable reference to the value in the entry.",0,{"inputs":[{"name":"entry"},{"name":"value"}],"output":{"name":"value"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty,\nand returns a mutable reference to the value in the entry.",0,{"inputs":[{"name":"entry"},{"name":"f"}],"output":{"name":"value"}}],[11,"get","","Get a reference to the entry's value.",4,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"value"}}],[11,"get_mut","","Get a mutable reference to the entry's value.",4,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"value"}}],[11,"into_mut","","Transform the entry into a mutable reference with the same lifetime as the map.",4,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"value"}}],[11,"insert","","Set the entry's value and return the previous value.",4,{"inputs":[{"name":"occupiedentry"},{"name":"value"}],"output":{"name":"value"}}],[11,"remove","","Move the entry's value out of the map, consuming the entry.",4,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"value"}}],[11,"insert","","Set the entry's value and return a mutable reference to it.",5,{"inputs":[{"name":"vacantentry"},{"name":"value"}],"output":{"name":"value"}}]],"paths":[[4,"Entry"],[3,"Box"],[8,"Key"],[3,"TypeMap"],[3,"OccupiedEntry"],[3,"VacantEntry"]]};
searchIndex['unicode_bidi'] = {"items":[[0,"","unicode_bidi","This crate implements the [Unicode Bidirectional Algorithm][tr9] for display of mixed\nright-to-left and left-to-right text.  It is written in safe Rust, compatible with the\ncurrent stable release.",null,null],[3,"BidiInfo","","Output of `process_text`",null,null],[12,"classes","","The BidiClass of the character at each byte in the text.",0,null],[12,"levels","","The directional embedding level of each byte in the text.",0,null],[12,"paragraphs","","The boundaries and paragraph embedding level of each paragraph within the text.",0,null],[3,"ParagraphInfo","","Info about a single paragraph",null,null],[12,"range","","The paragraphs boundaries within the text, as byte indices.",1,null],[12,"level","","The paragraph embedding level. http://www.unicode.org/reports/tr9/#BD4",1,null],[3,"InitialProperties","","Output of `initial_scan`",null,null],[12,"initial_classes","","The BidiClass of the character at each byte in the text.\nIf a character is multiple bytes, its class will appear multiple times in the vector.",2,null],[12,"paragraphs","","The boundaries and level of each paragraph within the text.",2,null],[5,"process_text","","Determine the bidirectional embedding levels for a single paragraph.",null,{"inputs":[{"name":"str"},{"name":"option"}],"output":{"name":"bidiinfo"}}],[5,"is_ltr","","Even embedding levels are left-to-right.",null,{"inputs":[{"name":"u8"}],"output":{"name":"bool"}}],[5,"is_rtl","","Odd levels are right-to-left.",null,{"inputs":[{"name":"u8"}],"output":{"name":"bool"}}],[5,"reorder_line","","Re-order a line based on resolved levels.",null,null],[5,"visual_runs","","Find the level runs within a line and return them in visual order.",null,null],[5,"initial_scan","","Find the paragraphs and BidiClasses in a string of text.",null,{"inputs":[{"name":"str"},{"name":"option"}],"output":{"name":"initialproperties"}}],[0,"tables","","",null,null],[4,"BidiClass","unicode_bidi::tables","Represents the Unicode character property **Bidi_Class**, also known as\nthe *bidirectional character type*.",null,null],[13,"AL","","",3,null],[13,"AN","","",3,null],[13,"B","","",3,null],[13,"BN","","",3,null],[13,"CS","","",3,null],[13,"EN","","",3,null],[13,"ES","","",3,null],[13,"ET","","",3,null],[13,"FSI","","",3,null],[13,"L","","",3,null],[13,"LRE","","",3,null],[13,"LRI","","",3,null],[13,"LRO","","",3,null],[13,"NSM","","",3,null],[13,"ON","","",3,null],[13,"PDF","","",3,null],[13,"PDI","","",3,null],[13,"R","","",3,null],[13,"RLE","","",3,null],[13,"RLI","","",3,null],[13,"RLO","","",3,null],[13,"S","","",3,null],[13,"WS","","",3,null],[5,"bidi_class","","Find the BidiClass of a single char.",null,{"inputs":[{"name":"char"}],"output":{"name":"bidiclass"}}],[17,"UNICODE_VERSION","","The version of [Unicode](http://www.unicode.org/)\nthat the `bidi_class` function is based on.",null,null],[11,"eq","","",3,{"inputs":[{"name":"bidiclass"},{"name":"bidiclass"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"bidiclass"},{"name":"bidiclass"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"bidiclass"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"bidiclass"}],"output":{"name":"bidiclass"}}],[6,"LevelRun","unicode_bidi","A maximal substring of characters with the same embedding level.",null,null],[11,"eq","","",0,{"inputs":[{"name":"bidiinfo"},{"name":"bidiinfo"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"bidiinfo"},{"name":"bidiinfo"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"bidiinfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"paragraphinfo"},{"name":"paragraphinfo"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"paragraphinfo"},{"name":"paragraphinfo"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"paragraphinfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"initialproperties"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"initialproperties"},{"name":"initialproperties"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"initialproperties"},{"name":"initialproperties"}],"output":{"name":"bool"}}]],"paths":[[3,"BidiInfo"],[3,"ParagraphInfo"],[3,"InitialProperties"],[4,"BidiClass"]]};
searchIndex['unsafe_any'] = {"items":[[0,"","unsafe_any","Traits for unsafe downcasting from trait objects to & or &mut references of\nconcrete types. These should only be used if you are absolutely certain of the\ntype of the data in said trait object - there be dragons etc.",null,null],[8,"UnsafeAny","","A trait providing unchecked downcasting to its contents when stored\nin a trait object.",null,null],[8,"UnsafeAnyExt","","An extension trait for unchecked downcasting of trait objects.",null,null],[11,"downcast_ref_unchecked","","Returns a reference to the contained value, assuming that it is of type `T`.",0,{"inputs":[{"name":"unsafeanyext"}],"output":{"name":"t"}}],[11,"downcast_mut_unchecked","","Returns a mutable reference to the contained value, assuming that it is of type `T`.",0,{"inputs":[{"name":"unsafeanyext"}],"output":{"name":"t"}}],[11,"downcast_unchecked","","Returns a the contained value, assuming that it is of type `T`.",0,{"inputs":[{"name":"unsafeanyext"}],"output":{"name":"box"}}],[11,"downcast_ref_unchecked","","Returns a reference to the contained value, assuming that it is of type `T`.",1,{"inputs":[{"name":"unsafeany"}],"output":{"name":"t"}}],[11,"downcast_mut_unchecked","","Returns a mutable reference to the contained value, assuming that it is of type `T`.",1,{"inputs":[{"name":"unsafeany"}],"output":{"name":"t"}}],[11,"downcast_unchecked","","Returns a the contained value, assuming that it is of type `T`.",1,{"inputs":[{"name":"unsafeany"}],"output":{"name":"box"}}]],"paths":[[8,"UnsafeAnyExt"],[8,"UnsafeAny"]]};
searchIndex['quick_error'] = {"items":[[0,"","quick_error","A macro which makes errors easy to write",null,null],[14,"quick_error!","","Main macro that does all the work",null,null]],"paths":[]};
searchIndex['unicase'] = {"items":[[0,"","unicase","# Case",null,null],[3,"UniCase","","Case Insensitive wrapper of strings.",null,null],[11,"fmt","","",0,{"inputs":[{"name":"unicase"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"unicase"}],"output":{"name":"unicase"}}],[11,"deref","","",0,{"inputs":[{"name":"unicase"}],"output":{"name":"s"}}],[11,"deref_mut","","",0,{"inputs":[{"name":"unicase"}],"output":{"name":"s"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"unicase"},{"name":"self"}],"output":{"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"unicase"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"as_ref","","",0,{"inputs":[{"name":"unicase"}],"output":{"name":"str"}}],[11,"fmt","","",0,{"inputs":[{"name":"unicase"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"unicase"},{"name":"s2"}],"output":{"name":"bool"}}],[11,"from_str","","",0,{"inputs":[{"name":"unicase"},{"name":"str"}],"output":{"name":"result"}}],[11,"hash","","",0,{"inputs":[{"name":"unicase"},{"name":"h"}],"output":null}],[11,"from","","",0,{"inputs":[{"name":"unicase"},{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"unicase"},{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"unicase"},{"name":"string"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"unicase"},{"name":"string"}],"output":{"name":"self"}}],[11,"into","","",0,{"inputs":[{"name":"unicase"}],"output":{"name":"str"}}],[11,"into","","",0,{"inputs":[{"name":"unicase"}],"output":{"name":"string"}}]],"paths":[[3,"UniCase"]]};
searchIndex['matches'] = {"items":[[0,"","matches","",null,null],[14,"matches!","","",null,null],[14,"_tt_as_expr_hack!","","Work around \"error: unexpected token: `an interpolated tt`\", whatever that means.",null,null]],"paths":[]};
searchIndex['conduit_mime_types'] = {"items":[[0,"","conduit_mime_types","",null,null],[3,"Types","","",null,null],[11,"eq","","",0,{"inputs":[{"name":"types"},{"name":"types"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"types"},{"name":"types"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"types"}],"output":{"name":"types"}}],[11,"fmt","","",0,{"inputs":[{"name":"types"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",0,{"inputs":[{"name":"types"}],"output":{"name":"result"}}],[11,"get_extension","","",0,{"inputs":[{"name":"types"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_mime_type","","",0,{"inputs":[{"name":"types"},{"name":"str"}],"output":{"name":"option"}}],[11,"mime_for_path","","",0,{"inputs":[{"name":"types"},{"name":"path"}],"output":{"name":"str"}}]],"paths":[[3,"Types"]]};
searchIndex['regex_syntax'] = {"items":[[0,"","regex_syntax","This crate provides a regular expression parser and an abstract syntax for\nregular expressions. The abstract syntax is defined by the `Expr` type. The\nconcrete syntax is enumerated in the\n[`regex`](../regex/index.html#syntax)\ncrate documentation.",null,null],[3,"Literals","","A set of literal byte strings extracted from a regular expression.",null,null],[3,"Lit","","A single member of a set of literals extracted from a regular expression.",null,null],[3,"CharClass","","A character class.",null,null],[3,"ClassRange","","A single inclusive range in a character class.",null,null],[12,"start","","The start character of the range.",0,null],[12,"end","","The end character of the range.",0,null],[3,"ByteClass","","A byte class for byte ranges only.",null,null],[3,"ByteRange","","A single inclusive range in a byte class.",null,null],[12,"start","","The start byte of the range.",1,null],[12,"end","","The end byte of the range.",1,null],[3,"ExprBuilder","","A builder for configuring regular expression parsing.",null,null],[3,"Error","","A parse error.",null,null],[4,"Expr","","A regular expression abstract syntax tree.",null,null],[13,"Empty","","An empty regex (which never matches any text).",2,null],[13,"Literal","","A sequence of one or more literal characters to be matched.",2,null],[12,"chars","regex_syntax::Expr","The characters.",2,null],[12,"casei","","Whether to match case insensitively.",2,null],[13,"LiteralBytes","regex_syntax","A sequence of one or more literal bytes to be matched.",2,null],[12,"bytes","regex_syntax::Expr","The bytes.",2,null],[12,"casei","","Whether to match case insensitively.",2,null],[13,"AnyChar","regex_syntax","Match any character.",2,null],[13,"AnyCharNoNL","","Match any character, excluding new line (`0xA`).",2,null],[13,"AnyByte","","Match any byte.",2,null],[13,"AnyByteNoNL","","Match any byte, excluding new line (`0xA`).",2,null],[13,"Class","","A character class.",2,null],[13,"ClassBytes","","A character class with byte ranges only.",2,null],[13,"StartLine","","Match the start of a line or beginning of input.",2,null],[13,"EndLine","","Match the end of a line or end of input.",2,null],[13,"StartText","","Match the beginning of input.",2,null],[13,"EndText","","Match the end of input.",2,null],[13,"WordBoundary","","Match a word boundary (word character on one side and a non-word\ncharacter on the other).",2,null],[13,"NotWordBoundary","","Match a position that is not a word boundary (word or non-word\ncharacters on both sides).",2,null],[13,"WordBoundaryAscii","","Match an ASCII word boundary.",2,null],[13,"NotWordBoundaryAscii","","Match a position that is not an ASCII word boundary.",2,null],[13,"Group","","A group, possibly non-capturing.",2,null],[12,"e","regex_syntax::Expr","The expression inside the group.",2,null],[12,"i","","The capture index (starting at `1`) only for capturing groups.",2,null],[12,"name","","The capture name, only for capturing named groups.",2,null],[13,"Repeat","regex_syntax","A repeat operator (`?`, `*`, `+` or `{m,n}`).",2,null],[12,"e","regex_syntax::Expr","The expression to be repeated. Limited to literals, `.`, classes\nor grouped expressions.",2,null],[12,"r","","The type of repeat operator used.",2,null],[12,"greedy","","Whether the repeat is greedy (match the most) or not (match the\nleast).",2,null],[13,"Concat","regex_syntax","A concatenation of expressions. Must be matched one after the other.",2,null],[13,"Alternate","","An alternation of expressions. Only one must match.",2,null],[4,"Repeater","","The type of a repeat operator expression.",null,null],[13,"ZeroOrOne","","Match zero or one (`?`).",3,null],[13,"ZeroOrMore","","Match zero or more (`*`).",3,null],[13,"OneOrMore","","Match one or more (`+`).",3,null],[13,"Range","","Match for at least `min` and at most `max` (`{m,n}`).",3,null],[12,"min","regex_syntax::Repeater","Lower bound on the number of matches.",3,null],[12,"max","","Optional upper bound on the number of matches.",3,null],[4,"ErrorKind","regex_syntax","The specific type of parse error that can occur.",null,null],[13,"DoubleFlagNegation","","A negation symbol is used twice in flag settings.\ne.g., `(?-i-s)`.",4,null],[13,"DuplicateCaptureName","","The same capture name was used more than once.\ne.g., `(?P<a>.)(?P<a>.)`.",4,null],[13,"EmptyAlternate","","An alternate is empty. e.g., `(|a)`.",4,null],[13,"EmptyCaptureName","","A capture group name is empty. e.g., `(?P<>a)`.",4,null],[13,"EmptyFlagNegation","","A negation symbol was not proceded by any flags. e.g., `(?i-)`.",4,null],[13,"EmptyGroup","","A group is empty. e.g., `()`.",4,null],[13,"InvalidBase10","","An invalid number was used in a counted repetition. e.g., `a{b}`.",4,null],[13,"InvalidBase16","","An invalid hexadecimal number was used in an escape sequence.\ne.g., `\\xAG`.",4,null],[13,"InvalidCaptureName","","An invalid capture name was used. e.g., `(?P<0a>b)`.",4,null],[13,"InvalidClassRange","","An invalid class range was givien. Specifically, when the start of the\nrange is greater than the end. e.g., `[z-a]`.",4,null],[12,"start","regex_syntax::ErrorKind","The first character specified in the range.",4,null],[12,"end","","The second character specified in the range.",4,null],[13,"InvalidClassEscape","regex_syntax","An escape sequence was used in a character class where it is not\nallowed. e.g., `[a-\\pN]` or `[\\A]`.",4,null],[13,"InvalidRepeatRange","","An invalid counted repetition min/max was given. e.g., `a{2,1}`.",4,null],[12,"min","regex_syntax::ErrorKind","The first number specified in the repetition.",4,null],[12,"max","","The second number specified in the repetition.",4,null],[13,"InvalidScalarValue","regex_syntax","An invalid Unicode scalar value was used in a long hexadecimal\nsequence. e.g., `\\x{D800}`.",4,null],[13,"MissingBase10","","An empty counted repetition operator. e.g., `a{}`.",4,null],[13,"RepeaterExpectsExpr","","A repetition operator was not applied to an expression. e.g., `*`.",4,null],[13,"RepeaterUnexpectedExpr","","A repetition operator was applied to an expression that cannot be\nrepeated. e.g., `a+*` or `a|*`.",4,null],[13,"UnclosedCaptureName","","A capture group name that is never closed. e.g., `(?P<a`.",4,null],[13,"UnclosedHex","","An unclosed hexadecimal literal. e.g., `\\x{a`.",4,null],[13,"UnclosedParen","","An unclosed parenthesis. e.g., `(a`.",4,null],[13,"UnclosedRepeat","","An unclosed counted repetition operator. e.g., `a{2`.",4,null],[13,"UnclosedUnicodeName","","An unclosed named Unicode class. e.g., `\\p{Yi`.",4,null],[13,"UnexpectedClassEof","","Saw end of regex before class was closed. e.g., `[a`.",4,null],[13,"UnexpectedEscapeEof","","Saw end of regex before escape sequence was closed. e.g., `\\`.",4,null],[13,"UnexpectedFlagEof","","Saw end of regex before flags were closed. e.g., `(?i`.",4,null],[13,"UnexpectedTwoDigitHexEof","","Saw end of regex before two hexadecimal digits were seen. e.g., `\\xA`.",4,null],[13,"UnopenedParen","","Unopened parenthesis. e.g., `)`.",4,null],[13,"UnrecognizedEscape","","Unrecognized escape sequence. e.g., `\\q`.",4,null],[13,"UnrecognizedFlag","","Unrecognized flag. e.g., `(?a)`.",4,null],[13,"UnrecognizedUnicodeClass","","Unrecognized named Unicode class. e.g., `\\p{Foo}`.",4,null],[13,"StackExhausted","","Indicates that the regex uses too much nesting.",4,null],[13,"FlagNotAllowed","","A disallowed flag was found (e.g., `b`).",4,null],[13,"UnicodeNotAllowed","","A Unicode class was used when the bytes (`b`) flag was enabled.",4,null],[5,"quote","","Escapes all regular expression meta characters in `text`.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[11,"eq","","",5,{"inputs":[{"name":"literals"},{"name":"literals"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"literals"},{"name":"literals"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"literals"}],"output":{"name":"literals"}}],[11,"cmp","","",6,{"inputs":[{"name":"lit"},{"name":"lit"}],"output":{"name":"ordering"}}],[11,"clone","","",6,{"inputs":[{"name":"lit"}],"output":{"name":"lit"}}],[11,"empty","","Returns a new empty set of literals using default limits.",5,{"inputs":[{"name":"literals"}],"output":{"name":"literals"}}],[11,"limit_size","","Get the approximate size limit (in bytes) of this set.",5,{"inputs":[{"name":"literals"}],"output":{"name":"usize"}}],[11,"set_limit_size","","Set the approximate size limit (in bytes) of this set.",5,{"inputs":[{"name":"literals"},{"name":"usize"}],"output":{"name":"literals"}}],[11,"limit_class","","Get the character class size limit for this set.",5,{"inputs":[{"name":"literals"}],"output":{"name":"usize"}}],[11,"set_limit_class","","Limits the size of character(or byte) classes considered.",5,{"inputs":[{"name":"literals"},{"name":"usize"}],"output":{"name":"literals"}}],[11,"literals","","Returns the set of literals as a slice. Its order is unspecified.",5,null],[11,"all_complete","","Returns true if all members in this set are complete.",5,{"inputs":[{"name":"literals"}],"output":{"name":"bool"}}],[11,"any_complete","","Returns true if any member in this set is complete.",5,{"inputs":[{"name":"literals"}],"output":{"name":"bool"}}],[11,"contains_empty","","Returns true if this set contains an empty literal.",5,{"inputs":[{"name":"literals"}],"output":{"name":"bool"}}],[11,"is_empty","","Returns true if this set is empty or if all of its members is empty.",5,{"inputs":[{"name":"literals"}],"output":{"name":"bool"}}],[11,"to_empty","","Returns a new empty set of literals using this set's limits.",5,{"inputs":[{"name":"literals"}],"output":{"name":"literals"}}],[11,"longest_common_prefix","","Returns the longest common prefix of all members in this set.",5,null],[11,"longest_common_suffix","","Returns the longest common suffix of all members in this set.",5,null],[11,"unambiguous_prefixes","","Returns a new set of prefixes of this set of literals that are\nguaranteed to be unambiguous.",5,{"inputs":[{"name":"literals"}],"output":{"name":"literals"}}],[11,"unambiguous_suffixes","","Returns a new set of suffixes of this set of literals that are\nguaranteed to be unambiguous.",5,{"inputs":[{"name":"literals"}],"output":{"name":"literals"}}],[11,"union_prefixes","","Unions the prefixes from the given expression to this set.",5,{"inputs":[{"name":"literals"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"union_suffixes","","Unions the suffixes from the given expression to this set.",5,{"inputs":[{"name":"literals"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"union","","Unions this set with another set.",5,{"inputs":[{"name":"literals"},{"name":"literals"}],"output":{"name":"bool"}}],[11,"cross_product","","Extends this set with another set.",5,{"inputs":[{"name":"literals"},{"name":"literals"}],"output":{"name":"bool"}}],[11,"cross_add","","Extends each literal in this set with the bytes given.",5,null],[11,"add","","Adds the given literal to this set.",5,{"inputs":[{"name":"literals"},{"name":"lit"}],"output":{"name":"bool"}}],[11,"add_char_class","","Extends each literal in this set with the character class given.",5,{"inputs":[{"name":"literals"},{"name":"charclass"}],"output":{"name":"bool"}}],[11,"add_byte_class","","Extends each literal in this set with the byte class given.",5,{"inputs":[{"name":"literals"},{"name":"byteclass"}],"output":{"name":"bool"}}],[11,"cut","","Cuts every member of this set. When a member is cut, it can never\nbe extended.",5,{"inputs":[{"name":"literals"}],"output":null}],[11,"reverse","","Reverses all members in place.",5,{"inputs":[{"name":"literals"}],"output":null}],[11,"clear","","Clears this set of all members.",5,{"inputs":[{"name":"literals"}],"output":null}],[11,"fmt","","",5,{"inputs":[{"name":"literals"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Returns a new complete literal with the bytes given.",6,{"inputs":[{"name":"lit"},{"name":"vec"}],"output":{"name":"lit"}}],[11,"empty","","Returns a new complete empty literal.",6,{"inputs":[{"name":"lit"}],"output":{"name":"lit"}}],[11,"is_cut","","Returns true if this literal was \"cut.\"",6,{"inputs":[{"name":"lit"}],"output":{"name":"bool"}}],[11,"cut","","Cuts this literal.",6,{"inputs":[{"name":"lit"}],"output":null}],[11,"eq","","",6,{"inputs":[{"name":"lit"},{"name":"lit"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"lit"},{"name":"lit"}],"output":{"name":"option"}}],[11,"fmt","","",6,{"inputs":[{"name":"lit"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",6,null],[11,"new","collections::vec","Constructs a new, empty `Vec<T>`.",7,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"with_capacity","","Constructs a new, empty `Vec<T>` with the specified capacity.",7,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"from_raw_parts","","Creates a `Vec<T>` directly from the raw components of another vector.",7,null],[11,"capacity","","Returns the number of elements the vector can hold without\nreallocating.",7,{"inputs":[{"name":"vec"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the given `Vec<T>`. The collection may reserve more space to avoid\nfrequent reallocations.",7,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to\nbe inserted in the given `Vec<T>`. Does nothing if the capacity is already\nsufficient.",7,null],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",7,null],[11,"into_boxed_slice","","Converts the vector into Box<[T]>.",7,{"inputs":[{"name":"vec"}],"output":{"name":"box"}}],[11,"truncate","","Shorten a vector to be `len` elements long, dropping excess elements.",7,null],[11,"as_slice","","Extracts a slice containing the entire vector.",7,null],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",7,null],[11,"set_len","","Sets the length of a vector.",7,null],[11,"swap_remove","","Removes an element from anywhere in the vector and return it, replacing\nit with the last element.",7,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"insert","","Inserts an element at position `index` within the vector, shifting all\nelements after position `i` one position to the right.",7,null],[11,"remove","","Removes and returns the element at position `index` within the vector,\nshifting all elements after position `index` one position to the left.",7,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"retain","","Retains only the elements specified by the predicate.",7,null],[11,"push","","Appends an element to the back of a collection.",7,null],[11,"pop","","Removes the last element from a vector and returns it, or `None` if it\nis empty.",7,{"inputs":[{"name":"vec"}],"output":{"name":"option"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",7,null],[11,"drain","","Create a draining iterator that removes the specified range in the vector\nand yields the removed items from start to end. The element range is\nremoved even if the iterator is not consumed until the end.",7,{"inputs":[{"name":"vec"},{"name":"r"}],"output":{"name":"drain"}}],[11,"clear","","Clears the vector, removing all values.",7,null],[11,"len","","Returns the number of elements in the vector.",7,{"inputs":[{"name":"vec"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the vector contains no elements.",7,{"inputs":[{"name":"vec"}],"output":{"name":"bool"}}],[11,"split_off","","Splits the collection into two at the given index.",7,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"resize","","Resizes the `Vec` in-place so that `len()` is equal to `new_len`.",7,null],[11,"push_all","","",7,null],[11,"extend_from_slice","","Appends all elements in a slice to the `Vec`.",7,null],[11,"dedup","","Removes consecutive repeated elements in the vector.",7,null],[11,"clone","collections::binary_heap","",8,{"inputs":[{"name":"binaryheap"}],"output":{"name":"binaryheap"}}],[11,"clone_from","","",8,null],[11,"default","","",8,{"inputs":[{"name":"binaryheap"}],"output":{"name":"binaryheap"}}],[11,"fmt","","",8,{"inputs":[{"name":"binaryheap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates an empty `BinaryHeap` as a max-heap.",8,{"inputs":[{"name":"binaryheap"}],"output":{"name":"binaryheap"}}],[11,"with_capacity","","Creates an empty `BinaryHeap` with a specific capacity.\nThis preallocates enough memory for `capacity` elements,\nso that the `BinaryHeap` does not have to be reallocated\nuntil it contains at least that many values.",8,{"inputs":[{"name":"binaryheap"},{"name":"usize"}],"output":{"name":"binaryheap"}}],[11,"from_vec","","Creates a `BinaryHeap` from a vector. This is sometimes called\n`heapifying` the vector.",8,{"inputs":[{"name":"binaryheap"},{"name":"vec"}],"output":{"name":"binaryheap"}}],[11,"iter","","Returns an iterator visiting all values in the underlying vector, in\narbitrary order.",8,{"inputs":[{"name":"binaryheap"}],"output":{"name":"iter"}}],[11,"peek","","Returns the greatest item in the binary heap, or `None` if it is empty.",8,{"inputs":[{"name":"binaryheap"}],"output":{"name":"option"}}],[11,"capacity","","Returns the number of elements the binary heap can hold without reallocating.",8,{"inputs":[{"name":"binaryheap"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `BinaryHeap`. Does nothing if the capacity is already sufficient.",8,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the\n`BinaryHeap`. The collection may reserve more space to avoid frequent reallocations.",8,null],[11,"shrink_to_fit","","Discards as much additional capacity as possible.",8,null],[11,"pop","","Removes the greatest item from the binary heap and returns it, or `None` if it\nis empty.",8,{"inputs":[{"name":"binaryheap"}],"output":{"name":"option"}}],[11,"push","","Pushes an item onto the binary heap.",8,null],[11,"push_pop","","Pushes an item onto the binary heap, then pops the greatest item off the queue in\nan optimized fashion.",8,{"inputs":[{"name":"binaryheap"},{"name":"t"}],"output":{"name":"t"}}],[11,"replace","","Pops the greatest item off the binary heap, then pushes an item onto the queue in\nan optimized fashion. The push is done regardless of whether the binary heap\nwas empty.",8,{"inputs":[{"name":"binaryheap"},{"name":"t"}],"output":{"name":"option"}}],[11,"into_vec","","Consumes the `BinaryHeap` and returns the underlying vector\nin arbitrary order.",8,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"into_sorted_vec","","Consumes the `BinaryHeap` and returns a vector in sorted\n(ascending) order.",8,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"len","","Returns the length of the binary heap.",8,{"inputs":[{"name":"binaryheap"}],"output":{"name":"usize"}}],[11,"is_empty","","Checks if the binary heap is empty.",8,{"inputs":[{"name":"binaryheap"}],"output":{"name":"bool"}}],[11,"drain","","Clears the binary heap, returning an iterator over the removed elements.",8,{"inputs":[{"name":"binaryheap"}],"output":{"name":"drain"}}],[11,"clear","","Drops all items from the binary heap.",8,null],[11,"drop","","",9,null],[11,"clone","","",10,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",10,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",10,null],[11,"next_back","","",10,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",11,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",11,null],[11,"next_back","","",11,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"next","","",12,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",12,null],[11,"next_back","","",12,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"from","","",8,{"inputs":[{"name":"binaryheap"},{"name":"vec"}],"output":{"name":"binaryheap"}}],[11,"from","collections::vec","",7,{"inputs":[{"name":"vec"},{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"from_iter","collections::binary_heap","",8,{"inputs":[{"name":"binaryheap"},{"name":"i"}],"output":{"name":"binaryheap"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe binary heap in arbitrary order. The binary heap cannot be used\nafter calling this.",8,{"inputs":[{"name":"binaryheap"}],"output":{"name":"intoiter"}}],[11,"extend","","",8,null],[11,"extend","","",8,null],[11,"next","collections::btree::node","",13,{"inputs":[{"name":"rawitems"}],"output":{"name":"option"}}],[11,"next_back","","",13,{"inputs":[{"name":"rawitems"}],"output":{"name":"option"}}],[11,"drop","","",13,null],[11,"drop","","",14,null],[11,"as_slices","","",14,null],[11,"as_slices_mut","","",14,null],[11,"as_slices_internal","","",14,{"inputs":[{"name":"node"}],"output":{"name":"nodeslice"}}],[11,"as_slices_internal_mut","","",14,{"inputs":[{"name":"node"}],"output":{"name":"mutnodeslice"}}],[11,"keys","","",14,null],[11,"keys_mut","","",14,null],[11,"vals","","",14,null],[11,"vals_mut","","",14,null],[11,"edges","","",14,null],[11,"edges_mut","","",14,null],[11,"clone","","",14,{"inputs":[{"name":"node"}],"output":{"name":"node"}}],[11,"clone","","",15,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"search","","Searches for the given key in the node. If it finds an exact match,\n`Found` will be yielded with the matching index. If it doesn't find an exact match,\n`GoDown` will be yielded with the index of the subtree the key must lie in.",14,{"inputs":[{"name":"node"},{"name":"noderef"},{"name":"q"}],"output":{"name":"searchresult"}}],[11,"make_leaf_root","","Make a leaf root from scratch",14,{"inputs":[{"name":"node"},{"name":"usize"}],"output":{"name":"node"}}],[11,"make_internal_root","","Make an internal root and swap it with an old root",14,null],[11,"len","","How many key-value pairs the node contains",14,{"inputs":[{"name":"node"}],"output":{"name":"usize"}}],[11,"is_empty","","Does the node not contain any key-value pairs",14,{"inputs":[{"name":"node"}],"output":{"name":"bool"}}],[11,"capacity","","How many key-value pairs the node can fit",14,{"inputs":[{"name":"node"}],"output":{"name":"usize"}}],[11,"is_leaf","","If the node has any children",14,{"inputs":[{"name":"node"}],"output":{"name":"bool"}}],[11,"is_underfull","","if the node has too few elements",14,{"inputs":[{"name":"node"}],"output":{"name":"bool"}}],[11,"is_full","","if the node cannot fit any more elements",14,{"inputs":[{"name":"node"}],"output":{"name":"bool"}}],[11,"node","","Returns a reference to the node that contains the pointed-to edge or key/value pair. This\nis very different from `edge` and `edge_mut` because those return children of the node\nreturned by `node`.",15,{"inputs":[{"name":"handle"}],"output":{"name":"node"}}],[11,"as_raw","","Converts a handle into one that stores the same information using a raw pointer. This can\nbe useful in conjunction with `from_raw` when the type system is insufficient for\ndetermining the lifetimes of the nodes.",15,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"from_raw","","Converts from a handle stored with a raw pointer, which isn't directly usable, to a handle\nstored with a reference. This is an unsafe inverse of `as_raw`, and together they allow\nunsafely extending the lifetime of the reference to the `Node`.",15,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"from_raw_mut","","Converts from a handle stored with a raw pointer, which isn't directly usable, to a handle\nstored with a mutable reference. This is an unsafe inverse of `as_raw`, and together they\nallow unsafely extending the lifetime of the reference to the `Node`.",15,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"into_edge","","Turns the handle into a reference to the edge it points at. This is necessary because the\nreturned pointer has a larger lifetime than what would be returned by `edge` or `edge_mut`,\nmaking it more suitable for moving down a chain of nodes.",15,{"inputs":[{"name":"handle"}],"output":{"name":"node"}}],[11,"into_edge_mut","","Turns the handle into a mutable reference to the edge it points at. This is necessary\nbecause the returned pointer has a larger lifetime than what would be returned by\n`edge_mut`, making it more suitable for moving down a chain of nodes.",15,{"inputs":[{"name":"handle"}],"output":{"name":"node"}}],[11,"force","","Figure out whether this handle is pointing to something in a leaf node or to something in\nan internal node, clarifying the type according to the result.",15,{"inputs":[{"name":"handle"}],"output":{"name":"forceresult"}}],[11,"insert_as_leaf","","Tries to insert this key-value pair at the given index in this leaf node\nIf the node is full, we have to split it.",15,null],[11,"edge_mut","","Returns a mutable reference to the edge pointed-to by this handle. This should not be\nconfused with `node`, which references the parent node of what is returned here.",15,{"inputs":[{"name":"handle"}],"output":{"name":"node"}}],[11,"insert_as_internal","","Tries to insert this key-value pair at the given index in this internal node\nIf the node is full, we have to split it.",15,{"inputs":[{"name":"handle"},{"name":"k"},{"name":"v"},{"name":"node"}],"output":{"name":"insertionresult"}}],[11,"handle_underflow","","Handle an underflow in this node's child. We favor handling \"to the left\" because we know\nwe're empty, but our neighbour can be full. Handling to the left means when we choose to\nsteal, we pop off the end of our neighbour (always fast) and \"unshift\" ourselves\n(always slow, but at least faster since we know we're half-empty).\nHandling \"to the right\" reverses these roles. Of course, we merge whenever possible\nbecause we want dense nodes, and merging is about equal work regardless of direction.",15,null],[11,"into_kv","","Turns the handle into references to the key and value it points at. This is necessary\nbecause the returned pointers have larger lifetimes than what would be returned by `key`\nor `val`.",15,null],[11,"into_kv_mut","","Turns the handle into mutable references to the key and value it points at. This is\nnecessary because the returned pointers have larger lifetimes than what would be returned\nby `key_mut` or `val_mut`.",15,null],[11,"into_left_edge","","Convert this handle into one pointing at the edge immediately to the left of the key/value\npair pointed-to by this handle. This is useful because it returns a reference with larger\nlifetime than `left_edge`.",15,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"key_mut","","Returns a mutable reference to the key pointed-to by this handle. This doesn't return a\nreference with a lifetime as large as `into_kv_mut`, but it also does not consume the\nhandle.",15,{"inputs":[{"name":"handle"}],"output":{"name":"k"}}],[11,"val_mut","","Returns a mutable reference to the value pointed-to by this handle. This doesn't return a\nreference with a lifetime as large as `into_kv_mut`, but it also does not consume the\nhandle.",15,{"inputs":[{"name":"handle"}],"output":{"name":"v"}}],[11,"left_edge","","Gets the handle pointing to the edge immediately to the left of the key/value pair pointed\nto by this handle.",15,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"right_edge","","Gets the handle pointing to the edge immediately to the right of the key/value pair pointed\nto by this handle.",15,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"remove_as_leaf","","Removes the key/value pair at the handle's location.",15,null],[11,"kv_handle","","Returns the mutable handle pointing to the key/value pair at a given index.",14,{"inputs":[{"name":"node"},{"name":"usize"}],"output":{"name":"handle"}}],[11,"iter","","",14,{"inputs":[{"name":"node"}],"output":{"name":"abstraversal"}}],[11,"iter_mut","","",14,{"inputs":[{"name":"node"}],"output":{"name":"abstraversal"}}],[11,"into_iter","","",14,{"inputs":[{"name":"node"}],"output":{"name":"abstraversal"}}],[11,"hoist_lone_child","","When a node has no keys or values and only a single edge, extract that edge.",14,null],[11,"clone","","",16,{"inputs":[{"name":"elemsandedges"}],"output":{"name":"elemsandedges"}}],[11,"next_kv","","",16,{"inputs":[{"name":"elemsandedges"}],"output":{"name":"option"}}],[11,"next_kv_back","","",16,{"inputs":[{"name":"elemsandedges"}],"output":{"name":"option"}}],[11,"next_edge","","",16,{"inputs":[{"name":"elemsandedges"}],"output":{"name":"option"}}],[11,"next_edge_back","","",16,{"inputs":[{"name":"elemsandedges"}],"output":{"name":"option"}}],[11,"next_kv","","",17,{"inputs":[{"name":"movetraversalimpl"}],"output":{"name":"option"}}],[11,"next_kv_back","","",17,{"inputs":[{"name":"movetraversalimpl"}],"output":{"name":"option"}}],[11,"next_edge","","",17,{"inputs":[{"name":"movetraversalimpl"}],"output":{"name":"option"}}],[11,"next_edge_back","","",17,{"inputs":[{"name":"movetraversalimpl"}],"output":{"name":"option"}}],[11,"drop","","",17,null],[11,"clone","","",18,{"inputs":[{"name":"abstraversal"}],"output":{"name":"abstraversal"}}],[11,"next","","",18,{"inputs":[{"name":"abstraversal"}],"output":{"name":"option"}}],[11,"next_back","","",18,{"inputs":[{"name":"abstraversal"}],"output":{"name":"option"}}],[11,"next_edge_item","","Advances the iterator and returns the item if it's an edge. Returns None\nand does nothing if the first item is not an edge.",18,{"inputs":[{"name":"abstraversal"}],"output":{"name":"option"}}],[11,"next_edge_item_back","","Advances the iterator and returns the item if it's an edge. Returns None\nand does nothing if the last item is not an edge.",18,{"inputs":[{"name":"abstraversal"}],"output":{"name":"option"}}],[11,"next_kv_item","","Advances the iterator and returns the item if it's a key-value pair. Returns None\nand does nothing if the first item is not a key-value pair.",18,{"inputs":[{"name":"abstraversal"}],"output":{"name":"option"}}],[11,"next_kv_item_back","","Advances the iterator and returns the item if it's a key-value pair. Returns None\nand does nothing if the last item is not a key-value pair.",18,{"inputs":[{"name":"abstraversal"}],"output":{"name":"option"}}],[11,"slice_from","","Returns a sub-slice with elements starting with `min_key`.",19,{"inputs":[{"name":"nodeslice"},{"name":"q"}],"output":{"name":"nodeslice"}}],[11,"slice_to","","Returns a sub-slice with elements up to and including `max_key`.",19,{"inputs":[{"name":"nodeslice"},{"name":"q"}],"output":{"name":"nodeslice"}}],[11,"iter","","Returns an iterator over key/value pairs and edges in a slice.",19,{"inputs":[{"name":"nodeslice"}],"output":{"name":"abstraversal"}}],[11,"slice_from","","Returns a sub-slice with elements starting with `min_key`.",20,{"inputs":[{"name":"mutnodeslice"},{"name":"q"}],"output":{"name":"mutnodeslice"}}],[11,"slice_to","","Returns a sub-slice with elements up to and including `max_key`.",20,{"inputs":[{"name":"mutnodeslice"},{"name":"q"}],"output":{"name":"mutnodeslice"}}],[11,"iter_mut","","Returns an iterator over key/value pairs and edges in a slice.",20,{"inputs":[{"name":"mutnodeslice"}],"output":{"name":"abstraversal"}}],[11,"clone","collections::btree::map","",21,{"inputs":[{"name":"btreemap"}],"output":{"name":"btreemap"}}],[11,"clone","","",22,{"inputs":[{"name":"absiter"}],"output":{"name":"absiter"}}],[11,"new","","Makes a new empty BTreeMap with a reasonable choice for B.",21,{"inputs":[{"name":"btreemap"}],"output":{"name":"btreemap"}}],[11,"with_b","","Makes a new empty BTreeMap with the given B.",21,{"inputs":[{"name":"btreemap"},{"name":"usize"}],"output":{"name":"btreemap"}}],[11,"clear","","Clears the map, removing all values.",21,null],[11,"get","","Returns a reference to the value corresponding to the key.",21,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",21,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",21,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair into the map.",21,{"inputs":[{"name":"btreemap"},{"name":"k"},{"name":"v"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",21,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"option"}}],[11,"into_iter","","Gets an owning iterator over the entries of the map.",21,{"inputs":[{"name":"btreemap"}],"output":{"name":"intoiter"}}],[11,"deref","collections::btree::map::stack","",23,{"inputs":[{"name":"idref"}],"output":{"name":"t"}}],[11,"deref_mut","","",23,{"inputs":[{"name":"idref"}],"output":{"name":"t"}}],[11,"new","","Creates a new PartialSearchStack from a BTreeMap by initializing the stack with the\nroot of the tree.",24,{"inputs":[{"name":"partialsearchstack"},{"name":"btreemap"}],"output":{"name":"partialsearchstack"}}],[11,"with","","Breaks up the stack into a `Pusher` and the next `Node`, allowing the given closure\nto interact with, search, and finally push the `Node` onto the stack. The passed in\nclosure must be polymorphic on the `'id` lifetime parameter, as this statically\nensures that only `Handle`s from the correct `Node` can be pushed.",24,{"inputs":[{"name":"partialsearchstack"},{"name":"f"}],"output":{"name":"t"}}],[11,"push","","Pushes the requested child of the stack's current top on top of the stack. If the child\nexists, then a new PartialSearchStack is yielded. Otherwise, a VacantSearchStack is\nyielded.",25,{"inputs":[{"name":"pusher"},{"name":"handle"}],"output":{"name":"partialsearchstack"}}],[11,"seal","","Converts the PartialSearchStack into a SearchStack.",25,{"inputs":[{"name":"pusher"},{"name":"handle"}],"output":{"name":"searchstack"}}],[11,"peek","","Gets a reference to the value the stack points to.",26,{"inputs":[{"name":"searchstack"}],"output":{"name":"v"}}],[11,"peek_mut","","Gets a mutable reference to the value the stack points to.",26,{"inputs":[{"name":"searchstack"}],"output":{"name":"v"}}],[11,"into_top","","Converts the stack into a mutable reference to the value it points to, with a lifetime\ntied to the original tree.",26,{"inputs":[{"name":"searchstack"}],"output":{"name":"v"}}],[11,"remove","","Removes the key and value in the top element of the stack, then handles underflows as\ndescribed in BTree's pop function.",26,null],[11,"insert","","Inserts the key and value into the top element in the stack, and if that node has to\nsplit recursively inserts the split contents into the next element stack until\nsplits stop.",26,{"inputs":[{"name":"searchstack"},{"name":"k"},{"name":"v"}],"output":{"name":"v"}}],[11,"from_iter","collections::btree::map","",21,{"inputs":[{"name":"btreemap"},{"name":"t"}],"output":{"name":"btreemap"}}],[11,"extend","","",21,null],[11,"extend","","",21,null],[11,"hash","","",21,null],[11,"default","","",21,{"inputs":[{"name":"btreemap"}],"output":{"name":"btreemap"}}],[11,"eq","","",21,{"inputs":[{"name":"btreemap"},{"name":"btreemap"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",21,{"inputs":[{"name":"btreemap"},{"name":"btreemap"}],"output":{"name":"option"}}],[11,"cmp","","",21,{"inputs":[{"name":"btreemap"},{"name":"btreemap"}],"output":{"name":"ordering"}}],[11,"fmt","","",21,{"inputs":[{"name":"btreemap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",21,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"v"}}],[11,"traverse","collections::btree::node","",18,{"inputs":[{"name":"abstraversal"},{"name":"node"}],"output":{"name":"abstraversal"}}],[11,"traverse","","",18,{"inputs":[{"name":"abstraversal"},{"name":"node"}],"output":{"name":"abstraversal"}}],[11,"traverse","","",18,{"inputs":[{"name":"abstraversal"},{"name":"node"}],"output":{"name":"abstraversal"}}],[11,"next","collections::btree::map","",22,{"inputs":[{"name":"absiter"}],"output":{"name":"option"}}],[11,"size_hint","","",22,null],[11,"next_back","","",22,{"inputs":[{"name":"absiter"}],"output":{"name":"option"}}],[11,"clone","","",27,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",27,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",27,null],[11,"next_back","","",27,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",28,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",28,null],[11,"next_back","","",28,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",29,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",29,null],[11,"next_back","","",29,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"clone","","",30,{"inputs":[{"name":"keys"}],"output":{"name":"keys"}}],[11,"next","","",30,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"size_hint","","",30,null],[11,"next_back","","",30,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"clone","","",31,{"inputs":[{"name":"values"}],"output":{"name":"values"}}],[11,"next","","",31,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"size_hint","","",31,null],[11,"next_back","","",31,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"clone","","",32,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"next","","",32,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next_back","","",32,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next","","",33,{"inputs":[{"name":"rangemut"}],"output":{"name":"option"}}],[11,"next_back","","",33,{"inputs":[{"name":"rangemut"}],"output":{"name":"option"}}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns\na mutable reference to the value in the entry.",34,{"inputs":[{"name":"entry"},{"name":"v"}],"output":{"name":"v"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty,\nand returns a mutable reference to the value in the entry.",34,{"inputs":[{"name":"entry"},{"name":"f"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the VacantEntry's key,\nand returns a mutable reference to it.",35,{"inputs":[{"name":"vacantentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"get","","Gets a reference to the value in the entry.",36,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",36,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"into_mut","","Converts the entry into a mutable reference to its value.",36,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the OccupiedEntry's key,\nand returns the entry's old value.",36,{"inputs":[{"name":"occupiedentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"remove","","Takes the value of the entry out of the map, and returns it.",36,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"iter","","Gets an iterator over the entries of the map.",21,{"inputs":[{"name":"btreemap"}],"output":{"name":"iter"}}],[11,"iter_mut","","Gets a mutable iterator over the entries of the map.",21,{"inputs":[{"name":"btreemap"}],"output":{"name":"itermut"}}],[11,"keys","","Gets an iterator over the keys of the map.",21,{"inputs":[{"name":"btreemap"}],"output":{"name":"keys"}}],[11,"values","","Gets an iterator over the values of the map.",21,{"inputs":[{"name":"btreemap"}],"output":{"name":"values"}}],[11,"len","","Returns the number of elements in the map.",21,{"inputs":[{"name":"btreemap"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",21,{"inputs":[{"name":"btreemap"}],"output":{"name":"bool"}}],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as \"negative\ninfinity\", and if max is `Unbounded`, then it will be treated as \"positive infinity\".\nThus range(Unbounded, Unbounded) will yield the whole collection.",21,{"inputs":[{"name":"btreemap"},{"name":"bound"},{"name":"bound"}],"output":{"name":"range"}}],[11,"range_mut","","Constructs a mutable double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as \"negative\ninfinity\", and if max is `Unbounded`, then it will be treated as \"positive infinity\".\nThus range(Unbounded, Unbounded) will yield the whole collection.",21,{"inputs":[{"name":"btreemap"},{"name":"bound"},{"name":"bound"}],"output":{"name":"rangemut"}}],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",21,{"inputs":[{"name":"btreemap"},{"name":"k"}],"output":{"name":"entry"}}],[11,"partial_cmp","collections::btree::set","",37,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"option"}}],[11,"lt","","",37,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"le","","",37,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"gt","","",37,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"ge","","",37,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"cmp","","",37,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"ordering"}}],[11,"eq","","",37,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"hash","","",37,null],[11,"clone","","",37,{"inputs":[{"name":"btreeset"}],"output":{"name":"btreeset"}}],[11,"new","","Makes a new BTreeSet with a reasonable choice of B.",37,{"inputs":[{"name":"btreeset"}],"output":{"name":"btreeset"}}],[11,"with_b","","Makes a new BTreeSet with the given B.",37,{"inputs":[{"name":"btreeset"},{"name":"usize"}],"output":{"name":"btreeset"}}],[11,"iter","","Gets an iterator over the BTreeSet's contents.",37,{"inputs":[{"name":"btreeset"}],"output":{"name":"iter"}}],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the set, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as \"negative\ninfinity\", and if max is `Unbounded`, then it will be treated as \"positive infinity\".\nThus range(Unbounded, Unbounded) will yield the whole collection.",37,{"inputs":[{"name":"btreeset"},{"name":"bound"},{"name":"bound"}],"output":{"name":"range"}}],[11,"difference","","Visits the values representing the difference, in ascending order.",37,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"difference"}}],[11,"symmetric_difference","","Visits the values representing the symmetric difference, in ascending order.",37,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"symmetricdifference"}}],[11,"intersection","","Visits the values representing the intersection, in ascending order.",37,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"intersection"}}],[11,"union","","Visits the values representing the union, in ascending order.",37,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"union"}}],[11,"len","","Returns the number of elements in the set.",37,{"inputs":[{"name":"btreeset"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the set contains no elements.",37,{"inputs":[{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"clear","","Clears the set, removing all values.",37,null],[11,"contains","","Returns `true` if the set contains a value.",37,{"inputs":[{"name":"btreeset"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get","","Returns a reference to the value in the set, if any, that is equal to the given value.",37,{"inputs":[{"name":"btreeset"},{"name":"q"}],"output":{"name":"option"}}],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",37,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns `true` if the set is a subset of another.",37,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns `true` if the set is a superset of another.",37,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"insert","","Adds a value to the set.",37,{"inputs":[{"name":"btreeset"},{"name":"t"}],"output":{"name":"bool"}}],[11,"replace","","Adds a value to the set, replacing the existing value, if any, that is equal to the given\none. Returns the replaced value.",37,{"inputs":[{"name":"btreeset"},{"name":"t"}],"output":{"name":"option"}}],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",37,{"inputs":[{"name":"btreeset"},{"name":"q"}],"output":{"name":"bool"}}],[11,"take","","Removes and returns the value in the set, if any, that is equal to the given one.",37,{"inputs":[{"name":"btreeset"},{"name":"q"}],"output":{"name":"option"}}],[11,"from_iter","","",37,{"inputs":[{"name":"btreeset"},{"name":"i"}],"output":{"name":"btreeset"}}],[11,"into_iter","","Gets an iterator for moving out the BtreeSet's contents.",37,{"inputs":[{"name":"btreeset"}],"output":{"name":"intoiter"}}],[11,"extend","","",37,null],[11,"extend","","",37,null],[11,"default","","",37,{"inputs":[{"name":"btreeset"}],"output":{"name":"btreeset"}}],[11,"fmt","","",37,{"inputs":[{"name":"btreeset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",38,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",38,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",38,null],[11,"next_back","","",38,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",39,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",39,null],[11,"next_back","","",39,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"clone","","",40,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"next","","",40,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next_back","","",40,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"clone","","",41,{"inputs":[{"name":"difference"}],"output":{"name":"difference"}}],[11,"next","","",41,{"inputs":[{"name":"difference"}],"output":{"name":"option"}}],[11,"clone","","",42,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"symmetricdifference"}}],[11,"next","","",42,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"option"}}],[11,"clone","","",43,{"inputs":[{"name":"intersection"}],"output":{"name":"intersection"}}],[11,"next","","",43,{"inputs":[{"name":"intersection"}],"output":{"name":"option"}}],[11,"clone","","",44,{"inputs":[{"name":"union"}],"output":{"name":"union"}}],[11,"next","","",44,{"inputs":[{"name":"union"}],"output":{"name":"option"}}],[11,"borrow","collections::borrow","",45,{"inputs":[{"name":"cow"}],"output":{"name":"b"}}],[11,"clone","","",45,{"inputs":[{"name":"cow"}],"output":{"name":"cow"}}],[11,"to_mut","","Acquires a mutable reference to the owned form of the data.",45,null],[11,"into_owned","","Extracts the owned data.",45,null],[11,"deref","","",45,{"inputs":[{"name":"cow"}],"output":{"name":"b"}}],[11,"cmp","","",45,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"ordering"}}],[11,"eq","","",45,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",45,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"option"}}],[11,"fmt","","",45,{"inputs":[{"name":"cow"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",45,{"inputs":[{"name":"cow"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",45,null],[11,"into_cow","","",45,{"inputs":[{"name":"cow"}],"output":{"name":"cow"}}],[11,"as_ref","","",45,{"inputs":[{"name":"cow"}],"output":{"name":"t"}}],[11,"hash","collections::enum_set","",46,null],[11,"cmp","","",46,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",46,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"option"}}],[11,"lt","","",46,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"le","","",46,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"gt","","",46,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"ge","","",46,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"eq","","",46,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"ne","","",46,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"clone","","",46,{"inputs":[{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"fmt","","",46,{"inputs":[{"name":"enumset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Returns an empty `EnumSet`.",46,{"inputs":[{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"len","","Returns the number of elements in the given `EnumSet`.",46,{"inputs":[{"name":"enumset"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the `EnumSet` is empty.",46,{"inputs":[{"name":"enumset"}],"output":{"name":"bool"}}],[11,"clear","","",46,null],[11,"is_disjoint","","Returns `false` if the `EnumSet` contains any enum of the given `EnumSet`.",46,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns `true` if a given `EnumSet` is included in this `EnumSet`.",46,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns `true` if this `EnumSet` is included in the given `EnumSet`.",46,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"union","","Returns the union of both `EnumSets`.",46,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"intersection","","Returns the intersection of both `EnumSets`.",46,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"insert","","Adds an enum to the `EnumSet`, and returns `true` if it wasn't there before",46,{"inputs":[{"name":"enumset"},{"name":"e"}],"output":{"name":"bool"}}],[11,"remove","","Removes an enum from the EnumSet",46,{"inputs":[{"name":"enumset"},{"name":"e"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` if an `EnumSet` contains a given enum.",46,{"inputs":[{"name":"enumset"},{"name":"e"}],"output":{"name":"bool"}}],[11,"iter","","Returns an iterator over an `EnumSet`.",46,{"inputs":[{"name":"enumset"}],"output":{"name":"iter"}}],[11,"sub","","",46,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"bitor","","",46,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"bitand","","",46,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"bitxor","","",46,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"clone","","",47,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",47,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",47,null],[11,"from_iter","","",46,{"inputs":[{"name":"enumset"},{"name":"i"}],"output":{"name":"enumset"}}],[11,"extend","","",46,null],[11,"extend","","",46,null],[11,"clone","core::fmt::rt::v1","",48,{"inputs":[{"name":"argument"}],"output":{"name":"argument"}}],[11,"clone","","",49,{"inputs":[{"name":"formatspec"}],"output":{"name":"formatspec"}}],[11,"eq","","",50,{"inputs":[{"name":"alignment"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"ne","","",50,{"inputs":[{"name":"alignment"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"clone","","",50,{"inputs":[{"name":"alignment"}],"output":{"name":"alignment"}}],[11,"clone","","",51,{"inputs":[{"name":"count"}],"output":{"name":"count"}}],[11,"clone","","",52,{"inputs":[{"name":"position"}],"output":{"name":"position"}}],[11,"clone","collections::linked_list","",53,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"clone","","",54,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"from","","",55,{"inputs":[{"name":"rawlink"},{"name":"option"}],"output":{"name":"rawlink"}}],[11,"clone","","",55,{"inputs":[{"name":"rawlink"}],"output":{"name":"rawlink"}}],[11,"default","","",56,{"inputs":[{"name":"linkedlist"}],"output":{"name":"linkedlist"}}],[11,"new","","Creates an empty `LinkedList`.",56,{"inputs":[{"name":"linkedlist"}],"output":{"name":"linkedlist"}}],[11,"append","","Moves all elements from `other` to the end of the list.",56,null],[11,"iter","","Provides a forward iterator.",56,{"inputs":[{"name":"linkedlist"}],"output":{"name":"iter"}}],[11,"iter_mut","","Provides a forward iterator with mutable references.",56,{"inputs":[{"name":"linkedlist"}],"output":{"name":"itermut"}}],[11,"is_empty","","Returns `true` if the `LinkedList` is empty.",56,{"inputs":[{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"len","","Returns the length of the `LinkedList`.",56,{"inputs":[{"name":"linkedlist"}],"output":{"name":"usize"}}],[11,"clear","","Removes all elements from the `LinkedList`.",56,null],[11,"front","","Provides a reference to the front element, or `None` if the list is\nempty.",56,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the list\nis empty.",56,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the list is\nempty.",56,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the list\nis empty.",56,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"push_front","","Adds an element first in the list.",56,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the list is\nempty.",56,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"push_back","","Appends an element to the back of a list",56,null],[11,"pop_back","","Removes the last element from a list and returns it, or `None` if\nit is empty.",56,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"split_off","","Splits the list into two at the given index. Returns everything after the given index,\nincluding the index.",56,{"inputs":[{"name":"linkedlist"},{"name":"usize"}],"output":{"name":"linkedlist"}}],[11,"drop","","",56,null],[11,"next","","",53,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",53,null],[11,"next_back","","",53,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",57,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",57,null],[11,"next_back","","",57,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"insert_next","","Inserts `elt` just after the element most recently returned by `.next()`.\nThe inserted element does not appear in the iteration.",57,null],[11,"peek_next","","Provides a reference to the next element, without changing the iterator.",57,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",54,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",54,null],[11,"next_back","","",54,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","",56,{"inputs":[{"name":"linkedlist"},{"name":"t"}],"output":{"name":"linkedlist"}}],[11,"into_iter","","Consumes the list into an iterator yielding elements by value.",56,{"inputs":[{"name":"linkedlist"}],"output":{"name":"intoiter"}}],[11,"extend","","",56,null],[11,"extend","","",56,null],[11,"eq","","",56,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"ne","","",56,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",56,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"cmp","","",56,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"ordering"}}],[11,"clone","","",56,{"inputs":[{"name":"linkedlist"}],"output":{"name":"linkedlist"}}],[11,"fmt","","",56,{"inputs":[{"name":"linkedlist"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",56,null],[11,"start","core::ops","",58,{"inputs":[{"name":"rangefrom"}],"output":{"name":"option"}}],[11,"end","","",59,{"inputs":[{"name":"rangeto"}],"output":{"name":"option"}}],[11,"start","","",60,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"end","","",60,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"borrow","collections::vec","",7,null],[11,"borrow_mut","","",7,null],[11,"clone","collections::str","",61,{"inputs":[{"name":"utf16units"}],"output":{"name":"utf16units"}}],[11,"next","","",61,{"inputs":[{"name":"utf16units"}],"output":{"name":"option"}}],[11,"size_hint","","",61,null],[11,"borrow","collections::string","",62,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"fmt","core::str::pattern","",63,{"inputs":[{"name":"searchstep"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",63,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"ne","","",63,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"clone","","",63,{"inputs":[{"name":"searchstep"}],"output":{"name":"searchstep"}}],[11,"clone","","",64,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"chareqsearcher"}}],[11,"into_searcher","","",65,{"inputs":[{"name":"chareqpattern"},{"name":"str"}],"output":{"name":"chareqsearcher"}}],[11,"haystack","","",64,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"str"}}],[11,"next","","",64,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"next_back","","",64,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"clone","","",66,{"inputs":[{"name":"charsearcher"}],"output":{"name":"charsearcher"}}],[11,"haystack","","",66,{"inputs":[{"name":"charsearcher"}],"output":{"name":"str"}}],[11,"next","","",66,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",66,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",66,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",66,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",66,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",66,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"clone","","",67,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"charslicesearcher"}}],[11,"haystack","","",67,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"str"}}],[11,"next","","",67,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",67,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",67,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",67,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",67,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",67,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"clone","","",68,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"charpredicatesearcher"}}],[11,"haystack","","",68,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"str"}}],[11,"next","","",68,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",68,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",68,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",68,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",68,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",68,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"fmt","","",69,{"inputs":[{"name":"strsearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",69,{"inputs":[{"name":"strsearcher"}],"output":{"name":"strsearcher"}}],[11,"fmt","","",70,{"inputs":[{"name":"strsearcherimpl"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",70,{"inputs":[{"name":"strsearcherimpl"}],"output":{"name":"strsearcherimpl"}}],[11,"fmt","","",71,{"inputs":[{"name":"emptyneedle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",71,{"inputs":[{"name":"emptyneedle"}],"output":{"name":"emptyneedle"}}],[11,"haystack","","",69,{"inputs":[{"name":"strsearcher"}],"output":{"name":"str"}}],[11,"next","","",69,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",69,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",69,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",69,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"fmt","","",72,{"inputs":[{"name":"twowaysearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",72,{"inputs":[{"name":"twowaysearcher"}],"output":{"name":"twowaysearcher"}}],[11,"use_early_reject","","",73,{"inputs":[{"name":"matchonly"}],"output":{"name":"bool"}}],[11,"rejecting","","",73,null],[11,"matching","","",73,null],[11,"use_early_reject","","",74,{"inputs":[{"name":"rejectandmatch"}],"output":{"name":"bool"}}],[11,"rejecting","","",74,null],[11,"matching","","",74,null],[11,"cmp","collections::string","",62,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",62,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"option"}}],[11,"lt","","",62,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"le","","",62,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"gt","","",62,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ge","","",62,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"fmt","","",75,{"inputs":[{"name":"fromutf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",76,{"inputs":[{"name":"fromutf16error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new string buffer initialized with the empty string.",62,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"with_capacity","","Creates a new string buffer with the given capacity.\nThe string will be able to hold exactly `capacity` bytes without\nreallocating. If `capacity` is 0, the string will not allocate.",62,{"inputs":[{"name":"string"},{"name":"usize"}],"output":{"name":"string"}}],[11,"from_utf8","","Converts a vector of bytes to a `String`.",62,{"inputs":[{"name":"string"},{"name":"vec"}],"output":{"name":"result"}}],[11,"from_utf8_lossy","","Converts a slice of bytes to a `String`, including invalid characters.",62,null],[11,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`, returning `None`\nif `v` contains any invalid data.",62,null],[11,"from_utf16_lossy","","Decode a UTF-16 encoded vector `v` into a string, replacing\ninvalid data with the replacement character (U+FFFD).",62,null],[11,"from_raw_parts","","Creates a new `String` from a length, capacity, and pointer.",62,null],[11,"from_utf8_unchecked","","Converts a vector of bytes to a `String` without checking that the\nstring contains valid UTF-8.",62,{"inputs":[{"name":"string"},{"name":"vec"}],"output":{"name":"string"}}],[11,"into_bytes","","Returns the underlying byte buffer, encoded as UTF-8.",62,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"as_str","","Extracts a string slice containing the entire string.",62,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"push_str","","Pushes the given string onto this string buffer.",62,null],[11,"capacity","","Returns the number of bytes that this string buffer can hold without\nreallocating.",62,{"inputs":[{"name":"string"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more bytes to be inserted\nin the given `String`. The collection may reserve more space to avoid\nfrequent reallocations.",62,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more bytes to be\ninserted in the given `String`. Does nothing if the capacity is already\nsufficient.",62,null],[11,"shrink_to_fit","","Shrinks the capacity of this string buffer to match its length.",62,null],[11,"push","","Adds the given character to the end of the string.",62,null],[11,"as_bytes","","Works with the underlying buffer as a byte slice.",62,null],[11,"truncate","","Shortens a string to the specified length.",62,null],[11,"pop","","Removes the last character from the string buffer and returns it.\nReturns `None` if this string buffer is empty.",62,{"inputs":[{"name":"string"}],"output":{"name":"option"}}],[11,"remove","","Removes the character from the string buffer at byte position `idx` and\nreturns it.",62,{"inputs":[{"name":"string"},{"name":"usize"}],"output":{"name":"char"}}],[11,"insert","","Inserts a character into the string buffer at byte position `idx`.",62,null],[11,"as_mut_vec","","Views the string buffer as a mutable sequence of bytes.",62,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"len","","Returns the number of bytes in this string.",62,{"inputs":[{"name":"string"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the string contains no bytes",62,{"inputs":[{"name":"string"}],"output":{"name":"bool"}}],[11,"clear","","Truncates the string, returning it to 0 length.",62,null],[11,"drain","","Create a draining iterator that removes the specified range in the string\nand yields the removed chars from start to end. The element range is\nremoved even if the iterator is not consumed until the end.",62,{"inputs":[{"name":"string"},{"name":"r"}],"output":{"name":"drain"}}],[11,"into_boxed_str","","Converts the string into `Box<str>`.",62,{"inputs":[{"name":"string"}],"output":{"name":"box"}}],[11,"into_boxed_slice","","Converts the string into `Box<str>`.",62,{"inputs":[{"name":"string"}],"output":{"name":"box"}}],[11,"into_bytes","","Returns the bytes that were attempted to convert to a `String`.",75,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"vec"}}],[11,"utf8_error","","Fetch a `Utf8Error` to get more details about the conversion failure.",75,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"utf8error"}}],[11,"fmt","","",75,{"inputs":[{"name":"fromutf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",76,{"inputs":[{"name":"fromutf16error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",62,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"clone_from","","",62,null],[11,"from_iter","","",62,{"inputs":[{"name":"string"},{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",62,{"inputs":[{"name":"string"},{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",62,{"inputs":[{"name":"string"},{"name":"i"}],"output":{"name":"string"}}],[11,"extend","","",62,null],[11,"extend","","",62,null],[11,"extend","","",62,null],[11,"extend","","",62,null],[11,"eq","","",62,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",62,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",62,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",62,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",62,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",62,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","collections::borrow","",45,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",45,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",45,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","collections::string","",62,{"inputs":[{"name":"string"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"ne","","",62,{"inputs":[{"name":"string"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"default","","",62,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"fmt","","",62,{"inputs":[{"name":"string"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",62,{"inputs":[{"name":"string"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",62,null],[11,"add","","",62,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"string"}}],[11,"index","","",62,{"inputs":[{"name":"string"},{"name":"range"}],"output":{"name":"str"}}],[11,"index","","",62,{"inputs":[{"name":"string"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index","","",62,{"inputs":[{"name":"string"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index","","",62,{"inputs":[{"name":"string"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"index_mut","","",62,{"inputs":[{"name":"string"},{"name":"range"}],"output":{"name":"str"}}],[11,"index_mut","","",62,{"inputs":[{"name":"string"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index_mut","","",62,{"inputs":[{"name":"string"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index_mut","","",62,{"inputs":[{"name":"string"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"deref","","",62,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"deref_mut","","",62,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"from_str","","",62,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",77,{"inputs":[{"name":"parseerror"}],"output":{"name":"parseerror"}}],[11,"fmt","","",77,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",77,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"as_ref","","",62,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"as_ref","","",62,null],[11,"from","","",62,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"string"}}],[11,"from","collections::borrow","",45,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"cow"}}],[11,"from","","",45,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"cow"}}],[11,"into","collections::string","",62,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"into_cow","","",62,{"inputs":[{"name":"string"}],"output":{"name":"cow"}}],[11,"write_str","","",62,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",62,{"inputs":[{"name":"string"},{"name":"char"}],"output":{"name":"result"}}],[11,"drop","","",78,null],[11,"next","","",78,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",78,null],[11,"next_back","","",78,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"clone","collections::vec","",7,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"clone_from","","",7,null],[11,"hash","","",7,null],[11,"index","","",7,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",7,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index","","",7,null],[11,"index","","",7,null],[11,"index","","",7,null],[11,"index","","",7,null],[11,"index_mut","","",7,null],[11,"index_mut","","",7,null],[11,"index_mut","","",7,null],[11,"index_mut","","",7,null],[11,"deref","","",7,null],[11,"deref_mut","","",7,null],[11,"from_iter","","",7,{"inputs":[{"name":"vec"},{"name":"i"}],"output":{"name":"vec"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe vector (from start to end). The vector cannot be used after calling\nthis.",7,{"inputs":[{"name":"vec"}],"output":{"name":"intoiter"}}],[11,"extend","","",7,null],[11,"extend","","",7,null],[11,"eq","","",7,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","collections::borrow","",45,null],[11,"ne","","",45,null],[11,"eq","","",45,null],[11,"ne","","",45,null],[11,"eq","","",45,{"inputs":[{"name":"cow"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"cow"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","collections::vec","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"partial_cmp","","",7,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"option"}}],[11,"cmp","","",7,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"ordering"}}],[11,"drop","","",7,null],[11,"default","","",7,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"fmt","","",7,{"inputs":[{"name":"vec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",7,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"as_mut","","",7,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"as_ref","","",7,null],[11,"as_mut","","",7,null],[11,"from","","",7,null],[11,"from","","",7,{"inputs":[{"name":"vec"},{"name":"str"}],"output":{"name":"vec"}}],[11,"from_iter","collections::borrow","",45,{"inputs":[{"name":"cow"},{"name":"i"}],"output":{"name":"cow"}}],[11,"into_cow","collections::vec","",7,{"inputs":[{"name":"vec"}],"output":{"name":"cow"}}],[11,"next","","",79,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",79,null],[11,"count","","",79,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next_back","","",79,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"drop","","",79,null],[11,"next","","",80,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",80,null],[11,"next_back","","",80,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"drop","","",80,null],[11,"clone","collections::vec_deque","",81,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vecdeque"}}],[11,"drop","","",81,null],[11,"default","","",81,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vecdeque"}}],[11,"new","","Creates an empty `VecDeque`.",81,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vecdeque"}}],[11,"with_capacity","","Creates an empty `VecDeque` with space for at least `n` elements.",81,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"get","","Retrieves an element in the `VecDeque` by index.",81,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_mut","","Retrieves an element in the `VecDeque` mutably by index.",81,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap","","Swaps elements at indices `i` and `j`.",81,null],[11,"capacity","","Returns the number of elements the `VecDeque` can hold without\nreallocating.",81,{"inputs":[{"name":"vecdeque"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `VecDeque`. Does nothing if the capacity is already sufficient.",81,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given\n`VecDeque`. The collection may reserve more space to avoid frequent reallocations.",81,null],[11,"shrink_to_fit","","Shrinks the capacity of the `VecDeque` as much as possible.",81,null],[11,"truncate","","Shortens a `VecDeque`, dropping excess elements from the back.",81,null],[11,"iter","","Returns a front-to-back iterator.",81,{"inputs":[{"name":"vecdeque"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a front-to-back iterator that returns mutable references.",81,{"inputs":[{"name":"vecdeque"}],"output":{"name":"itermut"}}],[11,"as_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",81,null],[11,"as_mut_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",81,null],[11,"len","","Returns the number of elements in the `VecDeque`.",81,{"inputs":[{"name":"vecdeque"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the buffer contains no elements",81,{"inputs":[{"name":"vecdeque"}],"output":{"name":"bool"}}],[11,"drain","","Create a draining iterator that removes the specified range in the\n`VecDeque` and yields the removed items from start to end. The element\nrange is removed even if the iterator is not consumed until the end.",81,{"inputs":[{"name":"vecdeque"},{"name":"r"}],"output":{"name":"drain"}}],[11,"clear","","Clears the buffer, removing all values.",81,null],[11,"front","","Provides a reference to the front element, or `None` if the sequence is\nempty.",81,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the\nsequence is empty.",81,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the sequence is\nempty.",81,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the\nsequence is empty.",81,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"pop_front","","Removes the first element and returns it, or `None` if the sequence is\nempty.",81,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"push_front","","Inserts an element first in the sequence.",81,null],[11,"push_back","","Appends an element to the back of a buffer",81,null],[11,"pop_back","","Removes the last element from a buffer and returns it, or `None` if\nit is empty.",81,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"swap_remove_back","","Removes an element from anywhere in the `VecDeque` and returns it, replacing it with the\nlast element.",81,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap_back_remove","","deprecated",81,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap_remove_front","","Removes an element from anywhere in the `VecDeque` and returns it,\nreplacing it with the first element.",81,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap_front_remove","","deprecated",81,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"insert","","Inserts an element at `index` within the `VecDeque`. Whichever\nend is closer to the insertion point will be moved to make room,\nand all the affected elements will be moved to new positions.",81,null],[11,"remove","","Removes and returns the element at `index` from the `VecDeque`.\nWhichever end is closer to the removal point will be moved to make\nroom, and all the affected elements will be moved to new positions.\nReturns `None` if `index` is out of bounds.",81,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"split_off","","Splits the collection into two at the given index.",81,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",81,null],[11,"retain","","Retains only the elements specified by the predicate.",81,null],[11,"resize","","Modifies the `VecDeque` in-place so that `len()` is equal to new_len,\neither by removing excess elements or by appending copies of a value to the back.",81,null],[11,"clone","","",82,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",82,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",82,null],[11,"next_back","","",82,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",83,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",83,null],[11,"next_back","","",83,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",84,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"next","","",84,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",84,null],[11,"next_back","","",84,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"drop","","",85,null],[11,"next","","",85,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",85,null],[11,"next_back","","",85,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"eq","","",81,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",81,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"cmp","","",81,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"ordering"}}],[11,"hash","","",81,null],[11,"index","","",81,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"a"}}],[11,"index_mut","","",81,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"a"}}],[11,"from_iter","","",81,{"inputs":[{"name":"vecdeque"},{"name":"t"}],"output":{"name":"vecdeque"}}],[11,"into_iter","","Consumes the list into a front-to-back iterator yielding elements by\nvalue.",81,{"inputs":[{"name":"vecdeque"}],"output":{"name":"intoiter"}}],[11,"extend","","",81,null],[11,"extend","","",81,null],[11,"fmt","","",81,{"inputs":[{"name":"vecdeque"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","collections","",86,{"inputs":[{"name":"bound"},{"name":"bound"}],"output":{"name":"bool"}}],[11,"ne","","",86,{"inputs":[{"name":"bound"},{"name":"bound"}],"output":{"name":"bool"}}],[11,"hash","","",86,null],[11,"fmt","","",86,{"inputs":[{"name":"bound"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",86,{"inputs":[{"name":"bound"}],"output":{"name":"bound"}}],[11,"clone","alloc::boxed","",87,{"inputs":[{"name":"exchangeheapsingleton"}],"output":{"name":"exchangeheapsingleton"}}],[11,"pointer","","",88,null],[11,"make_place","","",88,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"intermediatebox"}}],[11,"finalize","","",88,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"finalize","","",89,{"inputs":[{"name":"box"},{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"make_place","","",87,{"inputs":[{"name":"exchangeheapsingleton"}],"output":{"name":"intermediatebox"}}],[11,"drop","","",88,null],[11,"new","","Allocates memory on the heap and then moves `x` into it.",89,{"inputs":[{"name":"box"},{"name":"t"}],"output":{"name":"box"}}],[11,"from_raw","","Constructs a box from the raw pointer.",89,null],[11,"into_raw","","Consumes the `Box`, returning the wrapped raw pointer.",89,null],[11,"default","","",89,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"default","","",89,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"clone","","Returns a new box with a `clone()` of this box's contents.",89,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"clone_from","","Copies `source`'s contents into `self` without creating a new allocation.",89,null],[11,"clone","","",89,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"eq","","",89,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ne","","",89,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",89,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"option"}}],[11,"lt","","",89,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"le","","",89,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ge","","",89,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"gt","","",89,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"cmp","","",89,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"ordering"}}],[11,"hash","","",89,null],[11,"from","","",89,{"inputs":[{"name":"box"},{"name":"t"}],"output":{"name":"box"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",89,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",89,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"fmt","","",89,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",89,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",89,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",89,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"deref_mut","","",89,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"next","","",89,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"size_hint","","",89,null],[11,"next_back","","",89,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"call_once","","",89,{"inputs":[{"name":"box"},{"name":"a"}],"output":{"name":"r"}}],[11,"call_once","","",89,{"inputs":[{"name":"box"},{"name":"a"}],"output":{"name":"r"}}],[11,"clone","","",89,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"borrow","","",89,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"borrow_mut","","",89,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"as_ref","","",89,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"as_mut","","",89,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"deref","regex_syntax","",6,{"inputs":[{"name":"lit"}],"output":{"name":"vec"}}],[11,"deref_mut","","",6,{"inputs":[{"name":"lit"}],"output":{"name":"vec"}}],[6,"Result","","An alias for computations that can return a `Error`.",null,null],[11,"eq","","",2,{"inputs":[{"name":"expr"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"expr"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"expr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"expr"}],"output":{"name":"expr"}}],[11,"eq","","",3,{"inputs":[{"name":"repeater"},{"name":"repeater"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"repeater"},{"name":"repeater"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"repeater"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"repeater"}],"output":{"name":"repeater"}}],[11,"eq","","",90,{"inputs":[{"name":"charclass"},{"name":"charclass"}],"output":{"name":"bool"}}],[11,"ne","","",90,{"inputs":[{"name":"charclass"},{"name":"charclass"}],"output":{"name":"bool"}}],[11,"fmt","","",90,{"inputs":[{"name":"charclass"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",90,{"inputs":[{"name":"charclass"}],"output":{"name":"charclass"}}],[11,"cmp","","",0,{"inputs":[{"name":"classrange"},{"name":"classrange"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"classrange"},{"name":"classrange"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"classrange"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"classrange"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"classrange"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"classrange"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"classrange"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"classrange"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"classrange"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"classrange"}],"output":{"name":"classrange"}}],[11,"eq","","",91,{"inputs":[{"name":"byteclass"},{"name":"byteclass"}],"output":{"name":"bool"}}],[11,"ne","","",91,{"inputs":[{"name":"byteclass"},{"name":"byteclass"}],"output":{"name":"bool"}}],[11,"fmt","","",91,{"inputs":[{"name":"byteclass"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",91,{"inputs":[{"name":"byteclass"}],"output":{"name":"byteclass"}}],[11,"cmp","","",1,{"inputs":[{"name":"byterange"},{"name":"byterange"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"byterange"},{"name":"byterange"}],"output":{"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"byterange"},{"name":"byterange"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"byterange"},{"name":"byterange"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"byterange"},{"name":"byterange"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"byterange"},{"name":"byterange"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"byterange"},{"name":"byterange"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"byterange"},{"name":"byterange"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"byterange"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"byterange"}],"output":{"name":"byterange"}}],[11,"fmt","","",92,{"inputs":[{"name":"exprbuilder"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",92,{"inputs":[{"name":"exprbuilder"}],"output":{"name":"exprbuilder"}}],[11,"new","","Create a new builder for configuring expression parsing.",92,{"inputs":[{"name":"exprbuilder"}],"output":{"name":"exprbuilder"}}],[11,"case_insensitive","","Set the default value for the case insensitive (`i`) flag.",92,{"inputs":[{"name":"exprbuilder"},{"name":"bool"}],"output":{"name":"exprbuilder"}}],[11,"multi_line","","Set the default value for the multi-line matching (`m`) flag.",92,{"inputs":[{"name":"exprbuilder"},{"name":"bool"}],"output":{"name":"exprbuilder"}}],[11,"dot_matches_new_line","","Set the default value for the any character (`s`) flag.",92,{"inputs":[{"name":"exprbuilder"},{"name":"bool"}],"output":{"name":"exprbuilder"}}],[11,"swap_greed","","Set the default value for the greedy swap (`U`) flag.",92,{"inputs":[{"name":"exprbuilder"},{"name":"bool"}],"output":{"name":"exprbuilder"}}],[11,"ignore_whitespace","","Set the default value for the ignore whitespace (`x`) flag.",92,{"inputs":[{"name":"exprbuilder"},{"name":"bool"}],"output":{"name":"exprbuilder"}}],[11,"unicode","","Set the default value for the Unicode (`u`) flag.",92,{"inputs":[{"name":"exprbuilder"},{"name":"bool"}],"output":{"name":"exprbuilder"}}],[11,"allow_bytes","","Whether the Unicode flag can be used or not. By default, the flag is\nenabled but it cannot be toggled.",92,{"inputs":[{"name":"exprbuilder"},{"name":"bool"}],"output":{"name":"exprbuilder"}}],[11,"nest_limit","","Set the nesting limit for regular expression parsing.",92,{"inputs":[{"name":"exprbuilder"},{"name":"usize"}],"output":{"name":"exprbuilder"}}],[11,"parse","","Parse a string as a regular expression using the current configuraiton.",92,{"inputs":[{"name":"exprbuilder"},{"name":"str"}],"output":{"name":"result"}}],[11,"parse","","Parses a string in a regular expression syntax tree.",2,{"inputs":[{"name":"expr"},{"name":"str"}],"output":{"name":"result"}}],[11,"prefixes","","Returns a set of literal prefixes extracted from this expression.",2,{"inputs":[{"name":"expr"}],"output":{"name":"literals"}}],[11,"suffixes","","Returns a set of literal suffixes extracted from this expression.",2,{"inputs":[{"name":"expr"}],"output":{"name":"literals"}}],[11,"is_anchored_start","","Returns true if and only if the expression is required to match from\nthe beginning of text.",2,{"inputs":[{"name":"expr"}],"output":{"name":"bool"}}],[11,"is_anchored_end","","Returns true if and only if the expression is required to match at the\nend of the text.",2,{"inputs":[{"name":"expr"}],"output":{"name":"bool"}}],[11,"has_bytes","","Returns true if and only if the expression contains sub-expressions\nthat can match arbitrary bytes.",2,{"inputs":[{"name":"expr"}],"output":{"name":"bool"}}],[11,"deref","","",90,{"inputs":[{"name":"charclass"}],"output":{"name":"vec"}}],[11,"into_iter","","",90,{"inputs":[{"name":"charclass"}],"output":{"name":"intoiter"}}],[11,"new","","Create a new class from an existing set of ranges.",90,{"inputs":[{"name":"charclass"},{"name":"vec"}],"output":{"name":"charclass"}}],[11,"matches","","Returns true if `c` is matched by this character class.",90,{"inputs":[{"name":"charclass"},{"name":"char"}],"output":{"name":"bool"}}],[11,"remove","","Removes the given character from the class if it exists.",90,{"inputs":[{"name":"charclass"},{"name":"char"}],"output":null}],[11,"negate","","Negates the character class.",90,{"inputs":[{"name":"charclass"}],"output":{"name":"charclass"}}],[11,"case_fold","","Apply case folding to this character class.",90,{"inputs":[{"name":"charclass"}],"output":{"name":"charclass"}}],[11,"eq","","",0,{"inputs":[{"name":"classrange"},{"name":"char"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"classrange"},{"name":"char"}],"output":{"name":"option"}}],[11,"new","","Create a new class from an existing set of ranges.",91,{"inputs":[{"name":"byteclass"},{"name":"vec"}],"output":{"name":"byteclass"}}],[11,"matches","","Returns true if `b` is matched by this byte class.",91,{"inputs":[{"name":"byteclass"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"remove","","Removes the given byte from the class if it exists.",91,{"inputs":[{"name":"byteclass"},{"name":"u8"}],"output":null}],[11,"negate","","Negates the byte class.",91,{"inputs":[{"name":"byteclass"}],"output":{"name":"byteclass"}}],[11,"case_fold","","Apply case folding to this byte class.",91,{"inputs":[{"name":"byteclass"}],"output":{"name":"byteclass"}}],[11,"deref","","",91,{"inputs":[{"name":"byteclass"}],"output":{"name":"vec"}}],[11,"into_iter","","",91,{"inputs":[{"name":"byteclass"}],"output":{"name":"intoiter"}}],[11,"eq","","",1,{"inputs":[{"name":"byterange"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"byterange"},{"name":"u8"}],"output":{"name":"option"}}],[11,"fmt","","",2,{"inputs":[{"name":"expr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"repeater"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",90,{"inputs":[{"name":"charclass"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"classrange"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",91,{"inputs":[{"name":"byteclass"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"byterange"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",93,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",93,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",93,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",93,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"eq","","",4,{"inputs":[{"name":"errorkind"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"errorkind"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"errorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"errorkind"}],"output":{"name":"errorkind"}}],[11,"position","","Returns an approximate *character* offset at which the error occurred.",93,{"inputs":[{"name":"error"}],"output":{"name":"usize"}}],[11,"kind","","Returns the type of the regex parse error.",93,{"inputs":[{"name":"error"}],"output":{"name":"errorkind"}}],[11,"description","","",93,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"fmt","","",93,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"errorkind"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"ClassRange"],[3,"ByteRange"],[4,"Expr"],[4,"Repeater"],[4,"ErrorKind"],[3,"Literals"],[3,"Lit"],[3,"Vec"],[3,"BinaryHeap"],[3,"Hole"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"RawItems"],[3,"Node"],[3,"Handle"],[3,"ElemsAndEdges"],[3,"MoveTraversalImpl"],[3,"AbsTraversal"],[3,"NodeSlice"],[3,"MutNodeSlice"],[3,"BTreeMap"],[3,"AbsIter"],[3,"IdRef"],[3,"PartialSearchStack"],[3,"Pusher"],[3,"SearchStack"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"Range"],[3,"RangeMut"],[4,"Entry"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"BTreeSet"],[3,"Iter"],[3,"IntoIter"],[3,"Range"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Intersection"],[3,"Union"],[4,"Cow"],[3,"EnumSet"],[3,"Iter"],[3,"Argument"],[3,"FormatSpec"],[4,"Alignment"],[4,"Count"],[4,"Position"],[3,"Iter"],[3,"IntoIter"],[3,"Rawlink"],[3,"LinkedList"],[3,"IterMut"],[3,"RangeFrom"],[3,"RangeTo"],[3,"Range"],[3,"Utf16Units"],[3,"String"],[4,"SearchStep"],[3,"CharEqSearcher"],[3,"CharEqPattern"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[4,"StrSearcherImpl"],[3,"EmptyNeedle"],[3,"TwoWaySearcher"],[4,"MatchOnly"],[4,"RejectAndMatch"],[3,"FromUtf8Error"],[3,"FromUtf16Error"],[4,"ParseError"],[3,"Drain"],[3,"IntoIter"],[3,"Drain"],[3,"VecDeque"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[4,"Bound"],[3,"ExchangeHeapSingleton"],[3,"IntermediateBox"],[3,"Box"],[3,"CharClass"],[3,"ByteClass"],[3,"ExprBuilder"],[3,"Error"]]};
searchIndex['error'] = {"items":[[0,"","error","A generic, extendable Error type.",null,null],[8,"Error","","An extension to std::error::Error which provides dynamic downcasting of\nerrors for use in highly generic contexts.",null,null],[11,"is","","Is this `Error` object of type `E`?",0,{"inputs":[{"name":"error"}],"output":{"name":"bool"}}],[11,"downcast","","If this error is `E`, downcast this error to `E`, by reference.",0,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"is","","Is this `Error + Send` object of type `E`?",0,{"inputs":[{"name":"error"}],"output":{"name":"bool"}}],[11,"downcast","","If this error is `E`, downcast this error to `E`, by reference.",0,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"from","alloc::boxed","",1,{"inputs":[{"name":"box"},{"name":"e"}],"output":{"name":"box"}}],[14,"match_error!","error","",null,null]],"paths":[[8,"Error"],[3,"Box"]]};
searchIndex['traitobject'] = {"items":[[0,"","traitobject","# traitobject",null,null],[5,"data","","Get the data pointer from this trait object.",null,null],[5,"data_mut","","Get the data pointer from this trait object, mutably.",null,null],[8,"Trait","","A trait implemented for all trait objects.",null,null]],"paths":[]};
searchIndex['utf8_ranges'] = {"items":[[0,"","utf8_ranges","Crate `utf8-ranges` converts ranges of Unicode scalar values to equivalent\nranges of UTF-8 bytes. This is useful for constructing byte based automatons\nthat need to embed UTF-8 decoding.",null,null],[3,"Utf8Range","","A single inclusive range of UTF-8 bytes.",null,null],[12,"start","","Start of byte range (inclusive).",0,null],[12,"end","","End of byte range (inclusive).",0,null],[3,"Utf8Sequences","","An iterator over ranges of matching UTF-8 byte sequences.",null,null],[4,"Utf8Sequence","","Utf8Sequence represents a sequence of byte ranges.",null,null],[13,"One","","One byte range.",1,null],[13,"Two","","Two successive byte ranges.",1,null],[13,"Three","","Three successive byte ranges.",1,null],[13,"Four","","Four successive byte ranges.",1,null],[11,"eq","","",1,{"inputs":[{"name":"utf8sequence"},{"name":"utf8sequence"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"utf8sequence"},{"name":"utf8sequence"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"utf8sequence"}],"output":{"name":"utf8sequence"}}],[11,"as_slice","","Returns the underlying sequence of byte ranges as a slice.",1,null],[11,"len","","Returns the number of byte ranges in this sequence.",1,{"inputs":[{"name":"utf8sequence"}],"output":{"name":"usize"}}],[11,"matches","","Returns true if and only if a prefix of `bytes` matches this sequence\nof byte ranges.",1,null],[11,"fmt","","",1,{"inputs":[{"name":"utf8sequence"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"utf8range"},{"name":"utf8range"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"utf8range"},{"name":"utf8range"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"utf8range"}],"output":{"name":"utf8range"}}],[11,"matches","","Returns true if and only if the given byte is in this range.",0,{"inputs":[{"name":"utf8range"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"utf8range"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new iterator over UTF-8 byte ranges for the scalar value range\ngiven.",2,{"inputs":[{"name":"utf8sequences"},{"name":"char"},{"name":"char"}],"output":{"name":"self"}}],[11,"next","","",2,{"inputs":[{"name":"utf8sequences"}],"output":{"name":"option"}}]],"paths":[[3,"Utf8Range"],[4,"Utf8Sequence"],[3,"Utf8Sequences"]]};
searchIndex['itertools'] = {"items":[[0,"","itertools","Itertools — extra iterator adaptors, functions and macros.",null,null],[3,"Dedup","","An iterator adaptor that removes repeated duplicates.",null,null],[3,"Interleave","","An iterator adaptor that alternates elements from two iterators until both\nrun out.",null,null],[3,"InterleaveShortest","","An iterator adaptor that alternates elements from the two iterators until\none of them runs out.",null,null],[3,"Product","","An iterator adaptor that iterates over the cartesian product of\nthe element sets of two iterators `I` and `J`.",null,null],[3,"PutBack","","An iterator adaptor that allows putting back a single\nitem to the front of the iterator.",null,null],[3,"PutBackN","","An iterator adaptor that allows putting multiple\nitems in front of the iterator.",null,null],[3,"Batching","","A “meta iterator adaptor”. Its closure recives a reference to the iterator\nand may pick off as many elements as it likes, to produce the next iterator element.",null,null],[3,"GroupBy","","An iterator adaptor that groups iterator elements. Consecutive elements\nthat map to the same key (“runs”), are returned as the iterator elements.",null,null],[3,"Step","","An iterator adaptor that steps a number elements in the base iterator\nfor each iteration.",null,null],[3,"Merge","","An iterator adaptor that merges the two base iterators in ascending order.\nIf both base iterators are sorted (ascending), the result is sorted.",null,null],[3,"MergeBy","","An iterator adaptor that merges the two base iterators in ascending order.\nIf both base iterators are sorted (ascending), the result is sorted.",null,null],[3,"MultiPeek","","An iterator adaptor that allows the user to peek at multiple *.next()*\nvalues without advancing itself.",null,null],[3,"TakeWhileRef","","An iterator adaptor that borrows from a `Clone`-able iterator\nto only pick off elements while the predicate returns `true`.",null,null],[3,"WhileSome","","An iterator adaptor that filters `Option<A>` iterator elements\nand produces `A`. Stops on the first `None` encountered.",null,null],[3,"Coalesce","","An iterator adaptor that may join together adjacent elements.",null,null],[3,"MendSlices","","An iterator adaptor that glues together adjacent contiguous slices.",null,null],[3,"Combinations","","An iterator to iterate through all the combinations of pairs in a `Clone`-able iterator.",null,null],[3,"CombinationsN","","An iterator to iterate through all the `n`-length combinations in an iterator.",null,null],[3,"Unique","","An iterator adapter to filter out duplicate elements.",null,null],[3,"UniqueBy","","An iterator adapter to filter out duplicate elements.",null,null],[3,"Flatten","","An iterator adapter to simply flatten a structure.",null,null],[3,"Format","","Format all iterator elements lazily, separated by `sep`.",null,null],[3,"ChunksLazy","","`ChunkLazy` is the storage for a lazy chunking operation.",null,null],[3,"Chunk","","An iterator for the elements in a single chunk.",null,null],[3,"Chunks","","An iterator that yields the Chunk iterators.",null,null],[3,"GroupByLazy","","`GroupByLazy` is the storage for the lazy grouping operation.",null,null],[3,"Group","","An iterator for the elements in a single group.",null,null],[3,"Groups","","An iterator that yields the Group iterators.",null,null],[3,"Intersperse","","An iterator adaptor to insert a particular value\nbetween each element of the adapted iterator.",null,null],[3,"ISlice","","An iterator adaptor that yields a subset (a slice) of the base iterator.",null,null],[3,"KMerge","","An iterator adaptor that merges an abitrary number of base iterators in ascending order.\nIf all base iterators are sorted (ascending), the result is sorted.",null,null],[3,"Linspace","","An iterator of a sequence of evenly spaced floats.",null,null],[3,"PadUsing","","An iterator adaptor that pads a sequence to a minimum length by filling\nmissing elements using a closure.",null,null],[3,"RcIter","","A wrapper for `Rc<RefCell<I>>`, that implements the `Iterator` trait.",null,null],[12,"rciter","","The boxed iterator.",0,null],[3,"RepeatN","","An iterator that repeats an element exactly *n* times.",null,null],[3,"RepeatCall","","An iterator source that produces elements indefinitely by calling\na given closure.",null,null],[3,"Unfold","","`Unfold` is a general iterator builder: it has a mutable state value,\nand a closure with access to the state that produces the next value.",null,null],[12,"state","","Internal state that will be passed to the closure on the next iteration",1,null],[3,"Stride","","An iterator similar to the slice iterator, but with a certain number of steps\n(the stride) skipped per iteration.",null,null],[3,"StrideMut","","The mutable equivalent of Stride.",null,null],[3,"Tee","","One half of an iterator pair where both return the same elements.",null,null],[3,"ZipLongest","","An iterator which iterates two other iterators simultaneously",null,null],[3,"Zip","","An iterator that generalizes *.zip()* and allows running multiple iterators in lockstep.",null,null],[3,"ZipSlices","","An iterator which iterates two slices simultaneously.",null,null],[4,"Diff","","A type returned by the [`diff_with`](./fn.diff_with.html) function.",null,null],[13,"FirstMismatch","","The index of the first non-matching element along with both iterator's remaining elements\nstarting with the first mis-match.",2,null],[13,"Shorter","","The total number of elements that were in `J` along with the remaining elements of `I`.",2,null],[13,"Longer","","The total number of elements that were in `I` along with the remaining elements of `J`.",2,null],[4,"EitherOrBoth","","A value yielded by `ZipLongest`.\nContains one or two values, depending on which of the input iterators are exhausted.",null,null],[13,"Both","","Neither input iterator is exhausted yet, yielding two values.",3,null],[13,"Left","","The parameter iterator of `.zip_longest()` is exhausted,\nonly yielding a value from the `self` iterator.",3,null],[13,"Right","","The `self` iterator of `.zip_longest()` is exhausted,\nonly yielding a value from the parameter iterator.",3,null],[5,"diff_with","","Compares every element yielded by both `i` and `j` with the given function in lock-step and\nreturns a `Diff` which describes how `j` differs from `i`.",null,{"inputs":[{"name":"i"},{"name":"j"},{"name":"f"}],"output":{"name":"option"}}],[5,"linspace","","Return an iterator of evenly spaced floats.",null,{"inputs":[{"name":"f"},{"name":"f"},{"name":"usize"}],"output":{"name":"linspace"}}],[5,"equal","","Return `true` if both iterators produce equal sequences\n(elements pairwise equal and sequences of the same length),\n`false` otherwise.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"bool"}}],[5,"assert_equal","","Assert that two iterators produce equal sequences, with the same\nsemantics as *equal(a, b)*.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":null}],[5,"partition","","Partition a sequence using predicate `pred` so that elements\nthat map to `true` are placed before elements which map to `false`.",null,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"usize"}}],[11,"clone","","",4,{"inputs":[{"name":"interleave"}],"output":{"name":"interleave"}}],[11,"new","","Creat a new `Interleave` iterator.",4,{"inputs":[{"name":"interleave"},{"name":"i"},{"name":"j"}],"output":{"name":"interleave"}}],[11,"next","","",4,{"inputs":[{"name":"interleave"}],"output":{"name":"option"}}],[11,"clone","","",5,{"inputs":[{"name":"interleaveshortest"}],"output":{"name":"interleaveshortest"}}],[11,"new","","Create a new `InterleaveShortest` iterator.",5,{"inputs":[{"name":"interleaveshortest"},{"name":"i"},{"name":"j"}],"output":{"name":"interleaveshortest"}}],[11,"next","","",5,{"inputs":[{"name":"interleaveshortest"}],"output":{"name":"option"}}],[11,"size_hint","","",5,null],[11,"clone","","",6,{"inputs":[{"name":"putback"}],"output":{"name":"putback"}}],[11,"new","","Iterator element type is `A`",6,{"inputs":[{"name":"putback"},{"name":"i"}],"output":{"name":"self"}}],[11,"with_value","","Create a `PutBack` along with the `value` to put back.",6,{"inputs":[{"name":"putback"},{"name":"item"},{"name":"i"}],"output":{"name":"self"}}],[11,"into_parts","","Split the `PutBack` into its parts.",6,null],[11,"put_back","","Put back a single value to the front of the iterator.",6,{"inputs":[{"name":"putback"},{"name":"item"}],"output":null}],[11,"next","","",6,{"inputs":[{"name":"putback"}],"output":{"name":"option"}}],[11,"size_hint","","",6,null],[11,"new","","Iterator element type is `A`",7,{"inputs":[{"name":"putbackn"},{"name":"i"}],"output":{"name":"self"}}],[11,"put_back","","Puts x in front of the iterator.\nThe values are yielded in order.",7,{"inputs":[{"name":"putbackn"},{"name":"item"}],"output":null}],[11,"next","","",7,{"inputs":[{"name":"putbackn"}],"output":{"name":"option"}}],[11,"size_hint","","",7,null],[11,"clone","","",7,{"inputs":[{"name":"putbackn"}],"output":{"name":"self"}}],[11,"clone","","",8,{"inputs":[{"name":"product"}],"output":{"name":"product"}}],[11,"new","","Create a new cartesian product iterator",8,{"inputs":[{"name":"product"},{"name":"i"},{"name":"j"}],"output":{"name":"self"}}],[11,"next","","",8,{"inputs":[{"name":"product"}],"output":{"name":"option"}}],[11,"size_hint","","",8,null],[11,"clone","","",9,{"inputs":[{"name":"batching"}],"output":{"name":"batching"}}],[11,"new","","Create a new Batching iterator.",9,{"inputs":[{"name":"batching"},{"name":"i"},{"name":"f"}],"output":{"name":"batching"}}],[11,"next","","",9,{"inputs":[{"name":"batching"}],"output":{"name":"option"}}],[11,"size_hint","","",9,null],[11,"clone","","",10,{"inputs":[{"name":"groupby"}],"output":{"name":"groupby"}}],[11,"new","","Create a new `GroupBy` iterator.",10,{"inputs":[{"name":"groupby"},{"name":"i"},{"name":"f"}],"output":{"name":"self"}}],[11,"next","","",10,{"inputs":[{"name":"groupby"}],"output":{"name":"option"}}],[11,"size_hint","","",10,null],[11,"clone","","",11,{"inputs":[{"name":"step"}],"output":{"name":"step"}}],[11,"new","","Create a `Step` iterator.",11,{"inputs":[{"name":"step"},{"name":"i"},{"name":"usize"}],"output":{"name":"self"}}],[11,"next","","",11,{"inputs":[{"name":"step"}],"output":{"name":"option"}}],[11,"size_hint","","",11,null],[11,"clone","","",12,{"inputs":[{"name":"merge"}],"output":{"name":"self"}}],[11,"next","","",12,{"inputs":[{"name":"merge"}],"output":{"name":"option"}}],[11,"size_hint","","",12,null],[11,"clone","","",13,{"inputs":[{"name":"mergeby"}],"output":{"name":"self"}}],[11,"next","","",13,{"inputs":[{"name":"mergeby"}],"output":{"name":"option"}}],[11,"size_hint","","",13,null],[11,"clone","","",14,{"inputs":[{"name":"multipeek"}],"output":{"name":"multipeek"}}],[11,"new","","Create a `MultiPeek` iterator.",14,{"inputs":[{"name":"multipeek"},{"name":"i"}],"output":{"name":"multipeek"}}],[11,"peek","","Works exactly like *.next()* with the only difference that it doesn't\nadvance itself. *.peek()* can be called multiple times, to peek\nfurther ahead.",14,{"inputs":[{"name":"multipeek"}],"output":{"name":"option"}}],[11,"next","","",14,{"inputs":[{"name":"multipeek"}],"output":{"name":"option"}}],[11,"size_hint","","",14,null],[11,"clone","","",15,{"inputs":[{"name":"coalesce"}],"output":{"name":"self"}}],[11,"new","","Create a new `Coalesce`.",15,{"inputs":[{"name":"coalesce"},{"name":"i"},{"name":"f"}],"output":{"name":"self"}}],[11,"next","","",15,{"inputs":[{"name":"coalesce"}],"output":{"name":"option"}}],[11,"size_hint","","",15,null],[11,"clone","","",16,{"inputs":[{"name":"dedup"}],"output":{"name":"self"}}],[11,"new","","Create a new `Dedup`.",16,{"inputs":[{"name":"dedup"},{"name":"i"}],"output":{"name":"self"}}],[11,"next","","",16,{"inputs":[{"name":"dedup"}],"output":{"name":"option"}}],[11,"size_hint","","",16,null],[11,"clone","","",17,{"inputs":[{"name":"mendslices"}],"output":{"name":"self"}}],[11,"new","","Create a new `MendSlices`.",17,{"inputs":[{"name":"mendslices"},{"name":"i"}],"output":{"name":"self"}}],[11,"next","","",17,{"inputs":[{"name":"mendslices"}],"output":{"name":"option"}}],[11,"size_hint","","",17,null],[11,"new","","Create a new `TakeWhileRef` from a reference to clonable iterator.",18,{"inputs":[{"name":"takewhileref"},{"name":"i"},{"name":"f"}],"output":{"name":"self"}}],[11,"next","","",18,{"inputs":[{"name":"takewhileref"}],"output":{"name":"option"}}],[11,"size_hint","","",18,null],[11,"clone","","",19,{"inputs":[{"name":"whilesome"}],"output":{"name":"whilesome"}}],[11,"new","","Create a new `WhileSome<I>`.",19,{"inputs":[{"name":"whilesome"},{"name":"i"}],"output":{"name":"self"}}],[11,"next","","",19,{"inputs":[{"name":"whilesome"}],"output":{"name":"option"}}],[11,"size_hint","","",19,null],[11,"clone","","",20,{"inputs":[{"name":"combinations"}],"output":{"name":"combinations"}}],[11,"new","","Create a new `Combinations` from a clonable iterator.",20,{"inputs":[{"name":"combinations"},{"name":"i"}],"output":{"name":"combinations"}}],[11,"next","","",20,{"inputs":[{"name":"combinations"}],"output":{"name":"option"}}],[11,"size_hint","","",20,null],[11,"new","","Create a new `CombinationsN` from a clonable iterator.",21,{"inputs":[{"name":"combinationsn"},{"name":"i"},{"name":"usize"}],"output":{"name":"combinationsn"}}],[11,"next","","",21,{"inputs":[{"name":"combinationsn"}],"output":{"name":"option"}}],[11,"clone","","",22,{"inputs":[{"name":"uniqueby"}],"output":{"name":"uniqueby"}}],[11,"new","","Create a new `UniqueBy` iterator.",22,{"inputs":[{"name":"uniqueby"},{"name":"i"},{"name":"f"}],"output":{"name":"uniqueby"}}],[11,"next","","",22,{"inputs":[{"name":"uniqueby"}],"output":{"name":"option"}}],[11,"size_hint","","",22,null],[11,"next","","",23,{"inputs":[{"name":"unique"}],"output":{"name":"option"}}],[11,"size_hint","","",23,null],[11,"clone","","",23,{"inputs":[{"name":"unique"}],"output":{"name":"unique"}}],[11,"new","","Create a new `Flatten` iterator.",24,{"inputs":[{"name":"flatten"},{"name":"i"}],"output":{"name":"flatten"}}],[11,"next","","",24,{"inputs":[{"name":"flatten"}],"output":{"name":"option"}}],[11,"next_back","","",24,{"inputs":[{"name":"flatten"}],"output":{"name":"option"}}],[11,"clone","","",24,{"inputs":[{"name":"flatten"}],"output":{"name":"self"}}],[0,"free","","Free functions that create iterator adaptors or call iterator methods.",null,null],[5,"enumerate","itertools::free","Iterate `iterable` with a running index.",null,{"inputs":[{"name":"i"}],"output":{"name":"enumerate"}}],[5,"rev","","Iterate `iterable` in reverse.",null,{"inputs":[{"name":"i"}],"output":{"name":"rev"}}],[5,"zip","","Iterate `i` and `j` in lock step.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"zip"}}],[5,"chain","","Create an iterator that first iterates `i` and then `j`.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"chain"}}],[5,"fold","","Perform a fold operation over the iterable.",null,{"inputs":[{"name":"i"},{"name":"b"},{"name":"f"}],"output":{"name":"b"}}],[5,"all","","Test whether the predicate holds for all elements in the iterable.",null,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"bool"}}],[5,"any","","Test whether the predicate holds for any elements in the iterable.",null,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"bool"}}],[5,"max","","Return the maximum value of the iterable.",null,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[5,"min","","Return the minimum value of the iterable.",null,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[5,"interleave","","Create an iterator that interleaves elements in `i` and `j`.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"interleave"}}],[5,"merge","","Create an iterator that merges elements in `i` and `j`.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"merge"}}],[5,"kmerge","","Create an iterator that merges elements of the contained iterators.",null,{"inputs":[{"name":"i"}],"output":{"name":"kmerge"}}],[5,"join","","Combine all iterator elements into one String, seperated by `sep`.",null,{"inputs":[{"name":"i"},{"name":"str"}],"output":{"name":"string"}}],[5,"sorted","","Collect all the iterable's elements into a sorted vector in ascending order.",null,{"inputs":[{"name":"i"}],"output":{"name":"vec"}}],[11,"fmt","itertools","",25,{"inputs":[{"name":"format"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",26,{"inputs":[{"name":"groups"}],"output":{"name":"option"}}],[11,"drop","","",27,{"inputs":[{"name":"group"}],"output":null}],[11,"next","","",27,{"inputs":[{"name":"group"}],"output":{"name":"option"}}],[11,"next","","",28,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"drop","","",29,{"inputs":[{"name":"chunk"}],"output":null}],[11,"next","","",29,{"inputs":[{"name":"chunk"}],"output":{"name":"option"}}],[11,"clone","","",30,{"inputs":[{"name":"intersperse"}],"output":{"name":"intersperse"}}],[11,"new","","Create a new Intersperse iterator",30,{"inputs":[{"name":"intersperse"},{"name":"i"},{"name":"item"}],"output":{"name":"self"}}],[11,"next","","",30,{"inputs":[{"name":"intersperse"}],"output":{"name":"option"}}],[11,"size_hint","","",30,null],[11,"clone","","",31,{"inputs":[{"name":"islice"}],"output":{"name":"islice"}}],[11,"new","","Create a new **ISlice**.",31,{"inputs":[{"name":"islice"},{"name":"i"},{"name":"r"}],"output":{"name":"self"}}],[11,"next","","",31,{"inputs":[{"name":"islice"}],"output":{"name":"option"}}],[11,"size_hint","","",31,null],[11,"clone","","",32,{"inputs":[{"name":"kmerge"}],"output":{"name":"kmerge"}}],[11,"next","","",32,{"inputs":[{"name":"kmerge"}],"output":{"name":"option"}}],[11,"size_hint","","",32,null],[11,"fmt","","",33,{"inputs":[{"name":"linspace"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"linspace"}],"output":{"name":"linspace"}}],[11,"next","","",33,{"inputs":[{"name":"linspace"}],"output":{"name":"option"}}],[11,"size_hint","","",33,null],[11,"next_back","","",33,{"inputs":[{"name":"linspace"}],"output":{"name":"option"}}],[0,"misc","","A module of helper traits and iterators that are not intended to be used\ndirectly.",null,null],[3,"FlatTuples","itertools::misc","A helper iterator that maps an iterator of tuples like\n`((A, B), C)` to an iterator of `(A, B, C)`.",null,null],[8,"IntoIteratorTuple","","Apply `IntoIterator` on each element of a tuple.",null,null],[16,"Output","","Tuple of values that implement `Iterator`.",34,null],[10,"into_iterator_tuple","","Return a tuple of iterators.",34,{"inputs":[{"name":"intoiteratortuple"}],"output":{"name":"output"}}],[8,"AppendTuple","","A helper trait for (x, y, z) ++ w => (x, y, z, w),\nused for implementing `iproduct!`.",null,null],[16,"Result","","Resulting tuple type",35,null],[10,"append","","“Append” value `x` to a tuple.",35,{"inputs":[{"name":"appendtuple"},{"name":"x"}],"output":{"name":"result"}}],[8,"GenericRange","","`GenericRange` is implemented by Rust's built-in range types, produced\nby range syntax like `a..`, `..b` or `c..d`.",null,null],[8,"ToFloat","","Helper trait to convert usize to floating point type.",null,null],[8,"MendSlice","","A trait for items that can *maybe* be joined together.",null,null],[8,"Slice","","A helper trait to let `ZipSlices` accept both `&[T]` and `&mut [T]`.",null,null],[16,"Item","","The type of a reference to the slice's elements",36,null],[11,"clone","","",37,{"inputs":[{"name":"flattuples"}],"output":{"name":"flattuples"}}],[11,"next","","",37,{"inputs":[{"name":"flattuples"}],"output":{"name":"option"}}],[11,"size_hint","","",37,null],[11,"next_back","","",37,{"inputs":[{"name":"flattuples"}],"output":{"name":"option"}}],[11,"start","core::ops","",38,{"inputs":[{"name":"rangefrom"}],"output":{"name":"option"}}],[11,"end","","",39,{"inputs":[{"name":"rangeto"}],"output":{"name":"option"}}],[11,"start","","",40,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"end","","",40,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"clone","itertools","",41,{"inputs":[{"name":"padusing"}],"output":{"name":"padusing"}}],[11,"new","","Create a new **PadUsing** iterator.",41,{"inputs":[{"name":"padusing"},{"name":"i"},{"name":"usize"},{"name":"f"}],"output":{"name":"padusing"}}],[11,"next","","",41,{"inputs":[{"name":"padusing"}],"output":{"name":"option"}}],[11,"size_hint","","",41,null],[11,"next_back","","",41,{"inputs":[{"name":"padusing"}],"output":{"name":"option"}}],[11,"new","","Create a new RcIter.",0,{"inputs":[{"name":"rciter"},{"name":"i"}],"output":{"name":"rciter"}}],[11,"clone","","",0,{"inputs":[{"name":"rciter"}],"output":{"name":"rciter"}}],[11,"next","","",0,{"inputs":[{"name":"rciter"}],"output":{"name":"option"}}],[11,"size_hint","","",0,null],[11,"next_back","","",0,{"inputs":[{"name":"rciter"}],"output":{"name":"option"}}],[11,"new","","Create a new **RepeatN** with **n** repetitions.",42,{"inputs":[{"name":"repeatn"},{"name":"a"},{"name":"usize"}],"output":{"name":"self"}}],[11,"next","","",42,{"inputs":[{"name":"repeatn"}],"output":{"name":"option"}}],[11,"size_hint","","",42,null],[11,"next_back","","",42,{"inputs":[{"name":"repeatn"}],"output":{"name":"option"}}],[11,"new","","Create a new `RepeatCall` from a closure.",43,{"inputs":[{"name":"repeatcall"},{"name":"f"}],"output":{"name":"self"}}],[11,"next","","",43,{"inputs":[{"name":"repeatcall"}],"output":{"name":"option"}}],[11,"size_hint","","",43,null],[11,"next_back","","",43,{"inputs":[{"name":"repeatcall"}],"output":{"name":"option"}}],[11,"clone","","",1,{"inputs":[{"name":"unfold"}],"output":{"name":"unfold"}}],[11,"new","","Creates a new iterator with the specified closure as the \"iterator\nfunction\" and an initial state to eventually pass to the closure",1,{"inputs":[{"name":"unfold"},{"name":"st"},{"name":"f"}],"output":{"name":"unfold"}}],[11,"next","","",1,{"inputs":[{"name":"unfold"}],"output":{"name":"option"}}],[11,"size_hint","","",1,null],[0,"size_hint","","Arithmetic on **Iterator** *.size_hint()* values.",null,null],[5,"add","itertools::size_hint","Add **SizeHint** correctly.",null,{"inputs":[{"name":"sizehint"},{"name":"sizehint"}],"output":{"name":"sizehint"}}],[5,"add_scalar","","Add **x** correctly to a **SizeHint**.",null,{"inputs":[{"name":"sizehint"},{"name":"usize"}],"output":{"name":"sizehint"}}],[5,"sub_scalar","","Sbb **x** correctly to a **SizeHint**.",null,{"inputs":[{"name":"sizehint"},{"name":"usize"}],"output":{"name":"sizehint"}}],[5,"mul_scalar","","Multiply **x** correctly with a **SizeHint**.",null,{"inputs":[{"name":"sizehint"},{"name":"usize"}],"output":{"name":"sizehint"}}],[5,"mul","","Multiply **SizeHint** correctly",null,{"inputs":[{"name":"sizehint"},{"name":"sizehint"}],"output":{"name":"sizehint"}}],[5,"max","","Return the maximum",null,{"inputs":[{"name":"sizehint"},{"name":"sizehint"}],"output":{"name":"sizehint"}}],[5,"min","","Return the minimum",null,{"inputs":[{"name":"sizehint"},{"name":"sizehint"}],"output":{"name":"sizehint"}}],[6,"SizeHint","","**SizeHint** is the return type of **Iterator::size_hint()**.",null,null],[11,"from_ptr_len","itertools","Create a Stride iterator from a raw pointer.",44,null],[11,"from_ptr_len","","Create a StrideMut iterator from a raw pointer.",45,null],[11,"from_slice","","Create Stride iterator from a slice and the element step count.",44,null],[11,"from_stride","","Create Stride iterator from an existing Stride iterator",44,{"inputs":[{"name":"stride"},{"name":"stride"},{"name":"isize"}],"output":{"name":"stride"}}],[11,"swap_ends","","Swap the begin and end and reverse the stride,\nin effect reversing the iterator.",44,{"inputs":[{"name":"stride"}],"output":null}],[11,"len","","Return the number of elements in the iterator.",44,{"inputs":[{"name":"stride"}],"output":{"name":"usize"}}],[11,"get","","Return a reference to the element of a stride at the\ngiven index, or None if the index is out of bounds.",44,{"inputs":[{"name":"stride"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next","","",44,{"inputs":[{"name":"stride"}],"output":{"name":"option"}}],[11,"size_hint","","",44,null],[11,"next_back","","",44,{"inputs":[{"name":"stride"}],"output":{"name":"option"}}],[11,"index","","Return a reference to the element at a given index.",44,{"inputs":[{"name":"stride"},{"name":"usize"}],"output":{"name":"a"}}],[11,"fmt","","",44,{"inputs":[{"name":"stride"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"len","","",44,{"inputs":[{"name":"stride"}],"output":{"name":"usize"}}],[11,"get_unchecked","","",44,{"inputs":[{"name":"stride"},{"name":"usize"}],"output":{"name":"a"}}],[11,"from_slice","","Create Stride iterator from a slice and the element step count.",45,null],[11,"from_stride","","Create Stride iterator from an existing Stride iterator",45,{"inputs":[{"name":"stridemut"},{"name":"stridemut"},{"name":"isize"}],"output":{"name":"stridemut"}}],[11,"swap_ends","","Swap the begin and end and reverse the stride,\nin effect reversing the iterator.",45,{"inputs":[{"name":"stridemut"}],"output":null}],[11,"len","","Return the number of elements in the iterator.",45,{"inputs":[{"name":"stridemut"}],"output":{"name":"usize"}}],[11,"get","","Return a reference to the element of a stride at the\ngiven index, or None if the index is out of bounds.",45,{"inputs":[{"name":"stridemut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next","","",45,{"inputs":[{"name":"stridemut"}],"output":{"name":"option"}}],[11,"size_hint","","",45,null],[11,"next_back","","",45,{"inputs":[{"name":"stridemut"}],"output":{"name":"option"}}],[11,"index","","Return a reference to the element at a given index.",45,{"inputs":[{"name":"stridemut"},{"name":"usize"}],"output":{"name":"a"}}],[11,"fmt","","",45,{"inputs":[{"name":"stridemut"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"len","","",45,{"inputs":[{"name":"stridemut"}],"output":{"name":"usize"}}],[11,"get_unchecked","","",45,{"inputs":[{"name":"stridemut"},{"name":"usize"}],"output":{"name":"a"}}],[11,"clone","","",44,{"inputs":[{"name":"stride"}],"output":{"name":"stride"}}],[11,"get_mut","","Return a mutable reference to the element of a stride at the\ngiven index, or None if the index is out of bounds.",45,{"inputs":[{"name":"stridemut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"index_mut","","Return a mutable reference to the element at a given index.",45,{"inputs":[{"name":"stridemut"},{"name":"usize"}],"output":{"name":"a"}}],[11,"next","","",46,{"inputs":[{"name":"tee"}],"output":{"name":"option"}}],[11,"size_hint","","",46,null],[11,"clone","","",47,{"inputs":[{"name":"ziplongest"}],"output":{"name":"ziplongest"}}],[11,"new","","Create a new `ZipLongest` iterator.",47,{"inputs":[{"name":"ziplongest"},{"name":"t"},{"name":"u"}],"output":{"name":"ziplongest"}}],[11,"next","","",47,{"inputs":[{"name":"ziplongest"}],"output":{"name":"option"}}],[11,"size_hint","","",47,null],[11,"next_back","","",47,{"inputs":[{"name":"ziplongest"}],"output":{"name":"option"}}],[11,"fmt","","",3,{"inputs":[{"name":"eitherorboth"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"eitherorboth"},{"name":"eitherorboth"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"eitherorboth"},{"name":"eitherorboth"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"eitherorboth"}],"output":{"name":"eitherorboth"}}],[11,"clone","","",48,{"inputs":[{"name":"zip"}],"output":{"name":"zip"}}],[11,"new","","Create a new `Zip` from a tuple of iterators.",48,{"inputs":[{"name":"zip"},{"name":"t"}],"output":{"name":"zip"}}],[11,"next","","",48,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",48,null],[11,"next","","",48,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",48,null],[11,"next","","",48,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",48,null],[11,"next","","",48,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",48,null],[11,"next","","",48,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",48,null],[11,"next","","",48,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",48,null],[11,"next","","",48,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",48,null],[11,"next","","",48,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",48,null],[11,"next","","",48,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",48,null],[11,"clone","","",49,{"inputs":[{"name":"zipslices"}],"output":{"name":"zipslices"}}],[11,"new","","Create a new `ZipSlices` from slices `a` and `b`.",49,null],[11,"from_slices","","Create a new `ZipSlices` from slices `a` and `b`.",49,{"inputs":[{"name":"zipslices"},{"name":"t"},{"name":"u"}],"output":{"name":"self"}}],[11,"next","","",49,{"inputs":[{"name":"zipslices"}],"output":{"name":"option"}}],[11,"size_hint","","",49,null],[11,"next_back","","",49,{"inputs":[{"name":"zipslices"}],"output":{"name":"option"}}],[11,"len","","",49,{"inputs":[{"name":"zipslices"}],"output":{"name":"usize"}}],[11,"get_unchecked","","",49,{"inputs":[{"name":"zipslices"},{"name":"usize"}],"output":{"name":"item"}}],[6,"MapFn","","The function pointer map iterator created with `.map_fn()`.",null,null],[8,"Itertools","","The trait `Itertools`: extra iterator adaptors and methods for iterators.",null,null],[11,"interleave","","Alternate elements from two iterators until both\nrun out.",50,{"inputs":[{"name":"itertools"},{"name":"j"}],"output":{"name":"interleave"}}],[11,"interleave_shortest","","Alternate elements from two iterators until one of them runs out.",50,{"inputs":[{"name":"itertools"},{"name":"j"}],"output":{"name":"interleaveshortest"}}],[11,"intersperse","","An iterator adaptor to insert a particular value\nbetween each element of the adapted iterator.",50,{"inputs":[{"name":"itertools"},{"name":"item"}],"output":{"name":"intersperse"}}],[11,"zip_longest","","Create an iterator which iterates over both this and the specified\niterator simultaneously, yielding pairs of two optional elements.",50,{"inputs":[{"name":"itertools"},{"name":"j"}],"output":{"name":"ziplongest"}}],[11,"batching","","A “meta iterator adaptor”. Its closure recives a reference to the iterator\nand may pick off as many elements as it likes, to produce the next iterator element.",50,{"inputs":[{"name":"itertools"},{"name":"f"}],"output":{"name":"batching"}}],[11,"group_by","","Group iterator elements. Consecutive elements that map to the same key (“runs”),\nare returned as the iterator elements of `GroupBy`.",50,{"inputs":[{"name":"itertools"},{"name":"f"}],"output":{"name":"groupby"}}],[11,"group_by_lazy","","Return an iterable that can group iterator elements.\nConsecutive elements that map to the same key (“runs”), are assigned\nto the same group.",50,{"inputs":[{"name":"itertools"},{"name":"f"}],"output":{"name":"groupbylazy"}}],[11,"chunks_lazy","","Return an iterable that can chunk the iterator.",50,{"inputs":[{"name":"itertools"},{"name":"usize"}],"output":{"name":"chunkslazy"}}],[11,"tee","","Split into an iterator pair that both yield all elements from\nthe original iterator.",50,null],[11,"slice","","Return a sliced iterator.",50,{"inputs":[{"name":"itertools"},{"name":"r"}],"output":{"name":"islice"}}],[11,"into_rc","","Return an iterator inside a `Rc<RefCell<_>>` wrapper.",50,{"inputs":[{"name":"itertools"}],"output":{"name":"rciter"}}],[11,"step","","Return an iterator adaptor that steps `n` elements in the base iterator\nfor each iteration.",50,{"inputs":[{"name":"itertools"},{"name":"usize"}],"output":{"name":"step"}}],[11,"merge","","Return an iterator adaptor that merges the two base iterators in ascending order.\nIf both base iterators are sorted (ascending), the result is sorted.",50,{"inputs":[{"name":"itertools"},{"name":"j"}],"output":{"name":"merge"}}],[11,"merge_by","","Return an iterator adaptor that merges the two base iterators in order.\nThis is much like `.merge()` but allows for a custom ordering.",50,{"inputs":[{"name":"itertools"},{"name":"j"},{"name":"f"}],"output":{"name":"mergeby"}}],[11,"kmerge","","Return an iterator adaptor that flattens an iterator of iterators by\nmerging them in ascending order.",50,{"inputs":[{"name":"itertools"}],"output":{"name":"kmerge"}}],[11,"cartesian_product","","Return an iterator adaptor that iterates over the cartesian product of\nthe element sets of two iterators `self` and `J`.",50,{"inputs":[{"name":"itertools"},{"name":"j"}],"output":{"name":"product"}}],[11,"multipeek","","Return an iterator adapter that allows peeking multiple values.",50,{"inputs":[{"name":"itertools"}],"output":{"name":"multipeek"}}],[11,"coalesce","","Return an iterator adaptor that uses the passed-in closure to\noptionally merge together consecutive elements.",50,{"inputs":[{"name":"itertools"},{"name":"f"}],"output":{"name":"coalesce"}}],[11,"dedup","","Remove duplicates from sections of consecutive identical elements.\nIf the iterator is sorted, all elements will be unique.",50,{"inputs":[{"name":"itertools"}],"output":{"name":"dedup"}}],[11,"unique","","Return an iterator adaptor that filters out elements that have\nalready been produced once during the iteration. Duplicates\nare detected using hash and equality.",50,{"inputs":[{"name":"itertools"}],"output":{"name":"unique"}}],[11,"unique_by","","Return an iterator adaptor that filters out elements that have\nalready been produced once during the iteration.",50,{"inputs":[{"name":"itertools"},{"name":"f"}],"output":{"name":"uniqueby"}}],[11,"mend_slices","","Return an iterator adaptor that joins together adjacent slices if possible.",50,{"inputs":[{"name":"itertools"}],"output":{"name":"mendslices"}}],[11,"take_while_ref","","Return an iterator adaptor that borrows from a `Clone`-able iterator\nto only pick off elements while the predicate `f` returns `true`.",50,{"inputs":[{"name":"itertools"},{"name":"f"}],"output":{"name":"takewhileref"}}],[11,"while_some","","Return an iterator adaptor that filters `Option<A>` iterator elements\nand produces `A`. Stops on the first `None` encountered.",50,{"inputs":[{"name":"itertools"}],"output":{"name":"whilesome"}}],[11,"combinations","","Return an iterator adaptor that iterates over the combinations of\nthe elements from an iterator.",50,{"inputs":[{"name":"itertools"}],"output":{"name":"combinations"}}],[11,"combinations_n","","Return an iterator adaptor that iterates over the `n`-length combinations of\nthe elements from an iterator.",50,{"inputs":[{"name":"itertools"},{"name":"usize"}],"output":{"name":"combinationsn"}}],[11,"pad_using","","Return an iterator adaptor that pads the sequence to a minimum length of\n`min` by filling missing elements using a closure `f`.",50,{"inputs":[{"name":"itertools"},{"name":"usize"},{"name":"f"}],"output":{"name":"padusing"}}],[11,"flatten","","Unravel a nested iterator.",50,{"inputs":[{"name":"itertools"}],"output":{"name":"flatten"}}],[11,"map_fn","","Like regular `.map()`, specialized to using a simple function pointer instead,\nso that the resulting `Map` iterator value can be cloned.",50,null],[11,"find_position","","Find the position and value of the first element satisfying a predicate.",50,{"inputs":[{"name":"itertools"},{"name":"p"}],"output":{"name":"option"}}],[11,"dropn","","Consume the first `n` elements of the iterator eagerly.",50,{"inputs":[{"name":"itertools"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"dropping","","Consume the first `n` elements from the iterator eagerly,\nand return the same iterator again.",50,{"inputs":[{"name":"itertools"},{"name":"usize"}],"output":{"name":"self"}}],[11,"dropping_back","","Consume the last `n` elements from the iterator eagerly,\nand return the same iterator again.",50,{"inputs":[{"name":"itertools"},{"name":"usize"}],"output":{"name":"self"}}],[11,"foreach","","Run the closure `f` eagerly on each element of the iterator.",50,{"inputs":[{"name":"itertools"},{"name":"f"}],"output":null}],[11,"collect_vec","","`.collect_vec()` is simply a type specialization of `.collect()`,\nfor convenience.",50,{"inputs":[{"name":"itertools"}],"output":{"name":"vec"}}],[11,"set_from","","Assign to each reference in `self` from the `from` iterator,\nstopping at the shortest of the two iterators.",50,{"inputs":[{"name":"itertools"},{"name":"j"}],"output":{"name":"usize"}}],[11,"join","","Combine all iterator elements into one String, seperated by `sep`.",50,{"inputs":[{"name":"itertools"},{"name":"str"}],"output":{"name":"string"}}],[11,"format","","Format all iterator elements, separated by `sep`.",50,{"inputs":[{"name":"itertools"},{"name":"str"},{"name":"f"}],"output":{"name":"format"}}],[11,"fold_results","","Fold `Result` values from an iterator.",50,{"inputs":[{"name":"itertools"},{"name":"b"},{"name":"f"}],"output":{"name":"result"}}],[11,"fold_options","","Fold `Option` values from an iterator.",50,{"inputs":[{"name":"itertools"},{"name":"b"},{"name":"f"}],"output":{"name":"option"}}],[11,"fold1","","Accumulator of the elements in the iterator.",50,{"inputs":[{"name":"itertools"},{"name":"f"}],"output":{"name":"option"}}],[11,"is_empty_hint","","Tell if the iterator is empty or not according to its size hint.\nReturn `None` if the size hint does not tell, or return a `Some`\nvalue with the emptiness if it's possible to tell.",50,{"inputs":[{"name":"itertools"}],"output":{"name":"option"}}],[11,"sorted","","Collect all iterator elements into a sorted vector in ascending order.",50,{"inputs":[{"name":"itertools"}],"output":{"name":"vec"}}],[11,"sorted_by","","Collect all iterator elements into a sorted vector.",50,{"inputs":[{"name":"itertools"},{"name":"f"}],"output":{"name":"vec"}}],[11,"sort_by","","**Deprecated:** renamed to `.sorted_by()`",50,{"inputs":[{"name":"itertools"},{"name":"f"}],"output":{"name":"vec"}}],[14,"iproduct!","","Create an iterator over the “cartesian product” of iterators.",null,null],[14,"izip!","","Create an iterator running multiple iterators in lockstep.",null,null]],"paths":[[3,"RcIter"],[3,"Unfold"],[4,"Diff"],[4,"EitherOrBoth"],[3,"Interleave"],[3,"InterleaveShortest"],[3,"PutBack"],[3,"PutBackN"],[3,"Product"],[3,"Batching"],[3,"GroupBy"],[3,"Step"],[3,"Merge"],[3,"MergeBy"],[3,"MultiPeek"],[3,"Coalesce"],[3,"Dedup"],[3,"MendSlices"],[3,"TakeWhileRef"],[3,"WhileSome"],[3,"Combinations"],[3,"CombinationsN"],[3,"UniqueBy"],[3,"Unique"],[3,"Flatten"],[3,"Format"],[3,"Groups"],[3,"Group"],[3,"Chunks"],[3,"Chunk"],[3,"Intersperse"],[3,"ISlice"],[3,"KMerge"],[3,"Linspace"],[8,"IntoIteratorTuple"],[8,"AppendTuple"],[8,"Slice"],[3,"FlatTuples"],[3,"RangeFrom"],[3,"RangeTo"],[3,"Range"],[3,"PadUsing"],[3,"RepeatN"],[3,"RepeatCall"],[3,"Stride"],[3,"StrideMut"],[3,"Tee"],[3,"ZipLongest"],[3,"Zip"],[3,"ZipSlices"],[8,"Itertools"]]};
searchIndex['lazy_static'] = {"items":[[0,"","lazy_static","A macro for declaring lazily evaluated statics.",null,null],[14,"lazy_static!","","",null,null]],"paths":[]};
searchIndex['rustc_serialize'] = {"items":[[0,"","rustc_serialize","Support code for encoding and decoding types.",null,null],[11,"encode","collections::string","",0,{"inputs":[{"name":"string"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",0,{"inputs":[{"name":"string"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::boxed","",1,{"inputs":[{"name":"box"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",1,{"inputs":[{"name":"box"},{"name":"d"}],"output":{"name":"result"}}],[11,"decode","","",1,{"inputs":[{"name":"box"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::rc","",2,{"inputs":[{"name":"rc"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",2,{"inputs":[{"name":"rc"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::borrow","",3,{"inputs":[{"name":"cow"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",3,{"inputs":[{"name":"cow"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::vec","",4,{"inputs":[{"name":"vec"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",4,{"inputs":[{"name":"vec"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::option","",5,{"inputs":[{"name":"option"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",5,{"inputs":[{"name":"option"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::marker","",6,{"inputs":[{"name":"phantomdata"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",6,{"inputs":[{"name":"phantomdata"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::path","",7,{"inputs":[{"name":"path"},{"name":"s"}],"output":{"name":"result"}}],[11,"encode","","",8,{"inputs":[{"name":"pathbuf"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",8,{"inputs":[{"name":"pathbuf"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::cell","",9,{"inputs":[{"name":"cell"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",9,{"inputs":[{"name":"cell"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",10,{"inputs":[{"name":"refcell"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",10,{"inputs":[{"name":"refcell"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::arc","",11,{"inputs":[{"name":"arc"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",11,{"inputs":[{"name":"arc"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::linked_list","",12,{"inputs":[{"name":"linkedlist"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",12,{"inputs":[{"name":"linkedlist"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::vec_deque","",13,{"inputs":[{"name":"vecdeque"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",13,{"inputs":[{"name":"vecdeque"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::btree::map","",14,{"inputs":[{"name":"btreemap"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",14,{"inputs":[{"name":"btreemap"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::btree::set","",15,{"inputs":[{"name":"btreeset"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",15,{"inputs":[{"name":"btreeset"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::collections::hash::map","",16,{"inputs":[{"name":"hashmap"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",16,{"inputs":[{"name":"hashmap"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::collections::hash::set","",17,{"inputs":[{"name":"hashset"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",17,{"inputs":[{"name":"hashset"},{"name":"d"}],"output":{"name":"result"}}],[0,"base64","rustc_serialize","Base64 binary-to-text encoding",null,null],[3,"Config","rustc_serialize::base64","Contains configuration parameters for `to_base64`.",null,null],[12,"char_set","","Character set to use",18,null],[12,"newline","","Newline to use",18,null],[12,"pad","","True to pad output with `=` characters",18,null],[12,"line_length","","`Some(len)` to wrap lines at `len`, `None` to disable line wrapping",18,null],[4,"CharacterSet","","Available encoding character sets",null,null],[13,"Standard","","The standard character set (uses `+` and `/`)",19,null],[13,"UrlSafe","","The URL safe character set (uses `-` and `_`)",19,null],[4,"Newline","","Available newline types",null,null],[13,"LF","","A linefeed (i.e. Unix-style newline)",20,null],[13,"CRLF","","A carriage return and a linefeed (i.e. Windows-style newline)",20,null],[4,"FromBase64Error","","Errors that can occur when decoding a base64 encoded string",null,null],[13,"InvalidBase64Byte","","The input contained a character not part of the base64 format",21,null],[13,"InvalidBase64Length","","The input had an invalid length",21,null],[7,"STANDARD","","Configuration for RFC 4648 standard base64 encoding",null,null],[7,"URL_SAFE","","Configuration for RFC 4648 base64url encoding",null,null],[7,"MIME","","Configuration for RFC 2045 MIME base64 encoding",null,null],[8,"ToBase64","","A trait for converting a value to base64 encoding.",null,null],[10,"to_base64","","Converts the value of `self` to a base64 value following the specified\nformat configuration, returning the owned string.",22,{"inputs":[{"name":"tobase64"},{"name":"config"}],"output":{"name":"string"}}],[8,"FromBase64","","A trait for converting from base64 encoded values.",null,null],[10,"from_base64","","Converts the value of `self`, interpreted as base64 encoded data, into\nan owned vector of bytes, returning the vector.",23,{"inputs":[{"name":"frombase64"}],"output":{"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"characterset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"characterset"}],"output":{"name":"characterset"}}],[11,"fmt","","",20,{"inputs":[{"name":"newline"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"newline"}],"output":{"name":"newline"}}],[11,"fmt","","",18,{"inputs":[{"name":"config"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"config"}],"output":{"name":"config"}}],[11,"clone","","",21,{"inputs":[{"name":"frombase64error"}],"output":{"name":"frombase64error"}}],[11,"fmt","","",21,{"inputs":[{"name":"frombase64error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",21,{"inputs":[{"name":"frombase64error"}],"output":{"name":"str"}}],[11,"fmt","","",21,{"inputs":[{"name":"frombase64error"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"hex","rustc_serialize","Hex binary-to-text encoding",null,null],[4,"FromHexError","rustc_serialize::hex","Errors that can occur when decoding a hex encoded string",null,null],[13,"InvalidHexCharacter","","The input contained a character not part of the hex format",24,null],[13,"InvalidHexLength","","The input had an invalid length",24,null],[8,"ToHex","","A trait for converting a value to hexadecimal encoding",null,null],[10,"to_hex","","Converts the value of `self` to a hex value, returning the owned\nstring.",25,{"inputs":[{"name":"tohex"}],"output":{"name":"string"}}],[8,"FromHex","","A trait for converting hexadecimal encoded values",null,null],[10,"from_hex","","Converts the value of `self`, interpreted as hexadecimal encoded data,\ninto an owned vector of bytes, returning the vector.",26,{"inputs":[{"name":"fromhex"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"fromhexerror"}],"output":{"name":"fromhexerror"}}],[11,"fmt","","",24,{"inputs":[{"name":"fromhexerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",24,{"inputs":[{"name":"fromhexerror"}],"output":{"name":"str"}}],[11,"fmt","","",24,{"inputs":[{"name":"fromhexerror"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"json","rustc_serialize","JSON parsing and serialization",null,null],[3,"PrettyJson","rustc_serialize::json","",null,null],[3,"AsJson","","",null,null],[3,"AsPrettyJson","","",null,null],[3,"Encoder","","A structure for implementing serialization to JSON.",null,null],[3,"Stack","","A Stack represents the current position of the parser in the logical\nstructure of the JSON stream.\nFor example foo.bar[3].x",null,null],[3,"Parser","","A streaming JSON parser implemented as an iterator of JsonEvent, consuming\nan iterator of char.",null,null],[3,"Builder","","A Builder consumes a json::Parser to create a generic Json structure.",null,null],[3,"Decoder","","A structure to decode JSON to values in rust.",null,null],[4,"Json","","Represents a json value",null,null],[13,"I64","","",27,null],[13,"U64","","",27,null],[13,"F64","","",27,null],[13,"String","","",27,null],[13,"Boolean","","",27,null],[13,"Array","","",27,null],[13,"Object","","",27,null],[13,"Null","","",27,null],[4,"ErrorCode","","The errors that can arise while parsing a JSON stream.",null,null],[13,"InvalidSyntax","","",28,null],[13,"InvalidNumber","","",28,null],[13,"EOFWhileParsingObject","","",28,null],[13,"EOFWhileParsingArray","","",28,null],[13,"EOFWhileParsingValue","","",28,null],[13,"EOFWhileParsingString","","",28,null],[13,"KeyMustBeAString","","",28,null],[13,"ExpectedColon","","",28,null],[13,"TrailingCharacters","","",28,null],[13,"TrailingComma","","",28,null],[13,"InvalidEscape","","",28,null],[13,"InvalidUnicodeCodePoint","","",28,null],[13,"LoneLeadingSurrogateInHexEscape","","",28,null],[13,"UnexpectedEndOfHexEscape","","",28,null],[13,"UnrecognizedHex","","",28,null],[13,"NotFourDigit","","",28,null],[13,"ControlCharacterInString","","",28,null],[13,"NotUtf8","","",28,null],[4,"ParserError","","",null,null],[13,"SyntaxError","","msg, line, col",29,null],[13,"IoError","","",29,null],[4,"DecoderError","","",null,null],[13,"ParseError","","",30,null],[13,"ExpectedError","","",30,null],[13,"MissingFieldError","","",30,null],[13,"UnknownVariantError","","",30,null],[13,"ApplicationError","","",30,null],[13,"EOF","","",30,null],[4,"EncoderError","","",null,null],[13,"FmtError","","",31,null],[13,"BadHashmapKey","","",31,null],[4,"JsonEvent","","The output of the streaming parser.",null,null],[13,"ObjectStart","","",32,null],[13,"ObjectEnd","","",32,null],[13,"ArrayStart","","",32,null],[13,"ArrayEnd","","",32,null],[13,"BooleanValue","","",32,null],[13,"I64Value","","",32,null],[13,"U64Value","","",32,null],[13,"F64Value","","",32,null],[13,"StringValue","","",32,null],[13,"NullValue","","",32,null],[13,"Error","","",32,null],[4,"StackElement","","StackElements compose a Stack.\nFor example, Key(\"foo\"), Key(\"bar\"), Index(3) and Key(\"x\") are the\nStackElements compositing the stack that represents foo.bar[3].x",null,null],[13,"Index","","",33,null],[13,"Key","","",33,null],[5,"error_str","","Returns a readable error string for a given error code.",null,{"inputs":[{"name":"errorcode"}],"output":{"name":"str"}}],[5,"decode","","Shortcut function to decode a JSON `&str` into an object",null,{"inputs":[{"name":"str"}],"output":{"name":"decoderesult"}}],[5,"encode","","Shortcut function to encode a `T` into a JSON `String`",null,{"inputs":[{"name":"t"}],"output":{"name":"encoderesult"}}],[5,"as_json","","Create an `AsJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asjson"}}],[5,"as_pretty_json","","Create an `AsPrettyJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asprettyjson"}}],[6,"Array","","",null,null],[6,"Object","","",null,null],[6,"BuilderError","","",null,null],[6,"EncodeResult","","",null,null],[6,"DecodeResult","","",null,null],[8,"ToJson","","A trait for converting values to JSON",null,null],[10,"to_json","","Converts the value of `self` to an instance of JSON",34,{"inputs":[{"name":"tojson"}],"output":{"name":"json"}}],[11,"fmt","","",27,{"inputs":[{"name":"json"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"option"}}],[11,"lt","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"le","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"gt","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ge","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"eq","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"clone","","",27,{"inputs":[{"name":"json"}],"output":{"name":"json"}}],[11,"eq","","",28,{"inputs":[{"name":"errorcode"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"errorcode"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"clone","","",28,{"inputs":[{"name":"errorcode"}],"output":{"name":"errorcode"}}],[11,"fmt","","",29,{"inputs":[{"name":"parsererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",29,{"inputs":[{"name":"parsererror"},{"name":"parsererror"}],"output":{"name":"bool"}}],[11,"fmt","","",30,{"inputs":[{"name":"decodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",30,{"inputs":[{"name":"decodererror"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"decodererror"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"fmt","","",31,{"inputs":[{"name":"encodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"encodererror"}],"output":{"name":"self"}}],[11,"fmt","","",28,{"inputs":[{"name":"errorcode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",30,{"inputs":[{"name":"decodererror"}],"output":{"name":"str"}}],[11,"cause","","",30,{"inputs":[{"name":"decodererror"}],"output":{"name":"option"}}],[11,"fmt","","",30,{"inputs":[{"name":"decodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",30,{"inputs":[{"name":"decodererror"},{"name":"parsererror"}],"output":{"name":"decodererror"}}],[11,"description","","",29,{"inputs":[{"name":"parsererror"}],"output":{"name":"str"}}],[11,"fmt","","",29,{"inputs":[{"name":"parsererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",29,{"inputs":[{"name":"parsererror"},{"name":"error"}],"output":{"name":"parsererror"}}],[11,"description","","",31,{"inputs":[{"name":"encodererror"}],"output":{"name":"str"}}],[11,"fmt","","",31,{"inputs":[{"name":"encodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",31,{"inputs":[{"name":"encodererror"},{"name":"error"}],"output":{"name":"encodererror"}}],[11,"new_pretty","","Creates a new encoder whose output will be written in human-readable\nJSON to the specified writer",35,{"inputs":[{"name":"encoder"},{"name":"write"}],"output":{"name":"encoder"}}],[11,"new","","Creates a new encoder whose output will be written in compact\nJSON to the specified writer",35,{"inputs":[{"name":"encoder"},{"name":"write"}],"output":{"name":"encoder"}}],[11,"set_indent","","Set the number of spaces to indent for each level.\nThis is safe to set during encoding.",35,{"inputs":[{"name":"encoder"},{"name":"u32"}],"output":{"name":"result"}}],[11,"emit_nil","","",35,{"inputs":[{"name":"encoder"}],"output":{"name":"encoderesult"}}],[11,"emit_usize","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"}],"output":{"name":"encoderesult"}}],[11,"emit_u64","","",35,{"inputs":[{"name":"encoder"},{"name":"u64"}],"output":{"name":"encoderesult"}}],[11,"emit_u32","","",35,{"inputs":[{"name":"encoder"},{"name":"u32"}],"output":{"name":"encoderesult"}}],[11,"emit_u16","","",35,{"inputs":[{"name":"encoder"},{"name":"u16"}],"output":{"name":"encoderesult"}}],[11,"emit_u8","","",35,{"inputs":[{"name":"encoder"},{"name":"u8"}],"output":{"name":"encoderesult"}}],[11,"emit_isize","","",35,{"inputs":[{"name":"encoder"},{"name":"isize"}],"output":{"name":"encoderesult"}}],[11,"emit_i64","","",35,{"inputs":[{"name":"encoder"},{"name":"i64"}],"output":{"name":"encoderesult"}}],[11,"emit_i32","","",35,{"inputs":[{"name":"encoder"},{"name":"i32"}],"output":{"name":"encoderesult"}}],[11,"emit_i16","","",35,{"inputs":[{"name":"encoder"},{"name":"i16"}],"output":{"name":"encoderesult"}}],[11,"emit_i8","","",35,{"inputs":[{"name":"encoder"},{"name":"i8"}],"output":{"name":"encoderesult"}}],[11,"emit_bool","","",35,{"inputs":[{"name":"encoder"},{"name":"bool"}],"output":{"name":"encoderesult"}}],[11,"emit_f64","","",35,{"inputs":[{"name":"encoder"},{"name":"f64"}],"output":{"name":"encoderesult"}}],[11,"emit_f32","","",35,{"inputs":[{"name":"encoder"},{"name":"f32"}],"output":{"name":"encoderesult"}}],[11,"emit_char","","",35,{"inputs":[{"name":"encoder"},{"name":"char"}],"output":{"name":"encoderesult"}}],[11,"emit_str","","",35,{"inputs":[{"name":"encoder"},{"name":"str"}],"output":{"name":"encoderesult"}}],[11,"emit_enum","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant_arg","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant_field","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct_field","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_arg","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct_arg","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option","","",35,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option_none","","",35,{"inputs":[{"name":"encoder"}],"output":{"name":"encoderesult"}}],[11,"emit_option_some","","",35,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq_elt","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_key","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_val","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"encode","","",27,{"inputs":[{"name":"json"},{"name":"s"}],"output":{"name":"result"}}],[11,"from_reader","","Decodes a json value from an `&mut io::Read`",27,{"inputs":[{"name":"json"},{"name":"read"}],"output":{"name":"result"}}],[11,"from_str","","Decodes a json value from a string",27,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"result"}}],[11,"pretty","","Borrow this json object as a pretty object to generate a pretty\nrepresentation for it via `Display`.",27,{"inputs":[{"name":"json"}],"output":{"name":"prettyjson"}}],[11,"find","","If the Json value is an Object, returns the value associated with the provided key.\nOtherwise, returns None.",27,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"option"}}],[11,"find_path","","Attempts to get a nested Json Object for each key in `keys`.\nIf any key is found not to exist, find_path will return None.\nOtherwise, it will return the Json value associated with the final key.",27,null],[11,"search","","If the Json value is an Object, performs a depth-first search until\na value associated with the provided key is found. If no value is found\nor the Json value is not an Object, returns None.",27,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"option"}}],[11,"is_object","","Returns true if the Json value is an Object. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_object","","If the Json value is an Object, returns the associated BTreeMap.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_object_mut","","If the Json value is an Object, returns the associated mutable BTreeMap.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_array","","Returns true if the Json value is an Array. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_array","","If the Json value is an Array, returns the associated vector.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_array_mut","","If the Json value is an Array, returns the associated mutable vector.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_string","","Returns true if the Json value is a String. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_string","","If the Json value is a String, returns the associated str.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_number","","Returns true if the Json value is a Number. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"is_i64","","Returns true if the Json value is a i64. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"is_u64","","Returns true if the Json value is a u64. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"is_f64","","Returns true if the Json value is a f64. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_i64","","If the Json value is a number, return or cast it to a i64.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_u64","","If the Json value is a number, return or cast it to a u64.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_f64","","If the Json value is a number, return or cast it to a f64.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_boolean","","Returns true if the Json value is a Boolean. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_boolean","","If the Json value is a Boolean, returns the associated bool.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_null","","Returns true if the Json value is a Null. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_null","","If the Json value is a Null, returns ().\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"index","","",27,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"json"}}],[11,"index","","",27,{"inputs":[{"name":"json"},{"name":"usize"}],"output":{"name":"json"}}],[11,"fmt","","",32,{"inputs":[{"name":"jsonevent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",32,{"inputs":[{"name":"jsonevent"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"jsonevent"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"fmt","","",33,{"inputs":[{"name":"stackelement"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"stackelement"}],"output":{"name":"stackelement"}}],[11,"eq","","",33,{"inputs":[{"name":"stackelement"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"stackelement"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"new","","",36,{"inputs":[{"name":"stack"}],"output":{"name":"stack"}}],[11,"len","","Returns The number of elements in the Stack.",36,{"inputs":[{"name":"stack"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the stack is empty.",36,{"inputs":[{"name":"stack"}],"output":{"name":"bool"}}],[11,"get","","Provides access to the StackElement at a given index.\nlower indices are at the bottom of the stack while higher indices are\nat the top.",36,{"inputs":[{"name":"stack"},{"name":"usize"}],"output":{"name":"stackelement"}}],[11,"is_equal_to","","Compares this stack with an array of StackElements.",36,null],[11,"starts_with","","Returns true if the bottom-most elements of this stack are the same as\nthe ones passed as parameter.",36,null],[11,"ends_with","","Returns true if the top-most elements of this stack are the same as\nthe ones passed as parameter.",36,null],[11,"top","","Returns the top-most element (if any).",36,{"inputs":[{"name":"stack"}],"output":{"name":"option"}}],[11,"next","","",37,{"inputs":[{"name":"parser"}],"output":{"name":"option"}}],[11,"new","","Creates the JSON parser.",37,{"inputs":[{"name":"parser"},{"name":"t"}],"output":{"name":"parser"}}],[11,"stack","","Provides access to the current position in the logical structure of the\nJSON stream.",37,{"inputs":[{"name":"parser"}],"output":{"name":"stack"}}],[11,"new","","Create a JSON Builder.",38,{"inputs":[{"name":"builder"},{"name":"t"}],"output":{"name":"builder"}}],[11,"build","","",38,{"inputs":[{"name":"builder"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder instance for decoding the specified JSON value.",39,{"inputs":[{"name":"decoder"},{"name":"json"}],"output":{"name":"decoder"}}],[11,"read_nil","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_usize","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u8","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u16","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u32","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u64","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_isize","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i8","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i16","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i32","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i64","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_f32","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_f64","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_bool","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_char","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_str","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_enum","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_enum_variant","","",39,null],[11,"read_enum_variant_arg","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_enum_struct_variant","","",39,null],[11,"read_enum_struct_variant_field","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_struct","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_struct_field","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_arg","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_struct","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_struct_arg","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_option","","",39,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_seq","","",39,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_seq_elt","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map","","",39,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map_elt_key","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map_elt_val","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"error","","",39,{"inputs":[{"name":"decoder"},{"name":"str"}],"output":{"name":"decodererror"}}],[11,"to_json","","",27,{"inputs":[{"name":"json"}],"output":{"name":"json"}}],[11,"to_json","collections::string","",0,{"inputs":[{"name":"string"}],"output":{"name":"json"}}],[11,"to_json","collections::vec","",4,{"inputs":[{"name":"vec"}],"output":{"name":"json"}}],[11,"to_json","collections::btree::map","",14,{"inputs":[{"name":"btreemap"}],"output":{"name":"json"}}],[11,"to_json","std::collections::hash::map","",16,{"inputs":[{"name":"hashmap"}],"output":{"name":"json"}}],[11,"to_json","core::option","",5,{"inputs":[{"name":"option"}],"output":{"name":"json"}}],[11,"fmt","rustc_serialize::json","Encodes a json value into a string",27,{"inputs":[{"name":"json"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",40,{"inputs":[{"name":"prettyjson"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",41,{"inputs":[{"name":"asjson"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"indent","","Set the indentation level for the emitted JSON",42,{"inputs":[{"name":"asprettyjson"},{"name":"u32"}],"output":{"name":"asprettyjson"}}],[11,"fmt","","Encodes a json value into a string",42,{"inputs":[{"name":"asprettyjson"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",27,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"result"}}],[8,"Decoder","rustc_serialize","",null,null],[16,"Error","","",43,null],[10,"read_nil","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_usize","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u64","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u32","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u16","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u8","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_isize","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i64","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i32","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i16","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i8","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_bool","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_f64","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_f32","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_char","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_str","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_enum","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_enum_variant","","",43,null],[10,"read_enum_variant_arg","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_enum_struct_variant","","",43,null],[10,"read_enum_struct_variant_field","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_struct","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_struct_field","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_arg","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_struct","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_struct_arg","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_option","","",43,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_seq","","",43,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_seq_elt","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map","","",43,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map_elt_key","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map_elt_val","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"error","","",43,{"inputs":[{"name":"decoder"},{"name":"str"}],"output":{"name":"error"}}],[8,"Encoder","","",null,null],[16,"Error","","",44,null],[10,"emit_nil","","",44,{"inputs":[{"name":"encoder"}],"output":{"name":"result"}}],[10,"emit_usize","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"}],"output":{"name":"result"}}],[10,"emit_u64","","",44,{"inputs":[{"name":"encoder"},{"name":"u64"}],"output":{"name":"result"}}],[10,"emit_u32","","",44,{"inputs":[{"name":"encoder"},{"name":"u32"}],"output":{"name":"result"}}],[10,"emit_u16","","",44,{"inputs":[{"name":"encoder"},{"name":"u16"}],"output":{"name":"result"}}],[10,"emit_u8","","",44,{"inputs":[{"name":"encoder"},{"name":"u8"}],"output":{"name":"result"}}],[10,"emit_isize","","",44,{"inputs":[{"name":"encoder"},{"name":"isize"}],"output":{"name":"result"}}],[10,"emit_i64","","",44,{"inputs":[{"name":"encoder"},{"name":"i64"}],"output":{"name":"result"}}],[10,"emit_i32","","",44,{"inputs":[{"name":"encoder"},{"name":"i32"}],"output":{"name":"result"}}],[10,"emit_i16","","",44,{"inputs":[{"name":"encoder"},{"name":"i16"}],"output":{"name":"result"}}],[10,"emit_i8","","",44,{"inputs":[{"name":"encoder"},{"name":"i8"}],"output":{"name":"result"}}],[10,"emit_bool","","",44,{"inputs":[{"name":"encoder"},{"name":"bool"}],"output":{"name":"result"}}],[10,"emit_f64","","",44,{"inputs":[{"name":"encoder"},{"name":"f64"}],"output":{"name":"result"}}],[10,"emit_f32","","",44,{"inputs":[{"name":"encoder"},{"name":"f32"}],"output":{"name":"result"}}],[10,"emit_char","","",44,{"inputs":[{"name":"encoder"},{"name":"char"}],"output":{"name":"result"}}],[10,"emit_str","","",44,{"inputs":[{"name":"encoder"},{"name":"str"}],"output":{"name":"result"}}],[10,"emit_enum","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_variant","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_variant_arg","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_struct_variant","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_struct_variant_field","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_struct","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_struct_field","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_arg","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_struct","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_struct_arg","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_option","","",44,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_option_none","","",44,{"inputs":[{"name":"encoder"}],"output":{"name":"result"}}],[10,"emit_option_some","","",44,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_seq","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_seq_elt","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map_elt_key","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map_elt_val","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[8,"Decodable","","",null,null],[10,"decode","","",45,{"inputs":[{"name":"decodable"},{"name":"d"}],"output":{"name":"result"}}],[8,"Encodable","","",null,null],[10,"encode","","",46,{"inputs":[{"name":"encodable"},{"name":"s"}],"output":{"name":"result"}}],[8,"DecoderHelpers","","",null,null],[10,"read_to_vec","","",47,{"inputs":[{"name":"decoderhelpers"},{"name":"f"}],"output":{"name":"result"}}],[8,"EncoderHelpers","","",null,null],[10,"emit_from_vec","","",48,null]],"paths":[[3,"String"],[3,"Box"],[3,"Rc"],[4,"Cow"],[3,"Vec"],[4,"Option"],[3,"PhantomData"],[3,"Path"],[3,"PathBuf"],[3,"Cell"],[3,"RefCell"],[3,"Arc"],[3,"LinkedList"],[3,"VecDeque"],[3,"BTreeMap"],[3,"BTreeSet"],[3,"HashMap"],[3,"HashSet"],[3,"Config"],[4,"CharacterSet"],[4,"Newline"],[4,"FromBase64Error"],[8,"ToBase64"],[8,"FromBase64"],[4,"FromHexError"],[8,"ToHex"],[8,"FromHex"],[4,"Json"],[4,"ErrorCode"],[4,"ParserError"],[4,"DecoderError"],[4,"EncoderError"],[4,"JsonEvent"],[4,"StackElement"],[8,"ToJson"],[3,"Encoder"],[3,"Stack"],[3,"Parser"],[3,"Builder"],[3,"Decoder"],[3,"PrettyJson"],[3,"AsJson"],[3,"AsPrettyJson"],[8,"Decoder"],[8,"Encoder"],[8,"Decodable"],[8,"Encodable"],[8,"DecoderHelpers"],[8,"EncoderHelpers"]]};
searchIndex['winapi'] = {"items":[],"paths":[]};
searchIndex['typeable'] = {"items":[[0,"","typeable","Exposes `Typeable`, which exposes the `get_type` method, which gives\nthe `TypeId` of any 'static type.",null,null],[8,"Typeable","","Universal mixin trait for adding a `get_type` method.",null,null],[11,"get_type","","Get the `TypeId` of this object.",0,{"inputs":[{"name":"typeable"}],"output":{"name":"typeid"}}]],"paths":[[8,"Typeable"]]};
searchIndex['unicode_normalization'] = {"items":[[0,"","unicode_normalization","Unicode character composition and decomposition utilities\nas described in\n[Unicode Standard Annex #15](http://www.unicode.org/reports/tr15/).",null,null],[3,"Decompositions","","External iterator for a string decomposition's characters.",null,null],[3,"Recompositions","","External iterator for a string recomposition's characters.",null,null],[11,"clone","","",0,{"inputs":[{"name":"decompositions"}],"output":{"name":"decompositions"}}],[11,"next","","",0,{"inputs":[{"name":"decompositions"}],"output":{"name":"option"}}],[11,"size_hint","","",0,null],[11,"clone","","",1,{"inputs":[{"name":"recompositions"}],"output":{"name":"recompositions"}}],[11,"next","","",1,{"inputs":[{"name":"recompositions"}],"output":{"name":"option"}}],[0,"char","","Methods for composing and decomposing characters.",null,null],[5,"decompose_canonical","unicode_normalization::char","Compute canonical Unicode decomposition for character.\nSee [Unicode Standard Annex #15](http://www.unicode.org/reports/tr15/)\nfor more information.",null,{"inputs":[{"name":"char"},{"name":"f"}],"output":null}],[5,"decompose_compatible","","Compute canonical or compatible Unicode decomposition for character.\nSee [Unicode Standard Annex #15](http://www.unicode.org/reports/tr15/)\nfor more information.",null,{"inputs":[{"name":"char"},{"name":"f"}],"output":null}],[5,"compose","","Compose two characters into a single character, if possible.\nSee [Unicode Standard Annex #15](http://www.unicode.org/reports/tr15/)\nfor more information.",null,{"inputs":[{"name":"char"},{"name":"char"}],"output":{"name":"option"}}],[5,"canonical_combining_class","","",null,{"inputs":[{"name":"char"}],"output":{"name":"u8"}}],[5,"is_combining_mark","","Return whether the given character is a combining mark (`General_Category=Mark`)",null,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[17,"UNICODE_VERSION","unicode_normalization","The version of [Unicode](http://www.unicode.org/)\nthat this version of unicode-normalization is based on.",null,null],[8,"UnicodeNormalization","","Methods for iterating over strings while applying Unicode normalizations\nas described in\n[Unicode Standard Annex #15](http://www.unicode.org/reports/tr15/).",null,null],[10,"nfd","","Returns an iterator over the string in Unicode Normalization Form D\n(canonical decomposition).",2,{"inputs":[{"name":"unicodenormalization"}],"output":{"name":"decompositions"}}],[10,"nfkd","","Returns an iterator over the string in Unicode Normalization Form KD\n(compatibility decomposition).",2,{"inputs":[{"name":"unicodenormalization"}],"output":{"name":"decompositions"}}],[10,"nfc","","An Iterator over the string in Unicode Normalization Form C\n(canonical decomposition followed by canonical composition).",2,{"inputs":[{"name":"unicodenormalization"}],"output":{"name":"recompositions"}}],[10,"nfkc","","An Iterator over the string in Unicode Normalization Form KC\n(compatibility decomposition followed by canonical composition).",2,{"inputs":[{"name":"unicodenormalization"}],"output":{"name":"recompositions"}}]],"paths":[[3,"Decompositions"],[3,"Recompositions"],[8,"UnicodeNormalization"]]};
searchIndex['mempool'] = {"items":[[0,"","mempool","This crate provides a fast thread safe memory pool for reusing allocations.",null,null],[3,"Pool","","A fast memory pool.",null,null],[3,"RefGuard","","A guard for putting values back into the pool on drop.",null,null],[3,"Guard","","A guard for putting values back into the pool on drop.",null,null],[6,"CreateFn","","The type of an initialization function.",null,null],[11,"clone","","",0,{"inputs":[{"name":"pool"}],"output":{"name":"pool"}}],[11,"fmt","","",0,{"inputs":[{"name":"pool"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"refguard"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"guard"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new memory pool with the given initialization function.",0,{"inputs":[{"name":"pool"},{"name":"createfn"}],"output":{"name":"pool"}}],[11,"get","","Get a new value from the pool.",0,{"inputs":[{"name":"pool"}],"output":{"name":"guard"}}],[11,"get_ref","","Get a new value from the pool.",0,{"inputs":[{"name":"pool"}],"output":{"name":"refguard"}}],[11,"drop","","",1,{"inputs":[{"name":"refguard"}],"output":null}],[11,"deref","","",1,{"inputs":[{"name":"refguard"}],"output":{"name":"t"}}],[11,"deref_mut","","",1,{"inputs":[{"name":"refguard"}],"output":{"name":"t"}}],[11,"drop","","",2,{"inputs":[{"name":"guard"}],"output":null}],[11,"deref","","",2,{"inputs":[{"name":"guard"}],"output":{"name":"t"}}],[11,"deref_mut","","",2,{"inputs":[{"name":"guard"}],"output":{"name":"t"}}]],"paths":[[3,"Pool"],[3,"RefGuard"],[3,"Guard"]]};
searchIndex['httparse'] = {"items":[[0,"","httparse","# httparse",null,null],[3,"InvalidChunkSize","","An error in parsing a chunk size.",null,null],[3,"Request","","A parsed Request.",null,null],[12,"method","","The request method, such as `GET`.",0,null],[12,"path","","The request path, such as `/about-us`.",0,null],[12,"version","","The request version, such as `HTTP/1.1`.",0,null],[12,"headers","","The request headers.",0,null],[3,"Response","","A parsed Response.",null,null],[12,"version","","The response version, such as `HTTP/1.1`.",1,null],[12,"code","","The response code, such as `200`.",1,null],[12,"reason","","The response reason-phrase, such as `OK`.",1,null],[12,"headers","","THe response headers.",1,null],[3,"Header","","Represents a parsed header.",null,null],[12,"name","","The name portion of a header.",2,null],[12,"value","","The value portion of a header.",2,null],[4,"Error","","An error in parsing.",null,null],[13,"HeaderName","","Invalid byte in header name.",3,null],[13,"HeaderValue","","INvalid byte in header value.",3,null],[13,"NewLine","","Invalid byte in new line.",3,null],[13,"Status","","Invalid byte in Response status.",3,null],[13,"Token","","Invalid byte where token is required.",3,null],[13,"TooManyHeaders","","Parsed more headers than provided buffer can contain.",3,null],[13,"Version","","Invalid byte in HTTP version.",3,null],[4,"Status","","The result of a successful parse pass.",null,null],[13,"Complete","","The completed result.",4,null],[13,"Partial","","A partial result.",4,null],[5,"parse_headers","","Parse a buffer of bytes as headers.",null,null],[5,"parse_chunk_size","","Parse a buffer of bytes as a chunk size.",null,null],[6,"Result","","A Result of any parsing action.",null,null],[17,"EMPTY_HEADER","","An empty header, useful for constructing a `Header` array to pass in for\nparsing.",null,null],[11,"fmt","","",3,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"eq","","",5,{"inputs":[{"name":"invalidchunksize"},{"name":"invalidchunksize"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"invalidchunksize"},{"name":"invalidchunksize"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"invalidchunksize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"status"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"status"},{"name":"status"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"status"},{"name":"status"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"status"}],"output":{"name":"status"}}],[11,"is_complete","","Convenience method to check if status is complete.",4,{"inputs":[{"name":"status"}],"output":{"name":"bool"}}],[11,"is_partial","","Convenience method to check if status is partial.",4,{"inputs":[{"name":"status"}],"output":{"name":"bool"}}],[11,"unwrap","","Convenience method to unwrap a Complete value. Panics if the status is\n`Partial`.",4,{"inputs":[{"name":"status"}],"output":{"name":"t"}}],[11,"new","","Creates a new Request, using a slice of headers you allocate.",0,null],[11,"parse","","Try to parse a buffer of bytes into the Request.",0,null],[11,"new","","Creates a new `Response` using a slice of `Header`s you have allocated.",1,null],[11,"parse","","Try to parse a buffer of bytes into this `Response`.",1,null],[11,"fmt","","",2,{"inputs":[{"name":"header"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"header"},{"name":"header"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"header"},{"name":"header"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"header"}],"output":{"name":"header"}}]],"paths":[[3,"Request"],[3,"Response"],[3,"Header"],[4,"Error"],[4,"Status"],[3,"InvalidChunkSize"]]};
searchIndex['language_tags'] = {"items":[[0,"","language_tags","Language tags can be used identify human languages, scripts e.g. Latin script, countries and\nother regions.",null,null],[3,"LanguageTag","","A language tag as described in [BCP47](http://tools.ietf.org/html/bcp47).",null,null],[12,"language","","Language subtags are used to indicate the language, ignoring all\nother aspects such as script, region or spefic invariants.",0,null],[12,"extlangs","","Extended language subtags are used to identify certain specially\nselected languages that, for various historical and compatibility\nreasons, are closely identified with or tagged using an existing\nprimary language subtag.",0,null],[12,"script","","Script subtags are used to indicate the script or writing system\nvariations that distinguish the written forms of a language or its\ndialects.",0,null],[12,"region","","Region subtags are used to indicate linguistic variations associated\nwith or appropriate to a specific country, territory, or region.\nTypically, a region subtag is used to indicate variations such as\nregional dialects or usage, or region-specific spelling conventions.\nIt can also be used to indicate that content is expressed in a way\nthat is appropriate for use throughout a region, for instance,\nSpanish content tailored to be useful throughout Latin America.",0,null],[12,"variants","","Variant subtags are used to indicate additional, well-recognized\nvariations that define a language or its dialects that are not\ncovered by other available subtags.",0,null],[12,"extensions","","Extensions provide a mechanism for extending language tags for use in\nvarious applications.  They are intended to identify information that\nis commonly used in association with languages or language tags but\nthat is not part of language identification.",0,null],[12,"privateuse","","Private use subtags are used to indicate distinctions in language\nthat are important in a given context by private agreement.",0,null],[4,"Error","","Defines an Error type for langtags.",null,null],[13,"DuplicateExtension","","The same extension subtag is only allowed once in a tag before the private use part.",1,null],[13,"EmptyExtension","","If an extension subtag is present, it must not be empty.",1,null],[13,"EmptyPrivateUse","","If the `x` subtag is present, it must not be empty.",1,null],[13,"ForbiddenChar","","The langtag contains a char that is not A-Z, a-z, 0-9 or the dash.",1,null],[13,"InvalidSubtag","","A subtag fails to parse, it does not match any other subtags.",1,null],[13,"InvalidLanguage","","The given language subtag is invalid.",1,null],[13,"SubtagTooLong","","A subtag may be eight characters in length at maximum.",1,null],[13,"TooManyExtlangs","","At maximum three extlangs are allowed, but zero to one extlangs are preferred.",1,null],[6,"Result","","Result type used for this library.",null,null],[17,"GRANDFATHERED","","Contains all grandfathered tags.",null,null],[11,"eq","","",1,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"fmt","","",1,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"languagetag"}],"output":{"name":"languagetag"}}],[11,"default","","",0,{"inputs":[{"name":"languagetag"}],"output":{"name":"languagetag"}}],[11,"fmt","","",0,{"inputs":[{"name":"languagetag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"matches","","Matches language tags. The first language acts as a language range, the second one is used\nas a normal language tag. None fields in the language range are ignored. If the language\ntag has more extlangs than the range these extlangs are ignored. Matches are\ncase-insensitive. `*` in language ranges are represented using `None` values. The language\nrange `*` that matches language tags is created by the default language tag:\n`let wildcard: LanguageTag = Default::default();.`",0,{"inputs":[{"name":"languagetag"},{"name":"languagetag"}],"output":{"name":"bool"}}],[11,"is_language_range","","Checks if it is a language range, meaning that there are no extension and privateuse tags.",0,{"inputs":[{"name":"languagetag"}],"output":{"name":"bool"}}],[11,"canonicalize","","Returns the canonical version of the language tag.",0,{"inputs":[{"name":"languagetag"}],"output":{"name":"languagetag"}}],[11,"eq","","",0,{"inputs":[{"name":"languagetag"},{"name":"languagetag"}],"output":{"name":"bool"}}],[11,"from_str","","",0,{"inputs":[{"name":"languagetag"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"languagetag"},{"name":"formatter"}],"output":{"name":"result"}}],[14,"langtag!","","Utility for creating simple language tags.",null,null]],"paths":[[3,"LanguageTag"],[4,"Error"]]};
initSearch(searchIndex);
